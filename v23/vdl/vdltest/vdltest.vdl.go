// Copyright 2016 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: vdltest

package vdltest

import (
	"fmt"
	"v.io/v23/vdl"
)

var _ = __VDLInit() // Must be first; see __VDLInit comments for details.

//////////////////////////////////////////////////
// Type definitions

// vdlEntry represents a test entry, which contains a target and source value.
// Each test converts the source value to the type of the target value, and
// either passes or fails.
//
// An entry may either be canonical or not.  For a given canonical entry C,
// C.Target==C.Source always holds, and in addition, C.Source is the canonical
// representation of the value.
type vdlEntry struct {
	IsCanonical bool
	Label       string      // Label describes the entry, e.g. Full, Random...
	TargetLabel string      // TargetLabel describes the Target value
	Target      interface{} // Target value for conversion test
	SourceLabel string      // SourceLabel describes the Source value
	Source      interface{} // Source value for conversion test
}

func (vdlEntry) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.vdlEntry"`
}) {
}

func (x vdlEntry) VDLIsZero() bool {
	return x == vdlEntry{}
}

func (x vdlEntry) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_struct_1); err != nil {
		return err
	}
	if x.IsCanonical {
		if err := enc.NextFieldValueBool(0, vdl.BoolType, x.IsCanonical); err != nil {
			return err
		}
	}
	if x.Label != "" {
		if err := enc.NextFieldValueString(1, vdl.StringType, x.Label); err != nil {
			return err
		}
	}
	if x.TargetLabel != "" {
		if err := enc.NextFieldValueString(2, vdl.StringType, x.TargetLabel); err != nil {
			return err
		}
	}
	if x.Target != nil {
		if err := enc.NextField(3); err != nil {
			return err
		}
		if err := vdl.Write(enc, x.Target); err != nil {
			return err
		}
	}
	if x.SourceLabel != "" {
		if err := enc.NextFieldValueString(4, vdl.StringType, x.SourceLabel); err != nil {
			return err
		}
	}
	if x.Source != nil {
		if err := enc.NextField(5); err != nil {
			return err
		}
		if err := vdl.Write(enc, x.Source); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *vdlEntry) VDLRead(dec vdl.Decoder) error {
	*x = vdlEntry{}
	if err := dec.StartValue(__VDLType_struct_1); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != __VDLType_struct_1 {
			index = __VDLType_struct_1.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		switch index {
		case 0:
			switch value, err := dec.ReadValueBool(); {
			case err != nil:
				return err
			default:
				x.IsCanonical = value
			}
		case 1:
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				x.Label = value
			}
		case 2:
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				x.TargetLabel = value
			}
		case 3:
			var readAny interface{}
			if err := vdl.Read(dec, &readAny); err != nil {
				return err
			}
			x.Target = readAny
		case 4:
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				x.SourceLabel = value
			}
		case 5:
			var readAny interface{}
			if err := vdl.Read(dec, &readAny); err != nil {
				return err
			}
			x.Source = readAny
		}
	}
}

// VSelfCycle tests self-cyclic types.
type VSelfCycle struct {
	Data int64
	Next *VSelfCycle
}

func (VSelfCycle) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSelfCycle"`
}) {
}

func (x VSelfCycle) VDLIsZero() bool {
	return x == VSelfCycle{}
}

func (x VSelfCycle) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_struct_2); err != nil {
		return err
	}
	if x.Data != 0 {
		if err := enc.NextFieldValueInt(0, vdl.Int64Type, x.Data); err != nil {
			return err
		}
	}
	if x.Next != nil {
		if err := enc.NextField(1); err != nil {
			return err
		}
		enc.SetNextStartValueIsOptional()
		if err := x.Next.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSelfCycle) VDLRead(dec vdl.Decoder) error {
	*x = VSelfCycle{}
	if err := dec.StartValue(__VDLType_struct_2); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != __VDLType_struct_2 {
			index = __VDLType_struct_2.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		switch index {
		case 0:
			switch value, err := dec.ReadValueInt(64); {
			case err != nil:
				return err
			default:
				x.Data = value
			}
		case 1:
			if err := dec.StartValue(__VDLType_optional_3); err != nil {
				return err
			}
			if dec.IsNil() {
				x.Next = nil
				if err := dec.FinishValue(); err != nil {
					return err
				}
			} else {
				x.Next = new(VSelfCycle)
				dec.IgnoreNextStartValue()
				if err := x.Next.VDLRead(dec); err != nil {
					return err
				}
			}
		}
	}
}

// VMutualCycleB tests mutually cyclic types A and B.
type VMutualCycleB struct {
	Data int64
	A    *VMutualCycleA
}

func (VMutualCycleB) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMutualCycleB"`
}) {
}

func (x VMutualCycleB) VDLIsZero() bool {
	return x == VMutualCycleB{}
}

func (x VMutualCycleB) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_struct_4); err != nil {
		return err
	}
	if x.Data != 0 {
		if err := enc.NextFieldValueInt(0, vdl.Int64Type, x.Data); err != nil {
			return err
		}
	}
	if x.A != nil {
		if err := enc.NextField(1); err != nil {
			return err
		}
		enc.SetNextStartValueIsOptional()
		if err := x.A.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMutualCycleB) VDLRead(dec vdl.Decoder) error {
	*x = VMutualCycleB{}
	if err := dec.StartValue(__VDLType_struct_4); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != __VDLType_struct_4 {
			index = __VDLType_struct_4.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		switch index {
		case 0:
			switch value, err := dec.ReadValueInt(64); {
			case err != nil:
				return err
			default:
				x.Data = value
			}
		case 1:
			if err := dec.StartValue(__VDLType_optional_5); err != nil {
				return err
			}
			if dec.IsNil() {
				x.A = nil
				if err := dec.FinishValue(); err != nil {
					return err
				}
			} else {
				x.A = new(VMutualCycleA)
				dec.IgnoreNextStartValue()
				if err := x.A.VDLRead(dec); err != nil {
					return err
				}
			}
		}
	}
}

// VMutualCycleA tests mutually cyclic types A and B.
type VMutualCycleA struct {
	Data int64
	B    *VMutualCycleB
}

func (VMutualCycleA) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMutualCycleA"`
}) {
}

func (x VMutualCycleA) VDLIsZero() bool {
	return x == VMutualCycleA{}
}

func (x VMutualCycleA) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_struct_6); err != nil {
		return err
	}
	if x.Data != 0 {
		if err := enc.NextFieldValueInt(0, vdl.Int64Type, x.Data); err != nil {
			return err
		}
	}
	if x.B != nil {
		if err := enc.NextField(1); err != nil {
			return err
		}
		enc.SetNextStartValueIsOptional()
		if err := x.B.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMutualCycleA) VDLRead(dec vdl.Decoder) error {
	*x = VMutualCycleA{}
	if err := dec.StartValue(__VDLType_struct_6); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != __VDLType_struct_6 {
			index = __VDLType_struct_6.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		switch index {
		case 0:
			switch value, err := dec.ReadValueInt(64); {
			case err != nil:
				return err
			default:
				x.Data = value
			}
		case 1:
			if err := dec.StartValue(__VDLType_optional_7); err != nil {
				return err
			}
			if dec.IsNil() {
				x.B = nil
				if err := dec.FinishValue(); err != nil {
					return err
				}
			} else {
				x.B = new(VMutualCycleB)
				dec.IgnoreNextStartValue()
				if err := x.B.VDLRead(dec); err != nil {
					return err
				}
			}
		}
	}
}

type VWireBoolNBool bool

func (VWireBoolNBool) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireBoolNBool"`
}) {
}

func (x VWireBoolNBool) VDLIsZero() bool {
	return bool(!x)
}

func (x VWireBoolNBool) VDLWrite(enc vdl.Encoder) error {
	if err := enc.WriteValueBool(__VDLType_bool_8, bool(x)); err != nil {
		return err
	}
	return nil
}

func (x *VWireBoolNBool) VDLRead(dec vdl.Decoder) error {
	switch value, err := dec.ReadValueBool(); {
	case err != nil:
		return err
	default:
		*x = VWireBoolNBool(value)
	}
	return nil
}

type VWireBoolNString bool

func (VWireBoolNString) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireBoolNString"`
}) {
}

func (x VWireBoolNString) VDLIsZero() bool {
	return bool(!x)
}

func (x VWireBoolNString) VDLWrite(enc vdl.Encoder) error {
	if err := enc.WriteValueBool(__VDLType_bool_9, bool(x)); err != nil {
		return err
	}
	return nil
}

func (x *VWireBoolNString) VDLRead(dec vdl.Decoder) error {
	switch value, err := dec.ReadValueBool(); {
	case err != nil:
		return err
	default:
		*x = VWireBoolNString(value)
	}
	return nil
}

type VWireBoolNStruct bool

func (VWireBoolNStruct) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireBoolNStruct"`
}) {
}

func (x VWireBoolNStruct) VDLIsZero() bool {
	return bool(!x)
}

func (x VWireBoolNStruct) VDLWrite(enc vdl.Encoder) error {
	if err := enc.WriteValueBool(__VDLType_bool_10, bool(x)); err != nil {
		return err
	}
	return nil
}

func (x *VWireBoolNStruct) VDLRead(dec vdl.Decoder) error {
	switch value, err := dec.ReadValueBool(); {
	case err != nil:
		return err
	default:
		*x = VWireBoolNStruct(value)
	}
	return nil
}

type VWireIntNInt int32

func (VWireIntNInt) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireIntNInt"`
}) {
}

func (x VWireIntNInt) VDLIsZero() bool {
	return x == 0
}

func (x VWireIntNInt) VDLWrite(enc vdl.Encoder) error {
	if err := enc.WriteValueInt(__VDLType_int32_11, int64(x)); err != nil {
		return err
	}
	return nil
}

func (x *VWireIntNInt) VDLRead(dec vdl.Decoder) error {
	switch value, err := dec.ReadValueInt(32); {
	case err != nil:
		return err
	default:
		*x = VWireIntNInt(value)
	}
	return nil
}

type VWireIntNString int32

func (VWireIntNString) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireIntNString"`
}) {
}

func (x VWireIntNString) VDLIsZero() bool {
	return x == 0
}

func (x VWireIntNString) VDLWrite(enc vdl.Encoder) error {
	if err := enc.WriteValueInt(__VDLType_int32_12, int64(x)); err != nil {
		return err
	}
	return nil
}

func (x *VWireIntNString) VDLRead(dec vdl.Decoder) error {
	switch value, err := dec.ReadValueInt(32); {
	case err != nil:
		return err
	default:
		*x = VWireIntNString(value)
	}
	return nil
}

type VWireIntNStruct int32

func (VWireIntNStruct) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireIntNStruct"`
}) {
}

func (x VWireIntNStruct) VDLIsZero() bool {
	return x == 0
}

func (x VWireIntNStruct) VDLWrite(enc vdl.Encoder) error {
	if err := enc.WriteValueInt(__VDLType_int32_13, int64(x)); err != nil {
		return err
	}
	return nil
}

func (x *VWireIntNStruct) VDLRead(dec vdl.Decoder) error {
	switch value, err := dec.ReadValueInt(32); {
	case err != nil:
		return err
	default:
		*x = VWireIntNStruct(value)
	}
	return nil
}

type VWireStringNString string

func (VWireStringNString) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireStringNString"`
}) {
}

func (x VWireStringNString) VDLIsZero() bool {
	return x == ""
}

func (x VWireStringNString) VDLWrite(enc vdl.Encoder) error {
	if err := enc.WriteValueString(__VDLType_string_14, string(x)); err != nil {
		return err
	}
	return nil
}

func (x *VWireStringNString) VDLRead(dec vdl.Decoder) error {
	switch value, err := dec.ReadValueString(); {
	case err != nil:
		return err
	default:
		*x = VWireStringNString(value)
	}
	return nil
}

type VWireStringNStruct string

func (VWireStringNStruct) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireStringNStruct"`
}) {
}

func (x VWireStringNStruct) VDLIsZero() bool {
	return x == ""
}

func (x VWireStringNStruct) VDLWrite(enc vdl.Encoder) error {
	if err := enc.WriteValueString(__VDLType_string_15, string(x)); err != nil {
		return err
	}
	return nil
}

func (x *VWireStringNStruct) VDLRead(dec vdl.Decoder) error {
	switch value, err := dec.ReadValueString(); {
	case err != nil:
		return err
	default:
		*x = VWireStringNStruct(value)
	}
	return nil
}

type VWireArrayNString [1]string

func (VWireArrayNString) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireArrayNString"`
}) {
}

func (x VWireArrayNString) VDLIsZero() bool {
	return x == VWireArrayNString{}
}

func (x VWireArrayNString) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_array_16); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueString(vdl.StringType, elem); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VWireArrayNString) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(__VDLType_array_16); err != nil {
		return err
	}
	for index := 0; index < 1; index++ {
		switch done, elem, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 1 %T)", index, *x)
		default:
			x[index] = elem
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 1 %T", *x)
	}
	return dec.FinishValue()
}

type VWireArrayNStruct [1]string

func (VWireArrayNStruct) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireArrayNStruct"`
}) {
}

func (x VWireArrayNStruct) VDLIsZero() bool {
	return x == VWireArrayNStruct{}
}

func (x VWireArrayNStruct) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_array_17); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueString(vdl.StringType, elem); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VWireArrayNStruct) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(__VDLType_array_17); err != nil {
		return err
	}
	for index := 0; index < 1; index++ {
		switch done, elem, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 1 %T)", index, *x)
		default:
			x[index] = elem
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 1 %T", *x)
	}
	return dec.FinishValue()
}

type VWireListNString []string

func (VWireListNString) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireListNString"`
}) {
}

func (x VWireListNString) VDLIsZero() bool {
	return len(x) == 0
}

func (x VWireListNString) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_list_18); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueString(vdl.StringType, elem); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VWireListNString) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(__VDLType_list_18); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VWireListNString, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, elem, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			*x = append(*x, elem)
		}
	}
}

type VWireListNStruct []string

func (VWireListNStruct) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireListNStruct"`
}) {
}

func (x VWireListNStruct) VDLIsZero() bool {
	return len(x) == 0
}

func (x VWireListNStruct) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_list_19); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueString(vdl.StringType, elem); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VWireListNStruct) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(__VDLType_list_19); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VWireListNStruct, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, elem, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			*x = append(*x, elem)
		}
	}
}

type VWireStructNString struct {
	X string
}

func (VWireStructNString) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireStructNString"`
}) {
}

func (x VWireStructNString) VDLIsZero() bool {
	return x == VWireStructNString{}
}

func (x VWireStructNString) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_struct_20); err != nil {
		return err
	}
	if x.X != "" {
		if err := enc.NextFieldValueString(0, vdl.StringType, x.X); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VWireStructNString) VDLRead(dec vdl.Decoder) error {
	*x = VWireStructNString{}
	if err := dec.StartValue(__VDLType_struct_20); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != __VDLType_struct_20 {
			index = __VDLType_struct_20.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		switch index {
		case 0:
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				x.X = value
			}
		}
	}
}

type VWireStructNStruct struct {
	X string
}

func (VWireStructNStruct) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireStructNStruct"`
}) {
}

func (x VWireStructNStruct) VDLIsZero() bool {
	return x == VWireStructNStruct{}
}

func (x VWireStructNStruct) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_struct_21); err != nil {
		return err
	}
	if x.X != "" {
		if err := enc.NextFieldValueString(0, vdl.StringType, x.X); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VWireStructNStruct) VDLRead(dec vdl.Decoder) error {
	*x = VWireStructNStruct{}
	if err := dec.StartValue(__VDLType_struct_21); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != __VDLType_struct_21 {
			index = __VDLType_struct_21.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		switch index {
		case 0:
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				x.X = value
			}
		}
	}
}

type VWireStructNArray struct {
	X string
}

func (VWireStructNArray) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireStructNArray"`
}) {
}

func (x VWireStructNArray) VDLIsZero() bool {
	return x == VWireStructNArray{}
}

func (x VWireStructNArray) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_struct_22); err != nil {
		return err
	}
	if x.X != "" {
		if err := enc.NextFieldValueString(0, vdl.StringType, x.X); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VWireStructNArray) VDLRead(dec vdl.Decoder) error {
	*x = VWireStructNArray{}
	if err := dec.StartValue(__VDLType_struct_22); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != __VDLType_struct_22 {
			index = __VDLType_struct_22.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		switch index {
		case 0:
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				x.X = value
			}
		}
	}
}

type VWireStructNSlice struct {
	X string
}

func (VWireStructNSlice) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireStructNSlice"`
}) {
}

func (x VWireStructNSlice) VDLIsZero() bool {
	return x == VWireStructNSlice{}
}

func (x VWireStructNSlice) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_struct_23); err != nil {
		return err
	}
	if x.X != "" {
		if err := enc.NextFieldValueString(0, vdl.StringType, x.X); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VWireStructNSlice) VDLRead(dec vdl.Decoder) error {
	*x = VWireStructNSlice{}
	if err := dec.StartValue(__VDLType_struct_23); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != __VDLType_struct_23 {
			index = __VDLType_struct_23.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		switch index {
		case 0:
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				x.X = value
			}
		}
	}
}

type VWireStructNPointer struct {
	X string
}

func (VWireStructNPointer) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireStructNPointer"`
}) {
}

func (x VWireStructNPointer) VDLIsZero() bool {
	return x == VWireStructNPointer{}
}

func (x VWireStructNPointer) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_struct_24); err != nil {
		return err
	}
	if x.X != "" {
		if err := enc.NextFieldValueString(0, vdl.StringType, x.X); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VWireStructNPointer) VDLRead(dec vdl.Decoder) error {
	*x = VWireStructNPointer{}
	if err := dec.StartValue(__VDLType_struct_24); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != __VDLType_struct_24 {
			index = __VDLType_struct_24.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		switch index {
		case 0:
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				x.X = value
			}
		}
	}
}

type VWireStructNIface struct {
	X string
}

func (VWireStructNIface) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireStructNIface"`
}) {
}

func (x VWireStructNIface) VDLIsZero() bool {
	return x == VWireStructNIface{}
}

func (x VWireStructNIface) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_struct_25); err != nil {
		return err
	}
	if x.X != "" {
		if err := enc.NextFieldValueString(0, vdl.StringType, x.X); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VWireStructNIface) VDLRead(dec vdl.Decoder) error {
	*x = VWireStructNIface{}
	if err := dec.StartValue(__VDLType_struct_25); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != __VDLType_struct_25 {
			index = __VDLType_struct_25.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		switch index {
		case 0:
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				x.X = value
			}
		}
	}
}

type (
	// VWireUnionNString represents any single field of the VWireUnionNString union type.
	VWireUnionNString interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VWireUnionNString union type.
		VDLReflect(__VWireUnionNStringReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VWireUnionNStringX represents field X of the VWireUnionNString union type.
	VWireUnionNStringX struct{ Value string }
	// __VWireUnionNStringReflect describes the VWireUnionNString union type.
	__VWireUnionNStringReflect struct {
		Name  string `vdl:"v.io/v23/vdl/vdltest.VWireUnionNString"`
		Type  VWireUnionNString
		Union struct {
			X VWireUnionNStringX
		}
	}
)

func (x VWireUnionNStringX) Index() int                            { return 0 }
func (x VWireUnionNStringX) Interface() interface{}                { return x.Value }
func (x VWireUnionNStringX) Name() string                          { return "X" }
func (x VWireUnionNStringX) VDLReflect(__VWireUnionNStringReflect) {}

func (x VWireUnionNStringX) VDLIsZero() bool {
	return x.Value == ""
}

func (x VWireUnionNStringX) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_union_26); err != nil {
		return err
	}
	if err := enc.NextFieldValueString(0, vdl.StringType, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVWireUnionNString(dec vdl.Decoder, x *VWireUnionNString) error {
	if err := dec.StartValue(__VDLType_union_26); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != __VDLType_union_26 {
		name := decType.Field(index).Name
		index = __VDLType_union_26.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	switch index {
	case 0:
		var field VWireUnionNStringX
		switch value, err := dec.ReadValueString(); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	}
	switch index, err := dec.NextField(); {
	case err != nil:
		return err
	case index != -1:
		return fmt.Errorf("extra field %d in union %T, from %v", index, x, dec.Type())
	}
	return dec.FinishValue()
}

type (
	// VWireUnionNStruct represents any single field of the VWireUnionNStruct union type.
	VWireUnionNStruct interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VWireUnionNStruct union type.
		VDLReflect(__VWireUnionNStructReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VWireUnionNStructX represents field X of the VWireUnionNStruct union type.
	VWireUnionNStructX struct{ Value string }
	// __VWireUnionNStructReflect describes the VWireUnionNStruct union type.
	__VWireUnionNStructReflect struct {
		Name  string `vdl:"v.io/v23/vdl/vdltest.VWireUnionNStruct"`
		Type  VWireUnionNStruct
		Union struct {
			X VWireUnionNStructX
		}
	}
)

func (x VWireUnionNStructX) Index() int                            { return 0 }
func (x VWireUnionNStructX) Interface() interface{}                { return x.Value }
func (x VWireUnionNStructX) Name() string                          { return "X" }
func (x VWireUnionNStructX) VDLReflect(__VWireUnionNStructReflect) {}

func (x VWireUnionNStructX) VDLIsZero() bool {
	return x.Value == ""
}

func (x VWireUnionNStructX) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_union_27); err != nil {
		return err
	}
	if err := enc.NextFieldValueString(0, vdl.StringType, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVWireUnionNStruct(dec vdl.Decoder, x *VWireUnionNStruct) error {
	if err := dec.StartValue(__VDLType_union_27); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != __VDLType_union_27 {
		name := decType.Field(index).Name
		index = __VDLType_union_27.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	switch index {
	case 0:
		var field VWireUnionNStructX
		switch value, err := dec.ReadValueString(); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	}
	switch index, err := dec.NextField(); {
	case err != nil:
		return err
	case index != -1:
		return fmt.Errorf("extra field %d in union %T, from %v", index, x, dec.Type())
	}
	return dec.FinishValue()
}

type (
	// VWireUnionNArray represents any single field of the VWireUnionNArray union type.
	VWireUnionNArray interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VWireUnionNArray union type.
		VDLReflect(__VWireUnionNArrayReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VWireUnionNArrayX represents field X of the VWireUnionNArray union type.
	VWireUnionNArrayX struct{ Value string }
	// __VWireUnionNArrayReflect describes the VWireUnionNArray union type.
	__VWireUnionNArrayReflect struct {
		Name  string `vdl:"v.io/v23/vdl/vdltest.VWireUnionNArray"`
		Type  VWireUnionNArray
		Union struct {
			X VWireUnionNArrayX
		}
	}
)

func (x VWireUnionNArrayX) Index() int                           { return 0 }
func (x VWireUnionNArrayX) Interface() interface{}               { return x.Value }
func (x VWireUnionNArrayX) Name() string                         { return "X" }
func (x VWireUnionNArrayX) VDLReflect(__VWireUnionNArrayReflect) {}

func (x VWireUnionNArrayX) VDLIsZero() bool {
	return x.Value == ""
}

func (x VWireUnionNArrayX) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_union_28); err != nil {
		return err
	}
	if err := enc.NextFieldValueString(0, vdl.StringType, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVWireUnionNArray(dec vdl.Decoder, x *VWireUnionNArray) error {
	if err := dec.StartValue(__VDLType_union_28); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != __VDLType_union_28 {
		name := decType.Field(index).Name
		index = __VDLType_union_28.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	switch index {
	case 0:
		var field VWireUnionNArrayX
		switch value, err := dec.ReadValueString(); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	}
	switch index, err := dec.NextField(); {
	case err != nil:
		return err
	case index != -1:
		return fmt.Errorf("extra field %d in union %T, from %v", index, x, dec.Type())
	}
	return dec.FinishValue()
}

type (
	// VWireUnionNSlice represents any single field of the VWireUnionNSlice union type.
	VWireUnionNSlice interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VWireUnionNSlice union type.
		VDLReflect(__VWireUnionNSliceReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VWireUnionNSliceX represents field X of the VWireUnionNSlice union type.
	VWireUnionNSliceX struct{ Value string }
	// __VWireUnionNSliceReflect describes the VWireUnionNSlice union type.
	__VWireUnionNSliceReflect struct {
		Name  string `vdl:"v.io/v23/vdl/vdltest.VWireUnionNSlice"`
		Type  VWireUnionNSlice
		Union struct {
			X VWireUnionNSliceX
		}
	}
)

func (x VWireUnionNSliceX) Index() int                           { return 0 }
func (x VWireUnionNSliceX) Interface() interface{}               { return x.Value }
func (x VWireUnionNSliceX) Name() string                         { return "X" }
func (x VWireUnionNSliceX) VDLReflect(__VWireUnionNSliceReflect) {}

func (x VWireUnionNSliceX) VDLIsZero() bool {
	return x.Value == ""
}

func (x VWireUnionNSliceX) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_union_29); err != nil {
		return err
	}
	if err := enc.NextFieldValueString(0, vdl.StringType, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVWireUnionNSlice(dec vdl.Decoder, x *VWireUnionNSlice) error {
	if err := dec.StartValue(__VDLType_union_29); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != __VDLType_union_29 {
		name := decType.Field(index).Name
		index = __VDLType_union_29.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	switch index {
	case 0:
		var field VWireUnionNSliceX
		switch value, err := dec.ReadValueString(); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	}
	switch index, err := dec.NextField(); {
	case err != nil:
		return err
	case index != -1:
		return fmt.Errorf("extra field %d in union %T, from %v", index, x, dec.Type())
	}
	return dec.FinishValue()
}

type (
	// VWireUnionNPointer represents any single field of the VWireUnionNPointer union type.
	VWireUnionNPointer interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VWireUnionNPointer union type.
		VDLReflect(__VWireUnionNPointerReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VWireUnionNPointerX represents field X of the VWireUnionNPointer union type.
	VWireUnionNPointerX struct{ Value string }
	// __VWireUnionNPointerReflect describes the VWireUnionNPointer union type.
	__VWireUnionNPointerReflect struct {
		Name  string `vdl:"v.io/v23/vdl/vdltest.VWireUnionNPointer"`
		Type  VWireUnionNPointer
		Union struct {
			X VWireUnionNPointerX
		}
	}
)

func (x VWireUnionNPointerX) Index() int                             { return 0 }
func (x VWireUnionNPointerX) Interface() interface{}                 { return x.Value }
func (x VWireUnionNPointerX) Name() string                           { return "X" }
func (x VWireUnionNPointerX) VDLReflect(__VWireUnionNPointerReflect) {}

func (x VWireUnionNPointerX) VDLIsZero() bool {
	return x.Value == ""
}

func (x VWireUnionNPointerX) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_union_30); err != nil {
		return err
	}
	if err := enc.NextFieldValueString(0, vdl.StringType, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVWireUnionNPointer(dec vdl.Decoder, x *VWireUnionNPointer) error {
	if err := dec.StartValue(__VDLType_union_30); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != __VDLType_union_30 {
		name := decType.Field(index).Name
		index = __VDLType_union_30.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	switch index {
	case 0:
		var field VWireUnionNPointerX
		switch value, err := dec.ReadValueString(); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	}
	switch index, err := dec.NextField(); {
	case err != nil:
		return err
	case index != -1:
		return fmt.Errorf("extra field %d in union %T, from %v", index, x, dec.Type())
	}
	return dec.FinishValue()
}

type (
	// VWireUnionNIface represents any single field of the VWireUnionNIface union type.
	VWireUnionNIface interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VWireUnionNIface union type.
		VDLReflect(__VWireUnionNIfaceReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VWireUnionNIfaceX represents field X of the VWireUnionNIface union type.
	VWireUnionNIfaceX struct{ Value string }
	// __VWireUnionNIfaceReflect describes the VWireUnionNIface union type.
	__VWireUnionNIfaceReflect struct {
		Name  string `vdl:"v.io/v23/vdl/vdltest.VWireUnionNIface"`
		Type  VWireUnionNIface
		Union struct {
			X VWireUnionNIfaceX
		}
	}
)

func (x VWireUnionNIfaceX) Index() int                           { return 0 }
func (x VWireUnionNIfaceX) Interface() interface{}               { return x.Value }
func (x VWireUnionNIfaceX) Name() string                         { return "X" }
func (x VWireUnionNIfaceX) VDLReflect(__VWireUnionNIfaceReflect) {}

func (x VWireUnionNIfaceX) VDLIsZero() bool {
	return x.Value == ""
}

func (x VWireUnionNIfaceX) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_union_31); err != nil {
		return err
	}
	if err := enc.NextFieldValueString(0, vdl.StringType, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVWireUnionNIface(dec vdl.Decoder, x *VWireUnionNIface) error {
	if err := dec.StartValue(__VDLType_union_31); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != __VDLType_union_31 {
		name := decType.Field(index).Name
		index = __VDLType_union_31.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	switch index {
	case 0:
		var field VWireUnionNIfaceX
		switch value, err := dec.ReadValueString(); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	}
	switch index, err := dec.NextField(); {
	case err != nil:
		return err
	case index != -1:
		return fmt.Errorf("extra field %d in union %T, from %v", index, x, dec.Type())
	}
	return dec.FinishValue()
}

// VWireAll contains all wire types, which will be represented as native types
// in the generated code.
type VWireAll struct {
	BoolNBool      VNativeWireBoolNBool
	BoolNString    VNativeWireBoolNString
	BoolNStruct    VNativeWireBoolNStruct
	IntNInt        VNativeWireIntNInt
	IntNString     VNativeWireIntNString
	IntNStruct     VNativeWireIntNStruct
	StringNString  VNativeWireStringNString
	StringNStruct  VNativeWireStringNStruct
	ArrayNString   VNativeWireArrayNString
	ArrayNStruct   VNativeWireArrayNStruct
	ListNString    VNativeWireListNString
	ListNStruct    VNativeWireListNStruct
	StructNString  VNativeWireStructNString
	StructNStruct  VNativeWireStructNStruct
	StructNArray   VNativeWireStructNArray
	StructNSlice   VNativeWireStructNSlice
	StructNPointer VWireStructNPointer
	StructNIface   VWireStructNIface
	UnionNString   VNativeWireUnionNString
	UnionNStruct   VNativeWireUnionNStruct
	UnionNArray    VNativeWireUnionNArray
	UnionNSlice    VNativeWireUnionNSlice
	UnionNPointer  VWireUnionNPointer
	UnionNIface    VWireUnionNIface
}

func (VWireAll) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VWireAll"`
}) {
}

func (x VWireAll) VDLIsZero() bool {
	if x.BoolNBool != false {
		return false
	}
	if x.BoolNString != "" {
		return false
	}
	if x.BoolNStruct != (VNativeWireBoolNStruct{}) {
		return false
	}
	if x.IntNInt != 0 {
		return false
	}
	if x.IntNString != "" {
		return false
	}
	if x.IntNStruct != (VNativeWireIntNStruct{}) {
		return false
	}
	if x.StringNString != "" {
		return false
	}
	if x.StringNStruct != (VNativeWireStringNStruct{}) {
		return false
	}
	if x.ArrayNString != "" {
		return false
	}
	if x.ArrayNStruct != (VNativeWireArrayNStruct{}) {
		return false
	}
	if x.ListNString != "" {
		return false
	}
	if x.ListNStruct != (VNativeWireListNStruct{}) {
		return false
	}
	if x.StructNString != "" {
		return false
	}
	if x.StructNStruct != (VNativeWireStructNStruct{}) {
		return false
	}
	if x.StructNArray != (VNativeWireStructNArray{}) {
		return false
	}
	if !x.StructNSlice.IsZero() {
		return false
	}
	if x.StructNPointer != (VWireStructNPointer{}) {
		return false
	}
	if x.StructNIface != (VWireStructNIface{}) {
		return false
	}
	if x.UnionNString != "" {
		return false
	}
	if x.UnionNStruct != (VNativeWireUnionNStruct{}) {
		return false
	}
	if x.UnionNArray != (VNativeWireUnionNArray{}) {
		return false
	}
	if !x.UnionNSlice.IsZero() {
		return false
	}
	if x.UnionNPointer != nil && !x.UnionNPointer.VDLIsZero() {
		return false
	}
	if x.UnionNIface != nil && !x.UnionNIface.VDLIsZero() {
		return false
	}
	return true
}

func (x VWireAll) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(__VDLType_struct_32); err != nil {
		return err
	}
	if x.BoolNBool != false {
		var wire VWireBoolNBool
		if err := VWireBoolNBoolFromNative(&wire, x.BoolNBool); err != nil {
			return err
		}
		if err := enc.NextFieldValueBool(0, __VDLType_bool_8, bool(wire)); err != nil {
			return err
		}
	}
	if x.BoolNString != "" {
		var wire VWireBoolNString
		if err := VWireBoolNStringFromNative(&wire, x.BoolNString); err != nil {
			return err
		}
		if err := enc.NextFieldValueBool(1, __VDLType_bool_9, bool(wire)); err != nil {
			return err
		}
	}
	if x.BoolNStruct != (VNativeWireBoolNStruct{}) {
		var wire VWireBoolNStruct
		if err := VWireBoolNStructFromNative(&wire, x.BoolNStruct); err != nil {
			return err
		}
		if err := enc.NextFieldValueBool(2, __VDLType_bool_10, bool(wire)); err != nil {
			return err
		}
	}
	if x.IntNInt != 0 {
		var wire VWireIntNInt
		if err := VWireIntNIntFromNative(&wire, x.IntNInt); err != nil {
			return err
		}
		if err := enc.NextFieldValueInt(3, __VDLType_int32_11, int64(wire)); err != nil {
			return err
		}
	}
	if x.IntNString != "" {
		var wire VWireIntNString
		if err := VWireIntNStringFromNative(&wire, x.IntNString); err != nil {
			return err
		}
		if err := enc.NextFieldValueInt(4, __VDLType_int32_12, int64(wire)); err != nil {
			return err
		}
	}
	if x.IntNStruct != (VNativeWireIntNStruct{}) {
		var wire VWireIntNStruct
		if err := VWireIntNStructFromNative(&wire, x.IntNStruct); err != nil {
			return err
		}
		if err := enc.NextFieldValueInt(5, __VDLType_int32_13, int64(wire)); err != nil {
			return err
		}
	}
	if x.StringNString != "" {
		var wire VWireStringNString
		if err := VWireStringNStringFromNative(&wire, x.StringNString); err != nil {
			return err
		}
		if err := enc.NextFieldValueString(6, __VDLType_string_14, string(wire)); err != nil {
			return err
		}
	}
	if x.StringNStruct != (VNativeWireStringNStruct{}) {
		var wire VWireStringNStruct
		if err := VWireStringNStructFromNative(&wire, x.StringNStruct); err != nil {
			return err
		}
		if err := enc.NextFieldValueString(7, __VDLType_string_15, string(wire)); err != nil {
			return err
		}
	}
	if x.ArrayNString != "" {
		if err := enc.NextField(8); err != nil {
			return err
		}
		var wire VWireArrayNString
		if err := VWireArrayNStringFromNative(&wire, x.ArrayNString); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.ArrayNStruct != (VNativeWireArrayNStruct{}) {
		if err := enc.NextField(9); err != nil {
			return err
		}
		var wire VWireArrayNStruct
		if err := VWireArrayNStructFromNative(&wire, x.ArrayNStruct); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.ListNString != "" {
		if err := enc.NextField(10); err != nil {
			return err
		}
		var wire VWireListNString
		if err := VWireListNStringFromNative(&wire, x.ListNString); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.ListNStruct != (VNativeWireListNStruct{}) {
		if err := enc.NextField(11); err != nil {
			return err
		}
		var wire VWireListNStruct
		if err := VWireListNStructFromNative(&wire, x.ListNStruct); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.StructNString != "" {
		if err := enc.NextField(12); err != nil {
			return err
		}
		var wire VWireStructNString
		if err := VWireStructNStringFromNative(&wire, x.StructNString); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.StructNStruct != (VNativeWireStructNStruct{}) {
		if err := enc.NextField(13); err != nil {
			return err
		}
		var wire VWireStructNStruct
		if err := VWireStructNStructFromNative(&wire, x.StructNStruct); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.StructNArray != (VNativeWireStructNArray{}) {
		if err := enc.NextField(14); err != nil {
			return err
		}
		var wire VWireStructNArray
		if err := VWireStructNArrayFromNative(&wire, x.StructNArray); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if !x.StructNSlice.IsZero() {
		if err := enc.NextField(15); err != nil {
			return err
		}
		var wire VWireStructNSlice
		if err := VWireStructNSliceFromNative(&wire, x.StructNSlice); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.StructNPointer != (VWireStructNPointer{}) {
		if err := enc.NextField(16); err != nil {
			return err
		}
		if err := x.StructNPointer.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.StructNIface != (VWireStructNIface{}) {
		if err := enc.NextField(17); err != nil {
			return err
		}
		if err := x.StructNIface.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.UnionNString != "" {
		if err := enc.NextField(18); err != nil {
			return err
		}
		var wire VWireUnionNString
		if err := VWireUnionNStringFromNative(&wire, x.UnionNString); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.UnionNStruct != (VNativeWireUnionNStruct{}) {
		if err := enc.NextField(19); err != nil {
			return err
		}
		var wire VWireUnionNStruct
		if err := VWireUnionNStructFromNative(&wire, x.UnionNStruct); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.UnionNArray != (VNativeWireUnionNArray{}) {
		if err := enc.NextField(20); err != nil {
			return err
		}
		var wire VWireUnionNArray
		if err := VWireUnionNArrayFromNative(&wire, x.UnionNArray); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if !x.UnionNSlice.IsZero() {
		if err := enc.NextField(21); err != nil {
			return err
		}
		var wire VWireUnionNSlice
		if err := VWireUnionNSliceFromNative(&wire, x.UnionNSlice); err != nil {
			return err
		}
		if err := wire.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.UnionNPointer != nil && !x.UnionNPointer.VDLIsZero() {
		if err := enc.NextField(22); err != nil {
			return err
		}
		if err := x.UnionNPointer.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.UnionNIface != nil && !x.UnionNIface.VDLIsZero() {
		if err := enc.NextField(23); err != nil {
			return err
		}
		if err := x.UnionNIface.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VWireAll) VDLRead(dec vdl.Decoder) error {
	*x = VWireAll{
		UnionNPointer: VWireUnionNPointerX{},
		UnionNIface:   VWireUnionNIfaceX{},
	}
	if err := dec.StartValue(__VDLType_struct_32); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != __VDLType_struct_32 {
			index = __VDLType_struct_32.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		switch index {
		case 0:
			var wire VWireBoolNBool
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireBoolNBoolToNative(wire, &x.BoolNBool); err != nil {
				return err
			}
		case 1:
			var wire VWireBoolNString
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireBoolNStringToNative(wire, &x.BoolNString); err != nil {
				return err
			}
		case 2:
			var wire VWireBoolNStruct
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireBoolNStructToNative(wire, &x.BoolNStruct); err != nil {
				return err
			}
		case 3:
			var wire VWireIntNInt
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireIntNIntToNative(wire, &x.IntNInt); err != nil {
				return err
			}
		case 4:
			var wire VWireIntNString
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireIntNStringToNative(wire, &x.IntNString); err != nil {
				return err
			}
		case 5:
			var wire VWireIntNStruct
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireIntNStructToNative(wire, &x.IntNStruct); err != nil {
				return err
			}
		case 6:
			var wire VWireStringNString
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireStringNStringToNative(wire, &x.StringNString); err != nil {
				return err
			}
		case 7:
			var wire VWireStringNStruct
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireStringNStructToNative(wire, &x.StringNStruct); err != nil {
				return err
			}
		case 8:
			var wire VWireArrayNString
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireArrayNStringToNative(wire, &x.ArrayNString); err != nil {
				return err
			}
		case 9:
			var wire VWireArrayNStruct
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireArrayNStructToNative(wire, &x.ArrayNStruct); err != nil {
				return err
			}
		case 10:
			var wire VWireListNString
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireListNStringToNative(wire, &x.ListNString); err != nil {
				return err
			}
		case 11:
			var wire VWireListNStruct
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireListNStructToNative(wire, &x.ListNStruct); err != nil {
				return err
			}
		case 12:
			var wire VWireStructNString
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireStructNStringToNative(wire, &x.StructNString); err != nil {
				return err
			}
		case 13:
			var wire VWireStructNStruct
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireStructNStructToNative(wire, &x.StructNStruct); err != nil {
				return err
			}
		case 14:
			var wire VWireStructNArray
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireStructNArrayToNative(wire, &x.StructNArray); err != nil {
				return err
			}
		case 15:
			var wire VWireStructNSlice
			if err := wire.VDLRead(dec); err != nil {
				return err
			}
			if err := VWireStructNSliceToNative(wire, &x.StructNSlice); err != nil {
				return err
			}
		case 16:
			if err := x.StructNPointer.VDLRead(dec); err != nil {
				return err
			}
		case 17:
			if err := x.StructNIface.VDLRead(dec); err != nil {
				return err
			}
		case 18:
			var wire VWireUnionNString
			if err := VDLReadVWireUnionNString(dec, &wire); err != nil {
				return err
			}
			if err := VWireUnionNStringToNative(wire, &x.UnionNString); err != nil {
				return err
			}
		case 19:
			var wire VWireUnionNStruct
			if err := VDLReadVWireUnionNStruct(dec, &wire); err != nil {
				return err
			}
			if err := VWireUnionNStructToNative(wire, &x.UnionNStruct); err != nil {
				return err
			}
		case 20:
			var wire VWireUnionNArray
			if err := VDLReadVWireUnionNArray(dec, &wire); err != nil {
				return err
			}
			if err := VWireUnionNArrayToNative(wire, &x.UnionNArray); err != nil {
				return err
			}
		case 21:
			var wire VWireUnionNSlice
			if err := VDLReadVWireUnionNSlice(dec, &wire); err != nil {
				return err
			}
			if err := VWireUnionNSliceToNative(wire, &x.UnionNSlice); err != nil {
				return err
			}
		case 22:
			if err := VDLReadVWireUnionNPointer(dec, &x.UnionNPointer); err != nil {
				return err
			}
		case 23:
			if err := VDLReadVWireUnionNIface(dec, &x.UnionNIface); err != nil {
				return err
			}
		}
	}
}

// XSelfCycle tests self-cyclic types.
type XSelfCycle struct {
	Data int64
	Next *XSelfCycle
}

func (XSelfCycle) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.XSelfCycle"`
}) {
}

// XMutualCycleB tests mutually cyclic types A and B.
type XMutualCycleB struct {
	Data int64
	A    *XMutualCycleA
}

func (XMutualCycleB) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.XMutualCycleB"`
}) {
}

// XMutualCycleA tests mutually cyclic types A and B.
type XMutualCycleA struct {
	Data int64
	B    *XMutualCycleB
}

func (XMutualCycleA) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.XMutualCycleA"`
}) {
}

// Type-check native conversion functions.
var (
	_ func(VWireArrayNString, *VNativeWireArrayNString) error   = VWireArrayNStringToNative
	_ func(*VWireArrayNString, VNativeWireArrayNString) error   = VWireArrayNStringFromNative
	_ func(VWireArrayNStruct, *VNativeWireArrayNStruct) error   = VWireArrayNStructToNative
	_ func(*VWireArrayNStruct, VNativeWireArrayNStruct) error   = VWireArrayNStructFromNative
	_ func(VWireBoolNBool, *VNativeWireBoolNBool) error         = VWireBoolNBoolToNative
	_ func(*VWireBoolNBool, VNativeWireBoolNBool) error         = VWireBoolNBoolFromNative
	_ func(VWireBoolNString, *VNativeWireBoolNString) error     = VWireBoolNStringToNative
	_ func(*VWireBoolNString, VNativeWireBoolNString) error     = VWireBoolNStringFromNative
	_ func(VWireBoolNStruct, *VNativeWireBoolNStruct) error     = VWireBoolNStructToNative
	_ func(*VWireBoolNStruct, VNativeWireBoolNStruct) error     = VWireBoolNStructFromNative
	_ func(VWireIntNInt, *VNativeWireIntNInt) error             = VWireIntNIntToNative
	_ func(*VWireIntNInt, VNativeWireIntNInt) error             = VWireIntNIntFromNative
	_ func(VWireIntNString, *VNativeWireIntNString) error       = VWireIntNStringToNative
	_ func(*VWireIntNString, VNativeWireIntNString) error       = VWireIntNStringFromNative
	_ func(VWireIntNStruct, *VNativeWireIntNStruct) error       = VWireIntNStructToNative
	_ func(*VWireIntNStruct, VNativeWireIntNStruct) error       = VWireIntNStructFromNative
	_ func(VWireListNString, *VNativeWireListNString) error     = VWireListNStringToNative
	_ func(*VWireListNString, VNativeWireListNString) error     = VWireListNStringFromNative
	_ func(VWireListNStruct, *VNativeWireListNStruct) error     = VWireListNStructToNative
	_ func(*VWireListNStruct, VNativeWireListNStruct) error     = VWireListNStructFromNative
	_ func(VWireStringNString, *VNativeWireStringNString) error = VWireStringNStringToNative
	_ func(*VWireStringNString, VNativeWireStringNString) error = VWireStringNStringFromNative
	_ func(VWireStringNStruct, *VNativeWireStringNStruct) error = VWireStringNStructToNative
	_ func(*VWireStringNStruct, VNativeWireStringNStruct) error = VWireStringNStructFromNative
	_ func(VWireStructNArray, *VNativeWireStructNArray) error   = VWireStructNArrayToNative
	_ func(*VWireStructNArray, VNativeWireStructNArray) error   = VWireStructNArrayFromNative
	_ func(VWireStructNSlice, *VNativeWireStructNSlice) error   = VWireStructNSliceToNative
	_ func(*VWireStructNSlice, VNativeWireStructNSlice) error   = VWireStructNSliceFromNative
	_ func(VWireStructNString, *VNativeWireStructNString) error = VWireStructNStringToNative
	_ func(*VWireStructNString, VNativeWireStructNString) error = VWireStructNStringFromNative
	_ func(VWireStructNStruct, *VNativeWireStructNStruct) error = VWireStructNStructToNative
	_ func(*VWireStructNStruct, VNativeWireStructNStruct) error = VWireStructNStructFromNative
	_ func(VWireUnionNArray, *VNativeWireUnionNArray) error     = VWireUnionNArrayToNative
	_ func(*VWireUnionNArray, VNativeWireUnionNArray) error     = VWireUnionNArrayFromNative
	_ func(VWireUnionNSlice, *VNativeWireUnionNSlice) error     = VWireUnionNSliceToNative
	_ func(*VWireUnionNSlice, VNativeWireUnionNSlice) error     = VWireUnionNSliceFromNative
	_ func(VWireUnionNString, *VNativeWireUnionNString) error   = VWireUnionNStringToNative
	_ func(*VWireUnionNString, VNativeWireUnionNString) error   = VWireUnionNStringFromNative
	_ func(VWireUnionNStruct, *VNativeWireUnionNStruct) error   = VWireUnionNStructToNative
	_ func(*VWireUnionNStruct, VNativeWireUnionNStruct) error   = VWireUnionNStructFromNative
)

// Hold type definitions in package-level variables, for better performance.
var (
	__VDLType_struct_1   *vdl.Type
	__VDLType_struct_2   *vdl.Type
	__VDLType_optional_3 *vdl.Type
	__VDLType_struct_4   *vdl.Type
	__VDLType_optional_5 *vdl.Type
	__VDLType_struct_6   *vdl.Type
	__VDLType_optional_7 *vdl.Type
	__VDLType_bool_8     *vdl.Type
	__VDLType_bool_9     *vdl.Type
	__VDLType_bool_10    *vdl.Type
	__VDLType_int32_11   *vdl.Type
	__VDLType_int32_12   *vdl.Type
	__VDLType_int32_13   *vdl.Type
	__VDLType_string_14  *vdl.Type
	__VDLType_string_15  *vdl.Type
	__VDLType_array_16   *vdl.Type
	__VDLType_array_17   *vdl.Type
	__VDLType_list_18    *vdl.Type
	__VDLType_list_19    *vdl.Type
	__VDLType_struct_20  *vdl.Type
	__VDLType_struct_21  *vdl.Type
	__VDLType_struct_22  *vdl.Type
	__VDLType_struct_23  *vdl.Type
	__VDLType_struct_24  *vdl.Type
	__VDLType_struct_25  *vdl.Type
	__VDLType_union_26   *vdl.Type
	__VDLType_union_27   *vdl.Type
	__VDLType_union_28   *vdl.Type
	__VDLType_union_29   *vdl.Type
	__VDLType_union_30   *vdl.Type
	__VDLType_union_31   *vdl.Type
	__VDLType_struct_32  *vdl.Type
)

var __VDLInitCalled bool

// __VDLInit performs vdl initialization.  It is safe to call multiple times.
// If you have an init ordering issue, just insert the following line verbatim
// into your source files in this package, right after the "package foo" clause:
//
//    var _ = __VDLInit()
//
// The purpose of this function is to ensure that vdl initialization occurs in
// the right order, and very early in the init sequence.  In particular, vdl
// registration and package variable initialization needs to occur before
// functions like vdl.TypeOf will work properly.
//
// This function returns a dummy value, so that it can be used to initialize the
// first var in the file, to take advantage of Go's defined init order.
func __VDLInit() struct{} {
	if __VDLInitCalled {
		return struct{}{}
	}
	__VDLInitCalled = true

	// Register native type conversions first, so that vdl.TypeOf works.
	vdl.RegisterNative(VWireArrayNStringToNative, VWireArrayNStringFromNative)
	vdl.RegisterNative(VWireArrayNStructToNative, VWireArrayNStructFromNative)
	vdl.RegisterNative(VWireBoolNBoolToNative, VWireBoolNBoolFromNative)
	vdl.RegisterNative(VWireBoolNStringToNative, VWireBoolNStringFromNative)
	vdl.RegisterNative(VWireBoolNStructToNative, VWireBoolNStructFromNative)
	vdl.RegisterNative(VWireIntNIntToNative, VWireIntNIntFromNative)
	vdl.RegisterNative(VWireIntNStringToNative, VWireIntNStringFromNative)
	vdl.RegisterNative(VWireIntNStructToNative, VWireIntNStructFromNative)
	vdl.RegisterNative(VWireListNStringToNative, VWireListNStringFromNative)
	vdl.RegisterNative(VWireListNStructToNative, VWireListNStructFromNative)
	vdl.RegisterNative(VWireStringNStringToNative, VWireStringNStringFromNative)
	vdl.RegisterNative(VWireStringNStructToNative, VWireStringNStructFromNative)
	vdl.RegisterNative(VWireStructNArrayToNative, VWireStructNArrayFromNative)
	vdl.RegisterNative(VWireStructNSliceToNative, VWireStructNSliceFromNative)
	vdl.RegisterNative(VWireStructNStringToNative, VWireStructNStringFromNative)
	vdl.RegisterNative(VWireStructNStructToNative, VWireStructNStructFromNative)
	vdl.RegisterNative(VWireUnionNArrayToNative, VWireUnionNArrayFromNative)
	vdl.RegisterNative(VWireUnionNSliceToNative, VWireUnionNSliceFromNative)
	vdl.RegisterNative(VWireUnionNStringToNative, VWireUnionNStringFromNative)
	vdl.RegisterNative(VWireUnionNStructToNative, VWireUnionNStructFromNative)

	// Register types.
	vdl.Register((*vdlEntry)(nil))
	vdl.Register((*VSelfCycle)(nil))
	vdl.Register((*VMutualCycleB)(nil))
	vdl.Register((*VMutualCycleA)(nil))
	vdl.Register((*VWireBoolNBool)(nil))
	vdl.Register((*VWireBoolNString)(nil))
	vdl.Register((*VWireBoolNStruct)(nil))
	vdl.Register((*VWireIntNInt)(nil))
	vdl.Register((*VWireIntNString)(nil))
	vdl.Register((*VWireIntNStruct)(nil))
	vdl.Register((*VWireStringNString)(nil))
	vdl.Register((*VWireStringNStruct)(nil))
	vdl.Register((*VWireArrayNString)(nil))
	vdl.Register((*VWireArrayNStruct)(nil))
	vdl.Register((*VWireListNString)(nil))
	vdl.Register((*VWireListNStruct)(nil))
	vdl.Register((*VWireStructNString)(nil))
	vdl.Register((*VWireStructNStruct)(nil))
	vdl.Register((*VWireStructNArray)(nil))
	vdl.Register((*VWireStructNSlice)(nil))
	vdl.Register((*VWireStructNPointer)(nil))
	vdl.Register((*VWireStructNIface)(nil))
	vdl.Register((*VWireUnionNString)(nil))
	vdl.Register((*VWireUnionNStruct)(nil))
	vdl.Register((*VWireUnionNArray)(nil))
	vdl.Register((*VWireUnionNSlice)(nil))
	vdl.Register((*VWireUnionNPointer)(nil))
	vdl.Register((*VWireUnionNIface)(nil))
	vdl.Register((*VWireAll)(nil))
	vdl.Register((*XSelfCycle)(nil))
	vdl.Register((*XMutualCycleB)(nil))
	vdl.Register((*XMutualCycleA)(nil))

	// Initialize type definitions.
	__VDLType_struct_1 = vdl.TypeOf((*vdlEntry)(nil)).Elem()
	__VDLType_struct_2 = vdl.TypeOf((*VSelfCycle)(nil)).Elem()
	__VDLType_optional_3 = vdl.TypeOf((*VSelfCycle)(nil))
	__VDLType_struct_4 = vdl.TypeOf((*VMutualCycleB)(nil)).Elem()
	__VDLType_optional_5 = vdl.TypeOf((*VMutualCycleA)(nil))
	__VDLType_struct_6 = vdl.TypeOf((*VMutualCycleA)(nil)).Elem()
	__VDLType_optional_7 = vdl.TypeOf((*VMutualCycleB)(nil))
	__VDLType_bool_8 = vdl.TypeOf((*VWireBoolNBool)(nil))
	__VDLType_bool_9 = vdl.TypeOf((*VWireBoolNString)(nil))
	__VDLType_bool_10 = vdl.TypeOf((*VWireBoolNStruct)(nil))
	__VDLType_int32_11 = vdl.TypeOf((*VWireIntNInt)(nil))
	__VDLType_int32_12 = vdl.TypeOf((*VWireIntNString)(nil))
	__VDLType_int32_13 = vdl.TypeOf((*VWireIntNStruct)(nil))
	__VDLType_string_14 = vdl.TypeOf((*VWireStringNString)(nil))
	__VDLType_string_15 = vdl.TypeOf((*VWireStringNStruct)(nil))
	__VDLType_array_16 = vdl.TypeOf((*VWireArrayNString)(nil))
	__VDLType_array_17 = vdl.TypeOf((*VWireArrayNStruct)(nil))
	__VDLType_list_18 = vdl.TypeOf((*VWireListNString)(nil))
	__VDLType_list_19 = vdl.TypeOf((*VWireListNStruct)(nil))
	__VDLType_struct_20 = vdl.TypeOf((*VWireStructNString)(nil)).Elem()
	__VDLType_struct_21 = vdl.TypeOf((*VWireStructNStruct)(nil)).Elem()
	__VDLType_struct_22 = vdl.TypeOf((*VWireStructNArray)(nil)).Elem()
	__VDLType_struct_23 = vdl.TypeOf((*VWireStructNSlice)(nil)).Elem()
	__VDLType_struct_24 = vdl.TypeOf((*VWireStructNPointer)(nil)).Elem()
	__VDLType_struct_25 = vdl.TypeOf((*VWireStructNIface)(nil)).Elem()
	__VDLType_union_26 = vdl.TypeOf((*VWireUnionNString)(nil))
	__VDLType_union_27 = vdl.TypeOf((*VWireUnionNStruct)(nil))
	__VDLType_union_28 = vdl.TypeOf((*VWireUnionNArray)(nil))
	__VDLType_union_29 = vdl.TypeOf((*VWireUnionNSlice)(nil))
	__VDLType_union_30 = vdl.TypeOf((*VWireUnionNPointer)(nil))
	__VDLType_union_31 = vdl.TypeOf((*VWireUnionNIface)(nil))
	__VDLType_struct_32 = vdl.TypeOf((*VWireAll)(nil)).Elem()

	return struct{}{}
}

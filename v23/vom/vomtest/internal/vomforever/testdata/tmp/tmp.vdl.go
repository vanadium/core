// This file was auto-generated by the vanadium vdl tool.
// Package: tmp

//nolint:revive
package tmp

import (
	"fmt"
	"reflect"

	"v.io/v23/vdl"
	"v.io/v23/verror"
	"v.io/v23/vom"
)

var initializeVDLCalled = false
var _ = initializeVDL() // Must be first; see initializeVDL comments for details.

// Hold type definitions in package-level variables, for better performance.
// Declare and initialize with default values here so that the initializeVDL
// method will be considered ready to initialize before any of the type
// definitions that appear below.
//
//nolint:unused
var (
	vdlTypeBool1      *vdl.Type = nil
	vdlTypeString2    *vdl.Type = nil
	vdlTypeByte3      *vdl.Type = nil
	vdlTypeEnum4      *vdl.Type = nil
	vdlTypeEnum5      *vdl.Type = nil
	vdlTypeStruct6    *vdl.Type = nil
	vdlTypeStruct7    *vdl.Type = nil
	vdlTypeUint168    *vdl.Type = nil
	vdlTypeUint329    *vdl.Type = nil
	vdlTypeUint6410   *vdl.Type = nil
	vdlTypeInt811     *vdl.Type = nil
	vdlTypeInt1612    *vdl.Type = nil
	vdlTypeInt3213    *vdl.Type = nil
	vdlTypeInt6414    *vdl.Type = nil
	vdlTypeFloat3215  *vdl.Type = nil
	vdlTypeFloat6416  *vdl.Type = nil
	vdlTypeArray17    *vdl.Type = nil
	vdlTypeArray18    *vdl.Type = nil
	vdlTypeArray19    *vdl.Type = nil
	vdlTypeArray20    *vdl.Type = nil
	vdlTypeArray21    *vdl.Type = nil
	vdlTypeArray22    *vdl.Type = nil
	vdlTypeArray23    *vdl.Type = nil
	vdlTypeArray24    *vdl.Type = nil
	vdlTypeArray25    *vdl.Type = nil
	vdlTypeArray26    *vdl.Type = nil
	vdlTypeArray27    *vdl.Type = nil
	vdlTypeArray28    *vdl.Type = nil
	vdlTypeArray29    *vdl.Type = nil
	vdlTypeArray30    *vdl.Type = nil
	vdlTypeArray31    *vdl.Type = nil
	vdlTypeArray32    *vdl.Type = nil
	vdlTypeArray33    *vdl.Type = nil
	vdlTypeOptional34 *vdl.Type = nil
	vdlTypeArray35    *vdl.Type = nil
	vdlTypeOptional36 *vdl.Type = nil
	vdlTypeList37     *vdl.Type = nil
	vdlTypeList38     *vdl.Type = nil
	vdlTypeList39     *vdl.Type = nil
	vdlTypeList40     *vdl.Type = nil
	vdlTypeList41     *vdl.Type = nil
	vdlTypeList42     *vdl.Type = nil
	vdlTypeList43     *vdl.Type = nil
	vdlTypeList44     *vdl.Type = nil
	vdlTypeList45     *vdl.Type = nil
	vdlTypeList46     *vdl.Type = nil
	vdlTypeList47     *vdl.Type = nil
	vdlTypeList48     *vdl.Type = nil
	vdlTypeList49     *vdl.Type = nil
	vdlTypeList50     *vdl.Type = nil
	vdlTypeList51     *vdl.Type = nil
	vdlTypeList52     *vdl.Type = nil
	vdlTypeList53     *vdl.Type = nil
	vdlTypeList54     *vdl.Type = nil
	vdlTypeSet55      *vdl.Type = nil
	vdlTypeSet56      *vdl.Type = nil
	vdlTypeSet57      *vdl.Type = nil
	vdlTypeSet58      *vdl.Type = nil
	vdlTypeSet59      *vdl.Type = nil
	vdlTypeSet60      *vdl.Type = nil
	vdlTypeSet61      *vdl.Type = nil
	vdlTypeSet62      *vdl.Type = nil
	vdlTypeSet63      *vdl.Type = nil
	vdlTypeSet64      *vdl.Type = nil
	vdlTypeSet65      *vdl.Type = nil
	vdlTypeSet66      *vdl.Type = nil
	vdlTypeSet67      *vdl.Type = nil
	vdlTypeMap68      *vdl.Type = nil
	vdlTypeMap69      *vdl.Type = nil
	vdlTypeMap70      *vdl.Type = nil
	vdlTypeMap71      *vdl.Type = nil
	vdlTypeMap72      *vdl.Type = nil
	vdlTypeMap73      *vdl.Type = nil
	vdlTypeMap74      *vdl.Type = nil
	vdlTypeMap75      *vdl.Type = nil
	vdlTypeMap76      *vdl.Type = nil
	vdlTypeMap77      *vdl.Type = nil
	vdlTypeMap78      *vdl.Type = nil
	vdlTypeMap79      *vdl.Type = nil
	vdlTypeMap80      *vdl.Type = nil
	vdlTypeStruct81   *vdl.Type = nil
	vdlTypeStruct82   *vdl.Type = nil
	vdlTypeStruct83   *vdl.Type = nil
	vdlTypeStruct84   *vdl.Type = nil
	vdlTypeStruct85   *vdl.Type = nil
	vdlTypeStruct86   *vdl.Type = nil
	vdlTypeStruct87   *vdl.Type = nil
	vdlTypeStruct88   *vdl.Type = nil
	vdlTypeStruct89   *vdl.Type = nil
	vdlTypeStruct90   *vdl.Type = nil
	vdlTypeStruct91   *vdl.Type = nil
	vdlTypeStruct92   *vdl.Type = nil
	vdlTypeStruct93   *vdl.Type = nil
	vdlTypeStruct94   *vdl.Type = nil
	vdlTypeStruct95   *vdl.Type = nil
	vdlTypeStruct96   *vdl.Type = nil
	vdlTypeStruct97   *vdl.Type = nil
	vdlTypeStruct98   *vdl.Type = nil
	vdlTypeStruct99   *vdl.Type = nil
	vdlTypeStruct100  *vdl.Type = nil
	vdlTypeStruct101  *vdl.Type = nil
	vdlTypeStruct102  *vdl.Type = nil
	vdlTypeStruct103  *vdl.Type = nil
	vdlTypeStruct104  *vdl.Type = nil
	vdlTypeStruct105  *vdl.Type = nil
	vdlTypeStruct106  *vdl.Type = nil
	vdlTypeStruct107  *vdl.Type = nil
	vdlTypeStruct108  *vdl.Type = nil
	vdlTypeStruct109  *vdl.Type = nil
	vdlTypeStruct110  *vdl.Type = nil
	vdlTypeStruct111  *vdl.Type = nil
	vdlTypeStruct112  *vdl.Type = nil
	vdlTypeStruct113  *vdl.Type = nil
	vdlTypeStruct114  *vdl.Type = nil
	vdlTypeUnion115   *vdl.Type = nil
	vdlTypeUnion116   *vdl.Type = nil
	vdlTypeUnion117   *vdl.Type = nil
	vdlTypeUnion118   *vdl.Type = nil
	vdlTypeUnion119   *vdl.Type = nil
	vdlTypeUnion120   *vdl.Type = nil
	vdlTypeUnion121   *vdl.Type = nil
	vdlTypeUnion122   *vdl.Type = nil
	vdlTypeUnion123   *vdl.Type = nil
	vdlTypeUnion124   *vdl.Type = nil
	vdlTypeUnion125   *vdl.Type = nil
	vdlTypeUnion126   *vdl.Type = nil
	vdlTypeUnion127   *vdl.Type = nil
	vdlTypeUnion128   *vdl.Type = nil
	vdlTypeUnion129   *vdl.Type = nil
	vdlTypeUnion130   *vdl.Type = nil
	vdlTypeUnion131   *vdl.Type = nil
	vdlTypeUnion132   *vdl.Type = nil
	vdlTypeUnion133   *vdl.Type = nil
	vdlTypeUnion134   *vdl.Type = nil
	vdlTypeUnion135   *vdl.Type = nil
	vdlTypeUnion136   *vdl.Type = nil
	vdlTypeUnion137   *vdl.Type = nil
	vdlTypeUnion138   *vdl.Type = nil
	vdlTypeUnion139   *vdl.Type = nil
	vdlTypeUnion140   *vdl.Type = nil
	vdlTypeUnion141   *vdl.Type = nil
	vdlTypeUnion142   *vdl.Type = nil
	vdlTypeUnion143   *vdl.Type = nil
	vdlTypeUnion144   *vdl.Type = nil
	vdlTypeUnion145   *vdl.Type = nil
	vdlTypeUnion146   *vdl.Type = nil
	vdlTypeUnion147   *vdl.Type = nil
	vdlTypeUnion148   *vdl.Type = nil
	vdlTypeSet149     *vdl.Type = nil
)

// Type definitions
// ================
type VBool bool

func (VBool) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VBool"`
}) {
}

func (x VBool) VDLIsZero() bool { //nolint:gocyclo
	return bool(!x)
}

func (x VBool) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueBool(vdlTypeBool1, bool(x)); err != nil {
		return err
	}
	return nil
}

func (x *VBool) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	switch value, err := dec.ReadValueBool(); {
	case err != nil:
		return err
	default:
		*x = VBool(value)
	}
	return nil
}

type VString string

func (VString) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VString"`
}) {
}

func (x VString) VDLIsZero() bool { //nolint:gocyclo
	return x == ""
}

func (x VString) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueString(vdlTypeString2, string(x)); err != nil {
		return err
	}
	return nil
}

func (x *VString) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	switch value, err := dec.ReadValueString(); {
	case err != nil:
		return err
	default:
		*x = VString(value)
	}
	return nil
}

type VByte byte

func (VByte) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VByte"`
}) {
}

func (x VByte) VDLIsZero() bool { //nolint:gocyclo
	return x == 0
}

func (x VByte) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueUint(vdlTypeByte3, uint64(x)); err != nil {
		return err
	}
	return nil
}

func (x *VByte) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	switch value, err := dec.ReadValueUint(8); {
	case err != nil:
		return err
	default:
		*x = VByte(value)
	}
	return nil
}

type VEnumAbc int

const (
	VEnumAbcA VEnumAbc = iota
	VEnumAbcB
	VEnumAbcC
)

// VEnumAbcAll holds all labels for VEnumAbc.
var VEnumAbcAll = [...]VEnumAbc{VEnumAbcA, VEnumAbcB, VEnumAbcC}

// VEnumAbcFromString creates a VEnumAbc from a string label.
//
//nolint:unused
func VEnumAbcFromString(label string) (x VEnumAbc, err error) {
	err = x.Set(label)
	return
}

// Set assigns label to x.
func (x *VEnumAbc) Set(label string) error {
	switch label {
	case "A", "a":
		*x = VEnumAbcA
		return nil
	case "B", "b":
		*x = VEnumAbcB
		return nil
	case "C", "c":
		*x = VEnumAbcC
		return nil
	}
	*x = -1
	return fmt.Errorf("unknown label %q in tmp.VEnumAbc", label)
}

// String returns the string label of x.
func (x VEnumAbc) String() string {
	switch x {
	case VEnumAbcA:
		return "A"
	case VEnumAbcB:
		return "B"
	case VEnumAbcC:
		return "C"
	}
	return ""
}

func (VEnumAbc) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VEnumAbc"`
	Enum struct{ A, B, C string }
}) {
}

func (x VEnumAbc) VDLIsZero() bool { //nolint:gocyclo
	return x == VEnumAbcA
}

func (x VEnumAbc) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueString(vdlTypeEnum4, x.String()); err != nil {
		return err
	}
	return nil
}

func (x *VEnumAbc) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	switch value, err := dec.ReadValueString(); {
	case err != nil:
		return err
	default:
		if err := x.Set(value); err != nil {
			return err
		}
	}
	return nil
}

type VEnumBcd int

const (
	VEnumBcdB VEnumBcd = iota
	VEnumBcdC
	VEnumBcdD
)

// VEnumBcdAll holds all labels for VEnumBcd.
var VEnumBcdAll = [...]VEnumBcd{VEnumBcdB, VEnumBcdC, VEnumBcdD}

// VEnumBcdFromString creates a VEnumBcd from a string label.
//
//nolint:unused
func VEnumBcdFromString(label string) (x VEnumBcd, err error) {
	err = x.Set(label)
	return
}

// Set assigns label to x.
func (x *VEnumBcd) Set(label string) error {
	switch label {
	case "B", "b":
		*x = VEnumBcdB
		return nil
	case "C", "c":
		*x = VEnumBcdC
		return nil
	case "D", "d":
		*x = VEnumBcdD
		return nil
	}
	*x = -1
	return fmt.Errorf("unknown label %q in tmp.VEnumBcd", label)
}

// String returns the string label of x.
func (x VEnumBcd) String() string {
	switch x {
	case VEnumBcdB:
		return "B"
	case VEnumBcdC:
		return "C"
	case VEnumBcdD:
		return "D"
	}
	return ""
}

func (VEnumBcd) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VEnumBcd"`
	Enum struct{ B, C, D string }
}) {
}

func (x VEnumBcd) VDLIsZero() bool { //nolint:gocyclo
	return x == VEnumBcdB
}

func (x VEnumBcd) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueString(vdlTypeEnum5, x.String()); err != nil {
		return err
	}
	return nil
}

func (x *VEnumBcd) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	switch value, err := dec.ReadValueString(); {
	case err != nil:
		return err
	default:
		if err := x.Set(value); err != nil {
			return err
		}
	}
	return nil
}

type VStructEmpty struct {
}

func (VStructEmpty) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructEmpty"`
}) {
}

func (x VStructEmpty) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructEmpty{}
}

func (x VStructEmpty) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct6); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructEmpty) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructEmpty{}
	if err := dec.StartValue(vdlTypeStruct6); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct6 {
			index = vdlTypeStruct6.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		switch index {
		}
	}
}

type VNamedError struct {
	Id  string
	Msg string
}

func (VNamedError) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VNamedError"`
}) {
}

func (x VNamedError) VDLIsZero() bool { //nolint:gocyclo
	return x == VNamedError{}
}

func (x VNamedError) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct7); err != nil {
		return err
	}
	if x.Id != "" {
		if err := enc.NextFieldValueString(0, vdl.StringType, x.Id); err != nil {
			return err
		}
	}
	if x.Msg != "" {
		if err := enc.NextFieldValueString(1, vdl.StringType, x.Msg); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VNamedError) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VNamedError{}
	if err := dec.StartValue(vdlTypeStruct7); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct7 {
			index = vdlTypeStruct7.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		switch index {
		case 0:
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				x.Id = value
			}
		case 1:
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				x.Msg = value
			}
		}
	}
}

type VUint16 uint16

func (VUint16) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUint16"`
}) {
}

func (x VUint16) VDLIsZero() bool { //nolint:gocyclo
	return x == 0
}

func (x VUint16) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueUint(vdlTypeUint168, uint64(x)); err != nil {
		return err
	}
	return nil
}

func (x *VUint16) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	switch value, err := dec.ReadValueUint(16); {
	case err != nil:
		return err
	default:
		*x = VUint16(value)
	}
	return nil
}

type VUint32 uint32

func (VUint32) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUint32"`
}) {
}

func (x VUint32) VDLIsZero() bool { //nolint:gocyclo
	return x == 0
}

func (x VUint32) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueUint(vdlTypeUint329, uint64(x)); err != nil {
		return err
	}
	return nil
}

func (x *VUint32) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	switch value, err := dec.ReadValueUint(32); {
	case err != nil:
		return err
	default:
		*x = VUint32(value)
	}
	return nil
}

type VUint64 uint64

func (VUint64) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUint64"`
}) {
}

func (x VUint64) VDLIsZero() bool { //nolint:gocyclo
	return x == 0
}

func (x VUint64) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueUint(vdlTypeUint6410, uint64(x)); err != nil {
		return err
	}
	return nil
}

func (x *VUint64) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	switch value, err := dec.ReadValueUint(64); {
	case err != nil:
		return err
	default:
		*x = VUint64(value)
	}
	return nil
}

type VInt8 int8

func (VInt8) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VInt8"`
}) {
}

func (x VInt8) VDLIsZero() bool { //nolint:gocyclo
	return x == 0
}

func (x VInt8) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueInt(vdlTypeInt811, int64(x)); err != nil {
		return err
	}
	return nil
}

func (x *VInt8) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	switch value, err := dec.ReadValueInt(8); {
	case err != nil:
		return err
	default:
		*x = VInt8(value)
	}
	return nil
}

type VInt16 int16

func (VInt16) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VInt16"`
}) {
}

func (x VInt16) VDLIsZero() bool { //nolint:gocyclo
	return x == 0
}

func (x VInt16) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueInt(vdlTypeInt1612, int64(x)); err != nil {
		return err
	}
	return nil
}

func (x *VInt16) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	switch value, err := dec.ReadValueInt(16); {
	case err != nil:
		return err
	default:
		*x = VInt16(value)
	}
	return nil
}

type VInt32 int32

func (VInt32) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VInt32"`
}) {
}

func (x VInt32) VDLIsZero() bool { //nolint:gocyclo
	return x == 0
}

func (x VInt32) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueInt(vdlTypeInt3213, int64(x)); err != nil {
		return err
	}
	return nil
}

func (x *VInt32) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	switch value, err := dec.ReadValueInt(32); {
	case err != nil:
		return err
	default:
		*x = VInt32(value)
	}
	return nil
}

type VInt64 int64

func (VInt64) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VInt64"`
}) {
}

func (x VInt64) VDLIsZero() bool { //nolint:gocyclo
	return x == 0
}

func (x VInt64) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueInt(vdlTypeInt6414, int64(x)); err != nil {
		return err
	}
	return nil
}

func (x *VInt64) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	switch value, err := dec.ReadValueInt(64); {
	case err != nil:
		return err
	default:
		*x = VInt64(value)
	}
	return nil
}

type VFloat32 float32

func (VFloat32) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VFloat32"`
}) {
}

func (x VFloat32) VDLIsZero() bool { //nolint:gocyclo
	return x == 0
}

func (x VFloat32) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueFloat(vdlTypeFloat3215, float64(x)); err != nil {
		return err
	}
	return nil
}

func (x *VFloat32) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	switch value, err := dec.ReadValueFloat(32); {
	case err != nil:
		return err
	default:
		*x = VFloat32(value)
	}
	return nil
}

type VFloat64 float64

func (VFloat64) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VFloat64"`
}) {
}

func (x VFloat64) VDLIsZero() bool { //nolint:gocyclo
	return x == 0
}

func (x VFloat64) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueFloat(vdlTypeFloat6416, float64(x)); err != nil {
		return err
	}
	return nil
}

func (x *VFloat64) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	switch value, err := dec.ReadValueFloat(64); {
	case err != nil:
		return err
	default:
		*x = VFloat64(value)
	}
	return nil
}

type VArray1_Any [1]*vom.RawBytes

func (VArray1_Any) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray1_Any"`
}) {
}

func (x VArray1_Any) VDLIsZero() bool { //nolint:gocyclo
	for _, elem := range x {
		if elem != nil && !elem.VDLIsZero() {
			return false
		}
	}
	return true
}

func (x VArray1_Any) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray17); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if elem == nil {
			if err := enc.NilValue(vdl.AnyType); err != nil {
				return err
			}
		} else {
			if err := elem.VDLWrite(enc); err != nil {
				return err
			}
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_Any) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray17); err != nil {
		return err
	}
	for index := 0; index < 1; index++ {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 1 %T)", index, *x)
		default:
			x[index] = new(vom.RawBytes)
			if err := x[index].VDLRead(dec); err != nil {
				return err
			}
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 1 %T", *x)
	}
	return dec.FinishValue()
}

type VArray3_Bool [3]bool

func (VArray3_Bool) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray3_Bool"`
}) {
}

func (x VArray3_Bool) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray3_Bool{}
}

func (x VArray3_Bool) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray18); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueBool(vdl.BoolType, elem); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_Bool) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray18); err != nil {
		return err
	}
	for index := 0; index < 3; index++ {
		switch done, elem, err := dec.NextEntryValueBool(); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 3 %T)", index, *x)
		default:
			x[index] = elem
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 3 %T", *x)
	}
	return dec.FinishValue()
}

type VArray3_VBool [3]VBool

func (VArray3_VBool) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray3_VBool"`
}) {
}

func (x VArray3_VBool) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray3_VBool{}
}

func (x VArray3_VBool) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray19); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueBool(vdlTypeBool1, bool(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_VBool) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray19); err != nil {
		return err
	}
	for index := 0; index < 3; index++ {
		switch done, elem, err := dec.NextEntryValueBool(); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 3 %T)", index, *x)
		default:
			x[index] = VBool(elem)
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 3 %T", *x)
	}
	return dec.FinishValue()
}

type VArray1_String [1]string

func (VArray1_String) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray1_String"`
}) {
}

func (x VArray1_String) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray1_String{}
}

func (x VArray1_String) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray20); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueString(vdl.StringType, elem); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_String) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray20); err != nil {
		return err
	}
	for index := 0; index < 1; index++ {
		switch done, elem, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 1 %T)", index, *x)
		default:
			x[index] = elem
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 1 %T", *x)
	}
	return dec.FinishValue()
}

type VArray3_VString [3]VString

func (VArray3_VString) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray3_VString"`
}) {
}

func (x VArray3_VString) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray3_VString{}
}

func (x VArray3_VString) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray21); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueString(vdlTypeString2, string(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_VString) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray21); err != nil {
		return err
	}
	for index := 0; index < 3; index++ {
		switch done, elem, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 3 %T)", index, *x)
		default:
			x[index] = VString(elem)
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 3 %T", *x)
	}
	return dec.FinishValue()
}

type VArray3_TypeObject [3]*vdl.Type

func (VArray3_TypeObject) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray3_TypeObject"`
}) {
}

func (x VArray3_TypeObject) VDLIsZero() bool { //nolint:gocyclo
	for _, elem := range x {
		if elem != nil && elem != vdl.AnyType {
			return false
		}
	}
	return true
}

func (x VArray3_TypeObject) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray22); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueTypeObject(elem); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_TypeObject) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray22); err != nil {
		return err
	}
	for index := 0; index < 3; index++ {
		switch done, elem, err := dec.NextEntryValueTypeObject(); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 3 %T)", index, *x)
		default:
			x[index] = elem
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 3 %T", *x)
	}
	return dec.FinishValue()
}

type VArray2_Byte [2]byte

func (VArray2_Byte) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray2_Byte"`
}) {
}

func (x VArray2_Byte) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray2_Byte{}
}

func (x VArray2_Byte) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueBytes(vdlTypeArray23, x[:]); err != nil {
		return err
	}
	return nil
}

func (x *VArray2_Byte) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	bytes := x[:]
	if err := dec.ReadValueBytes(2, &bytes); err != nil {
		return err
	}
	return nil
}

type VArray1_VByte [1]VByte

func (VArray1_VByte) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray1_VByte"`
}) {
}

func (x VArray1_VByte) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray1_VByte{}
}

func (x VArray1_VByte) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueBytes(vdlTypeArray24, reflect.ValueOf(x[:]).Bytes()); err != nil {
		return err
	}
	return nil
}

func (x *VArray1_VByte) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	bytes := reflect.ValueOf(x[:]).Bytes()
	if err := dec.ReadValueBytes(1, &bytes); err != nil {
		return err
	}
	return nil
}

type VArray3_VEnumAbc [3]VEnumAbc

func (VArray3_VEnumAbc) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray3_VEnumAbc"`
}) {
}

func (x VArray3_VEnumAbc) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray3_VEnumAbc{}
}

func (x VArray3_VEnumAbc) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray25); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueString(vdlTypeEnum4, elem.String()); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_VEnumAbc) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray25); err != nil {
		return err
	}
	for index := 0; index < 3; index++ {
		switch done, elem, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 3 %T)", index, *x)
		default:
			if err := x[index].Set(elem); err != nil {
				return err
			}
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 3 %T", *x)
	}
	return dec.FinishValue()
}

type VArray2_VEnumBcd [2]VEnumBcd

func (VArray2_VEnumBcd) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray2_VEnumBcd"`
}) {
}

func (x VArray2_VEnumBcd) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray2_VEnumBcd{}
}

func (x VArray2_VEnumBcd) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray26); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueString(vdlTypeEnum5, elem.String()); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray2_VEnumBcd) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray26); err != nil {
		return err
	}
	for index := 0; index < 2; index++ {
		switch done, elem, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 2 %T)", index, *x)
		default:
			if err := x[index].Set(elem); err != nil {
				return err
			}
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 2 %T", *x)
	}
	return dec.FinishValue()
}

type VArray3_VStructEmpty [3]VStructEmpty

func (VArray3_VStructEmpty) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray3_VStructEmpty"`
}) {
}

func (x VArray3_VStructEmpty) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray3_VStructEmpty{}
}

func (x VArray3_VStructEmpty) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray27); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_VStructEmpty) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray27); err != nil {
		return err
	}
	for index := 0; index < 3; index++ {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 3 %T)", index, *x)
		default:
			if err := x[index].VDLRead(dec); err != nil {
				return err
			}
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 3 %T", *x)
	}
	return dec.FinishValue()
}

type VArray2_VNamedError [2]VNamedError

func (VArray2_VNamedError) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray2_VNamedError"`
}) {
}

func (x VArray2_VNamedError) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray2_VNamedError{}
}

func (x VArray2_VNamedError) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray28); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray2_VNamedError) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray28); err != nil {
		return err
	}
	for index := 0; index < 2; index++ {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 2 %T)", index, *x)
		default:
			if err := x[index].VDLRead(dec); err != nil {
				return err
			}
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 2 %T", *x)
	}
	return dec.FinishValue()
}

type VArray2_Error [2]error

func (VArray2_Error) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray2_Error"`
}) {
}

func (x VArray2_Error) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray2_Error{}
}

func (x VArray2_Error) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray29); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := verror.VDLWrite(enc, elem); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray2_Error) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray29); err != nil {
		return err
	}
	for index := 0; index < 2; index++ {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 2 %T)", index, *x)
		default:
			if err := verror.VDLRead(dec, &x[index]); err != nil {
				return err
			}
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 2 %T", *x)
	}
	return dec.FinishValue()
}

type VArray1_Uint16 [1]uint16

func (VArray1_Uint16) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray1_Uint16"`
}) {
}

func (x VArray1_Uint16) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray1_Uint16{}
}

func (x VArray1_Uint16) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray30); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueUint(vdl.Uint16Type, uint64(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_Uint16) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray30); err != nil {
		return err
	}
	for index := 0; index < 1; index++ {
		switch done, elem, err := dec.NextEntryValueUint(16); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 1 %T)", index, *x)
		default:
			x[index] = uint16(elem)
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 1 %T", *x)
	}
	return dec.FinishValue()
}

type VArray2_VUint16 [2]VUint16

func (VArray2_VUint16) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray2_VUint16"`
}) {
}

func (x VArray2_VUint16) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray2_VUint16{}
}

func (x VArray2_VUint16) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray31); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueUint(vdlTypeUint168, uint64(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray2_VUint16) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray31); err != nil {
		return err
	}
	for index := 0; index < 2; index++ {
		switch done, elem, err := dec.NextEntryValueUint(16); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 2 %T)", index, *x)
		default:
			x[index] = VUint16(elem)
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 2 %T", *x)
	}
	return dec.FinishValue()
}

type VArray1_Int64 [1]int64

func (VArray1_Int64) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray1_Int64"`
}) {
}

func (x VArray1_Int64) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray1_Int64{}
}

func (x VArray1_Int64) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray32); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueInt(vdl.Int64Type, elem); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_Int64) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray32); err != nil {
		return err
	}
	for index := 0; index < 1; index++ {
		switch done, elem, err := dec.NextEntryValueInt(64); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 1 %T)", index, *x)
		default:
			x[index] = elem
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 1 %T", *x)
	}
	return dec.FinishValue()
}

type VArray1_OptVStructEmpty [1]*VStructEmpty

func (VArray1_OptVStructEmpty) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray1_OptVStructEmpty"`
}) {
}

func (x VArray1_OptVStructEmpty) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray1_OptVStructEmpty{}
}

func (x VArray1_OptVStructEmpty) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray33); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if elem == nil {
			if err := enc.NilValue(vdlTypeOptional34); err != nil {
				return err
			}
		} else {
			enc.SetNextStartValueIsOptional()
			if err := elem.VDLWrite(enc); err != nil {
				return err
			}
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_OptVStructEmpty) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray33); err != nil {
		return err
	}
	for index := 0; index < 1; index++ {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 1 %T)", index, *x)
		default:
			if err := dec.StartValue(vdlTypeOptional34); err != nil {
				return err
			}
			if dec.IsNil() {
				x[index] = nil
				if err := dec.FinishValue(); err != nil {
					return err
				}
			} else {
				x[index] = new(VStructEmpty)
				dec.IgnoreNextStartValue()
				if err := x[index].VDLRead(dec); err != nil {
					return err
				}
			}
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 1 %T", *x)
	}
	return dec.FinishValue()
}

type VArray2_OptVNamedError [2]*VNamedError

func (VArray2_OptVNamedError) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VArray2_OptVNamedError"`
}) {
}

func (x VArray2_OptVNamedError) VDLIsZero() bool { //nolint:gocyclo
	return x == VArray2_OptVNamedError{}
}

func (x VArray2_OptVNamedError) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeArray35); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if elem == nil {
			if err := enc.NilValue(vdlTypeOptional36); err != nil {
				return err
			}
		} else {
			enc.SetNextStartValueIsOptional()
			if err := elem.VDLWrite(enc); err != nil {
				return err
			}
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray2_OptVNamedError) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeArray35); err != nil {
		return err
	}
	for index := 0; index < 2; index++ {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return fmt.Errorf("short array, got len %d < 2 %T)", index, *x)
		default:
			if err := dec.StartValue(vdlTypeOptional36); err != nil {
				return err
			}
			if dec.IsNil() {
				x[index] = nil
				if err := dec.FinishValue(); err != nil {
					return err
				}
			} else {
				x[index] = new(VNamedError)
				dec.IgnoreNextStartValue()
				if err := x[index].VDLRead(dec); err != nil {
					return err
				}
			}
		}
	}
	switch done, err := dec.NextEntry(); {
	case err != nil:
		return err
	case !done:
		return fmt.Errorf("long array, got len > 2 %T", *x)
	}
	return dec.FinishValue()
}

type VList_Any []*vom.RawBytes

func (VList_Any) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_Any"`
}) {
}

func (x VList_Any) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_Any) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList37); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if elem == nil {
			if err := enc.NilValue(vdl.AnyType); err != nil {
				return err
			}
		} else {
			if err := elem.VDLWrite(enc); err != nil {
				return err
			}
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_Any) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList37); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_Any, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			var elem *vom.RawBytes
			elem = new(vom.RawBytes)
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
			*x = append(*x, elem)
		}
	}
}

type VList_Bool []bool

func (VList_Bool) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_Bool"`
}) {
}

func (x VList_Bool) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_Bool) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList38); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueBool(vdl.BoolType, elem); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_Bool) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList38); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_Bool, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, elem, err := dec.NextEntryValueBool(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			*x = append(*x, elem)
		}
	}
}

type VList_VBool []VBool

func (VList_VBool) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_VBool"`
}) {
}

func (x VList_VBool) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_VBool) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList39); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueBool(vdlTypeBool1, bool(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VBool) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList39); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_VBool, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, elem, err := dec.NextEntryValueBool(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			*x = append(*x, VBool(elem))
		}
	}
}

type VList_String []string

func (VList_String) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_String"`
}) {
}

func (x VList_String) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_String) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList40); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueString(vdl.StringType, elem); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_String) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList40); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_String, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, elem, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			*x = append(*x, elem)
		}
	}
}

type VList_VString []VString

func (VList_VString) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_VString"`
}) {
}

func (x VList_VString) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_VString) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList41); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueString(vdlTypeString2, string(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VString) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList41); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_VString, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, elem, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			*x = append(*x, VString(elem))
		}
	}
}

type VList_TypeObject []*vdl.Type

func (VList_TypeObject) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_TypeObject"`
}) {
}

func (x VList_TypeObject) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_TypeObject) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList42); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueTypeObject(elem); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_TypeObject) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList42); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_TypeObject, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, elem, err := dec.NextEntryValueTypeObject(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			*x = append(*x, elem)
		}
	}
}

type VList_Byte []byte

func (VList_Byte) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_Byte"`
}) {
}

func (x VList_Byte) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_Byte) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueBytes(vdlTypeList43, []byte(x)); err != nil {
		return err
	}
	return nil
}

func (x *VList_Byte) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	var bytes []byte
	if err := dec.ReadValueBytes(-1, &bytes); err != nil {
		return err
	}
	*x = bytes
	return nil
}

type VList_VByte []VByte

func (VList_VByte) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_VByte"`
}) {
}

func (x VList_VByte) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_VByte) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.WriteValueBytes(vdlTypeList44, reflect.ValueOf(x).Bytes()); err != nil {
		return err
	}
	return nil
}

func (x *VList_VByte) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	var bytes []byte
	if err := dec.ReadValueBytes(-1, &bytes); err != nil {
		return err
	}
	reflect.ValueOf(x).Elem().SetBytes(bytes)
	return nil
}

type VList_VEnumAbc []VEnumAbc

func (VList_VEnumAbc) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_VEnumAbc"`
}) {
}

func (x VList_VEnumAbc) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_VEnumAbc) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList45); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueString(vdlTypeEnum4, elem.String()); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VEnumAbc) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList45); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_VEnumAbc, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, elem, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			var enum VEnumAbc
			if err := enum.Set(elem); err != nil {
				return err
			}
			*x = append(*x, enum)
		}
	}
}

type VList_VEnumBcd []VEnumBcd

func (VList_VEnumBcd) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_VEnumBcd"`
}) {
}

func (x VList_VEnumBcd) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_VEnumBcd) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList46); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueString(vdlTypeEnum5, elem.String()); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VEnumBcd) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList46); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_VEnumBcd, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, elem, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			var enum VEnumBcd
			if err := enum.Set(elem); err != nil {
				return err
			}
			*x = append(*x, enum)
		}
	}
}

type VList_VStructEmpty []VStructEmpty

func (VList_VStructEmpty) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_VStructEmpty"`
}) {
}

func (x VList_VStructEmpty) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_VStructEmpty) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList47); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VStructEmpty) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList47); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_VStructEmpty, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			var elem VStructEmpty
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
			*x = append(*x, elem)
		}
	}
}

type VList_VNamedError []VNamedError

func (VList_VNamedError) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_VNamedError"`
}) {
}

func (x VList_VNamedError) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_VNamedError) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList48); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VNamedError) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList48); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_VNamedError, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			var elem VNamedError
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
			*x = append(*x, elem)
		}
	}
}

type VList_Error []error

func (VList_Error) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_Error"`
}) {
}

func (x VList_Error) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_Error) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList49); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := verror.VDLWrite(enc, elem); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_Error) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList49); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_Error, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			var elem error
			if err := verror.VDLRead(dec, &elem); err != nil {
				return err
			}
			*x = append(*x, elem)
		}
	}
}

type VList_Uint16 []uint16

func (VList_Uint16) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_Uint16"`
}) {
}

func (x VList_Uint16) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_Uint16) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList50); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueUint(vdl.Uint16Type, uint64(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_Uint16) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList50); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_Uint16, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, elem, err := dec.NextEntryValueUint(16); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			*x = append(*x, uint16(elem))
		}
	}
}

type VList_Uint32 []uint32

func (VList_Uint32) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_Uint32"`
}) {
}

func (x VList_Uint32) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_Uint32) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList51); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueUint(vdl.Uint32Type, uint64(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_Uint32) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList51); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_Uint32, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, elem, err := dec.NextEntryValueUint(32); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			*x = append(*x, uint32(elem))
		}
	}
}

type VList_VFloat32 []VFloat32

func (VList_VFloat32) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_VFloat32"`
}) {
}

func (x VList_VFloat32) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_VFloat32) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList52); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntryValueFloat(vdlTypeFloat3215, float64(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VFloat32) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList52); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_VFloat32, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, elem, err := dec.NextEntryValueFloat(32); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			*x = append(*x, VFloat32(elem))
		}
	}
}

type VList_OptVStructEmpty []*VStructEmpty

func (VList_OptVStructEmpty) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_OptVStructEmpty"`
}) {
}

func (x VList_OptVStructEmpty) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_OptVStructEmpty) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList53); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if elem == nil {
			if err := enc.NilValue(vdlTypeOptional34); err != nil {
				return err
			}
		} else {
			enc.SetNextStartValueIsOptional()
			if err := elem.VDLWrite(enc); err != nil {
				return err
			}
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_OptVStructEmpty) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList53); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_OptVStructEmpty, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			var elem *VStructEmpty
			if err := dec.StartValue(vdlTypeOptional34); err != nil {
				return err
			}
			if dec.IsNil() {
				elem = nil
				if err := dec.FinishValue(); err != nil {
					return err
				}
			} else {
				elem = new(VStructEmpty)
				dec.IgnoreNextStartValue()
				if err := elem.VDLRead(dec); err != nil {
					return err
				}
			}
			*x = append(*x, elem)
		}
	}
}

type VList_OptVNamedError []*VNamedError

func (VList_OptVNamedError) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VList_OptVNamedError"`
}) {
}

func (x VList_OptVNamedError) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VList_OptVNamedError) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeList54); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for _, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if elem == nil {
			if err := enc.NilValue(vdlTypeOptional36); err != nil {
				return err
			}
		} else {
			enc.SetNextStartValueIsOptional()
			if err := elem.VDLWrite(enc); err != nil {
				return err
			}
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_OptVNamedError) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeList54); err != nil {
		return err
	}
	if len := dec.LenHint(); len > 0 {
		*x = make(VList_OptVNamedError, 0, len)
	} else {
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		default:
			var elem *VNamedError
			if err := dec.StartValue(vdlTypeOptional36); err != nil {
				return err
			}
			if dec.IsNil() {
				elem = nil
				if err := dec.FinishValue(); err != nil {
					return err
				}
			} else {
				elem = new(VNamedError)
				dec.IgnoreNextStartValue()
				if err := elem.VDLRead(dec); err != nil {
					return err
				}
			}
			*x = append(*x, elem)
		}
	}
}

type VSet_Bool map[bool]struct{}

func (VSet_Bool) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VSet_Bool"`
}) {
}

func (x VSet_Bool) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VSet_Bool) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeSet55); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntryValueBool(vdl.BoolType, key); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_Bool) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeSet55); err != nil {
		return err
	}
	var tmpMap VSet_Bool
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_Bool, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueBool(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			if tmpMap == nil {
				tmpMap = make(VSet_Bool)
			}
			tmpMap[key] = struct{}{}
		}
	}
}

type VSet_VBool map[VBool]struct{}

func (VSet_VBool) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VSet_VBool"`
}) {
}

func (x VSet_VBool) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VSet_VBool) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeSet56); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntryValueBool(vdlTypeBool1, bool(key)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VBool) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeSet56); err != nil {
		return err
	}
	var tmpMap VSet_VBool
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VBool, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueBool(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			if tmpMap == nil {
				tmpMap = make(VSet_VBool)
			}
			tmpMap[VBool(key)] = struct{}{}
		}
	}
}

type VSet_String map[string]struct{}

func (VSet_String) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VSet_String"`
}) {
}

func (x VSet_String) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VSet_String) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeSet57); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntryValueString(vdl.StringType, key); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_String) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeSet57); err != nil {
		return err
	}
	var tmpMap VSet_String
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_String, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			if tmpMap == nil {
				tmpMap = make(VSet_String)
			}
			tmpMap[key] = struct{}{}
		}
	}
}

type VSet_VString map[VString]struct{}

func (VSet_VString) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VSet_VString"`
}) {
}

func (x VSet_VString) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VSet_VString) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeSet58); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntryValueString(vdlTypeString2, string(key)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VString) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeSet58); err != nil {
		return err
	}
	var tmpMap VSet_VString
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VString, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			if tmpMap == nil {
				tmpMap = make(VSet_VString)
			}
			tmpMap[VString(key)] = struct{}{}
		}
	}
}

type VSet_Byte map[byte]struct{}

func (VSet_Byte) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VSet_Byte"`
}) {
}

func (x VSet_Byte) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VSet_Byte) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeSet59); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntryValueUint(vdl.ByteType, uint64(key)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_Byte) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeSet59); err != nil {
		return err
	}
	var tmpMap VSet_Byte
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_Byte, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueUint(8); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			if tmpMap == nil {
				tmpMap = make(VSet_Byte)
			}
			tmpMap[byte(key)] = struct{}{}
		}
	}
}

type VSet_VByte map[VByte]struct{}

func (VSet_VByte) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VSet_VByte"`
}) {
}

func (x VSet_VByte) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VSet_VByte) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeSet60); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntryValueUint(vdlTypeByte3, uint64(key)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VByte) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeSet60); err != nil {
		return err
	}
	var tmpMap VSet_VByte
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VByte, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueUint(8); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			if tmpMap == nil {
				tmpMap = make(VSet_VByte)
			}
			tmpMap[VByte(key)] = struct{}{}
		}
	}
}

type VSet_VEnumAbc map[VEnumAbc]struct{}

func (VSet_VEnumAbc) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VSet_VEnumAbc"`
}) {
}

func (x VSet_VEnumAbc) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VSet_VEnumAbc) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeSet61); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntryValueString(vdlTypeEnum4, key.String()); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VEnumAbc) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeSet61); err != nil {
		return err
	}
	var tmpMap VSet_VEnumAbc
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VEnumAbc, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var keyEnum VEnumAbc
			if err := keyEnum.Set(key); err != nil {
				return err
			}
			if tmpMap == nil {
				tmpMap = make(VSet_VEnumAbc)
			}
			tmpMap[keyEnum] = struct{}{}
		}
	}
}

type VSet_VEnumBcd map[VEnumBcd]struct{}

func (VSet_VEnumBcd) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VSet_VEnumBcd"`
}) {
}

func (x VSet_VEnumBcd) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VSet_VEnumBcd) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeSet62); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntryValueString(vdlTypeEnum5, key.String()); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VEnumBcd) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeSet62); err != nil {
		return err
	}
	var tmpMap VSet_VEnumBcd
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VEnumBcd, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var keyEnum VEnumBcd
			if err := keyEnum.Set(key); err != nil {
				return err
			}
			if tmpMap == nil {
				tmpMap = make(VSet_VEnumBcd)
			}
			tmpMap[keyEnum] = struct{}{}
		}
	}
}

type VSet_VStructEmpty map[VStructEmpty]struct{}

func (VSet_VStructEmpty) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VSet_VStructEmpty"`
}) {
}

func (x VSet_VStructEmpty) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VSet_VStructEmpty) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeSet63); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VStructEmpty) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeSet63); err != nil {
		return err
	}
	var tmpMap VSet_VStructEmpty
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VStructEmpty, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var key VStructEmpty
			if err := key.VDLRead(dec); err != nil {
				return err
			}
			if tmpMap == nil {
				tmpMap = make(VSet_VStructEmpty)
			}
			tmpMap[key] = struct{}{}
		}
	}
}

type VSet_VNamedError map[VNamedError]struct{}

func (VSet_VNamedError) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VSet_VNamedError"`
}) {
}

func (x VSet_VNamedError) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VSet_VNamedError) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeSet64); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VNamedError) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeSet64); err != nil {
		return err
	}
	var tmpMap VSet_VNamedError
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VNamedError, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var key VNamedError
			if err := key.VDLRead(dec); err != nil {
				return err
			}
			if tmpMap == nil {
				tmpMap = make(VSet_VNamedError)
			}
			tmpMap[key] = struct{}{}
		}
	}
}

type VSet_Uint64 map[uint64]struct{}

func (VSet_Uint64) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VSet_Uint64"`
}) {
}

func (x VSet_Uint64) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VSet_Uint64) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeSet65); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntryValueUint(vdl.Uint64Type, key); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_Uint64) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeSet65); err != nil {
		return err
	}
	var tmpMap VSet_Uint64
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_Uint64, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueUint(64); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			if tmpMap == nil {
				tmpMap = make(VSet_Uint64)
			}
			tmpMap[key] = struct{}{}
		}
	}
}

type VSet_Float32 map[float32]struct{}

func (VSet_Float32) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VSet_Float32"`
}) {
}

func (x VSet_Float32) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VSet_Float32) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeSet66); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntryValueFloat(vdl.Float32Type, float64(key)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_Float32) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeSet66); err != nil {
		return err
	}
	var tmpMap VSet_Float32
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_Float32, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueFloat(32); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			if tmpMap == nil {
				tmpMap = make(VSet_Float32)
			}
			tmpMap[float32(key)] = struct{}{}
		}
	}
}

type VSet_VFloat64 map[VFloat64]struct{}

func (VSet_VFloat64) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VSet_VFloat64"`
}) {
}

func (x VSet_VFloat64) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VSet_VFloat64) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeSet67); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntryValueFloat(vdlTypeFloat6416, float64(key)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VFloat64) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeSet67); err != nil {
		return err
	}
	var tmpMap VSet_VFloat64
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VFloat64, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueFloat(64); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			if tmpMap == nil {
				tmpMap = make(VSet_VFloat64)
			}
			tmpMap[VFloat64(key)] = struct{}{}
		}
	}
}

type VMap_Bool_Bool map[bool]bool

func (VMap_Bool_Bool) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VMap_Bool_Bool"`
}) {
}

func (x VMap_Bool_Bool) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VMap_Bool_Bool) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeMap68); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntryValueBool(vdl.BoolType, key); err != nil {
			return err
		}
		if err := enc.WriteValueBool(vdl.BoolType, elem); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_Bool_Bool) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeMap68); err != nil {
		return err
	}
	var tmpMap VMap_Bool_Bool
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_Bool_Bool, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueBool(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var elem bool
			switch value, err := dec.ReadValueBool(); {
			case err != nil:
				return err
			default:
				elem = value
			}
			if tmpMap == nil {
				tmpMap = make(VMap_Bool_Bool)
			}
			tmpMap[key] = elem
		}
	}
}

type VMap_VBool_VBool map[VBool]VBool

func (VMap_VBool_VBool) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VMap_VBool_VBool"`
}) {
}

func (x VMap_VBool_VBool) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VMap_VBool_VBool) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeMap69); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntryValueBool(vdlTypeBool1, bool(key)); err != nil {
			return err
		}
		if err := enc.WriteValueBool(vdlTypeBool1, bool(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VBool_VBool) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeMap69); err != nil {
		return err
	}
	var tmpMap VMap_VBool_VBool
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VBool_VBool, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueBool(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var elem VBool
			switch value, err := dec.ReadValueBool(); {
			case err != nil:
				return err
			default:
				elem = VBool(value)
			}
			if tmpMap == nil {
				tmpMap = make(VMap_VBool_VBool)
			}
			tmpMap[VBool(key)] = elem
		}
	}
}

type VMap_String_String map[string]string

func (VMap_String_String) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VMap_String_String"`
}) {
}

func (x VMap_String_String) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VMap_String_String) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeMap70); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntryValueString(vdl.StringType, key); err != nil {
			return err
		}
		if err := enc.WriteValueString(vdl.StringType, elem); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_String_String) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeMap70); err != nil {
		return err
	}
	var tmpMap VMap_String_String
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_String_String, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var elem string
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				elem = value
			}
			if tmpMap == nil {
				tmpMap = make(VMap_String_String)
			}
			tmpMap[key] = elem
		}
	}
}

type VMap_VString_VString map[VString]VString

func (VMap_VString_VString) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VMap_VString_VString"`
}) {
}

func (x VMap_VString_VString) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VMap_VString_VString) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeMap71); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntryValueString(vdlTypeString2, string(key)); err != nil {
			return err
		}
		if err := enc.WriteValueString(vdlTypeString2, string(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VString_VString) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeMap71); err != nil {
		return err
	}
	var tmpMap VMap_VString_VString
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VString_VString, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var elem VString
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				elem = VString(value)
			}
			if tmpMap == nil {
				tmpMap = make(VMap_VString_VString)
			}
			tmpMap[VString(key)] = elem
		}
	}
}

type VMap_Byte_Byte map[byte]byte

func (VMap_Byte_Byte) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VMap_Byte_Byte"`
}) {
}

func (x VMap_Byte_Byte) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VMap_Byte_Byte) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeMap72); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntryValueUint(vdl.ByteType, uint64(key)); err != nil {
			return err
		}
		if err := enc.WriteValueUint(vdl.ByteType, uint64(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_Byte_Byte) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeMap72); err != nil {
		return err
	}
	var tmpMap VMap_Byte_Byte
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_Byte_Byte, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueUint(8); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var elem byte
			switch value, err := dec.ReadValueUint(8); {
			case err != nil:
				return err
			default:
				elem = byte(value)
			}
			if tmpMap == nil {
				tmpMap = make(VMap_Byte_Byte)
			}
			tmpMap[byte(key)] = elem
		}
	}
}

type VMap_VByte_VByte map[VByte]VByte

func (VMap_VByte_VByte) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VMap_VByte_VByte"`
}) {
}

func (x VMap_VByte_VByte) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VMap_VByte_VByte) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeMap73); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntryValueUint(vdlTypeByte3, uint64(key)); err != nil {
			return err
		}
		if err := enc.WriteValueUint(vdlTypeByte3, uint64(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VByte_VByte) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeMap73); err != nil {
		return err
	}
	var tmpMap VMap_VByte_VByte
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VByte_VByte, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueUint(8); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var elem VByte
			switch value, err := dec.ReadValueUint(8); {
			case err != nil:
				return err
			default:
				elem = VByte(value)
			}
			if tmpMap == nil {
				tmpMap = make(VMap_VByte_VByte)
			}
			tmpMap[VByte(key)] = elem
		}
	}
}

type VMap_VEnumAbc_VEnumAbc map[VEnumAbc]VEnumAbc

func (VMap_VEnumAbc_VEnumAbc) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VMap_VEnumAbc_VEnumAbc"`
}) {
}

func (x VMap_VEnumAbc_VEnumAbc) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VMap_VEnumAbc_VEnumAbc) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeMap74); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntryValueString(vdlTypeEnum4, key.String()); err != nil {
			return err
		}
		if err := enc.WriteValueString(vdlTypeEnum4, elem.String()); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VEnumAbc_VEnumAbc) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeMap74); err != nil {
		return err
	}
	var tmpMap VMap_VEnumAbc_VEnumAbc
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VEnumAbc_VEnumAbc, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var keyEnum VEnumAbc
			if err := keyEnum.Set(key); err != nil {
				return err
			}
			var elem VEnumAbc
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				if err := elem.Set(value); err != nil {
					return err
				}
			}
			if tmpMap == nil {
				tmpMap = make(VMap_VEnumAbc_VEnumAbc)
			}
			tmpMap[keyEnum] = elem
		}
	}
}

type VMap_VEnumBcd_VEnumBcd map[VEnumBcd]VEnumBcd

func (VMap_VEnumBcd_VEnumBcd) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VMap_VEnumBcd_VEnumBcd"`
}) {
}

func (x VMap_VEnumBcd_VEnumBcd) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VMap_VEnumBcd_VEnumBcd) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeMap75); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntryValueString(vdlTypeEnum5, key.String()); err != nil {
			return err
		}
		if err := enc.WriteValueString(vdlTypeEnum5, elem.String()); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VEnumBcd_VEnumBcd) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeMap75); err != nil {
		return err
	}
	var tmpMap VMap_VEnumBcd_VEnumBcd
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VEnumBcd_VEnumBcd, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var keyEnum VEnumBcd
			if err := keyEnum.Set(key); err != nil {
				return err
			}
			var elem VEnumBcd
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				if err := elem.Set(value); err != nil {
					return err
				}
			}
			if tmpMap == nil {
				tmpMap = make(VMap_VEnumBcd_VEnumBcd)
			}
			tmpMap[keyEnum] = elem
		}
	}
}

type VMap_VStructEmpty_VStructEmpty map[VStructEmpty]VStructEmpty

func (VMap_VStructEmpty_VStructEmpty) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VMap_VStructEmpty_VStructEmpty"`
}) {
}

func (x VMap_VStructEmpty_VStructEmpty) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VMap_VStructEmpty_VStructEmpty) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeMap76); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VStructEmpty_VStructEmpty) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeMap76); err != nil {
		return err
	}
	var tmpMap VMap_VStructEmpty_VStructEmpty
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VStructEmpty_VStructEmpty, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var key VStructEmpty
			if err := key.VDLRead(dec); err != nil {
				return err
			}
			var elem VStructEmpty
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
			if tmpMap == nil {
				tmpMap = make(VMap_VStructEmpty_VStructEmpty)
			}
			tmpMap[key] = elem
		}
	}
}

type VMap_VNamedError_VNamedError map[VNamedError]VNamedError

func (VMap_VNamedError_VNamedError) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VMap_VNamedError_VNamedError"`
}) {
}

func (x VMap_VNamedError_VNamedError) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VMap_VNamedError_VNamedError) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeMap77); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VNamedError_VNamedError) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeMap77); err != nil {
		return err
	}
	var tmpMap VMap_VNamedError_VNamedError
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VNamedError_VNamedError, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var key VNamedError
			if err := key.VDLRead(dec); err != nil {
				return err
			}
			var elem VNamedError
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
			if tmpMap == nil {
				tmpMap = make(VMap_VNamedError_VNamedError)
			}
			tmpMap[key] = elem
		}
	}
}

type VMap_VInt16_VInt16 map[VInt16]VInt16

func (VMap_VInt16_VInt16) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VMap_VInt16_VInt16"`
}) {
}

func (x VMap_VInt16_VInt16) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VMap_VInt16_VInt16) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeMap78); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntryValueInt(vdlTypeInt1612, int64(key)); err != nil {
			return err
		}
		if err := enc.WriteValueInt(vdlTypeInt1612, int64(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VInt16_VInt16) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeMap78); err != nil {
		return err
	}
	var tmpMap VMap_VInt16_VInt16
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VInt16_VInt16, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueInt(16); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var elem VInt16
			switch value, err := dec.ReadValueInt(16); {
			case err != nil:
				return err
			default:
				elem = VInt16(value)
			}
			if tmpMap == nil {
				tmpMap = make(VMap_VInt16_VInt16)
			}
			tmpMap[VInt16(key)] = elem
		}
	}
}

type VMap_VInt32_VInt32 map[VInt32]VInt32

func (VMap_VInt32_VInt32) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VMap_VInt32_VInt32"`
}) {
}

func (x VMap_VInt32_VInt32) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VMap_VInt32_VInt32) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeMap79); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntryValueInt(vdlTypeInt3213, int64(key)); err != nil {
			return err
		}
		if err := enc.WriteValueInt(vdlTypeInt3213, int64(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VInt32_VInt32) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeMap79); err != nil {
		return err
	}
	var tmpMap VMap_VInt32_VInt32
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VInt32_VInt32, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueInt(32); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var elem VInt32
			switch value, err := dec.ReadValueInt(32); {
			case err != nil:
				return err
			default:
				elem = VInt32(value)
			}
			if tmpMap == nil {
				tmpMap = make(VMap_VInt32_VInt32)
			}
			tmpMap[VInt32(key)] = elem
		}
	}
}

type VMap_VInt64_VInt64 map[VInt64]VInt64

func (VMap_VInt64_VInt64) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VMap_VInt64_VInt64"`
}) {
}

func (x VMap_VInt64_VInt64) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x VMap_VInt64_VInt64) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeMap80); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntryValueInt(vdlTypeInt6414, int64(key)); err != nil {
			return err
		}
		if err := enc.WriteValueInt(vdlTypeInt6414, int64(elem)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VInt64_VInt64) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeMap80); err != nil {
		return err
	}
	var tmpMap VMap_VInt64_VInt64
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VInt64_VInt64, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueInt(64); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			var elem VInt64
			switch value, err := dec.ReadValueInt(64); {
			case err != nil:
				return err
			default:
				elem = VInt64(value)
			}
			if tmpMap == nil {
				tmpMap = make(VMap_VInt64_VInt64)
			}
			tmpMap[VInt64(key)] = elem
		}
	}
}

type VStructDepth1_All struct {
	F0  *vom.RawBytes
	F1  bool
	F2  VBool
	F3  string
	F4  VString
	F5  *vdl.Type
	F6  byte
	F7  VByte
	F8  VEnumAbc
	F9  VEnumBcd
	F10 VStructEmpty
	F11 VNamedError
	F12 error
	F13 uint16
	F14 VUint16
	F15 uint32
	F16 VUint32
	F17 uint64
	F18 VUint64
	F19 int8
	F20 VInt8
	F21 int16
	F22 VInt16
	F23 int32
	F24 VInt32
	F25 int64
	F26 VInt64
	F27 float32
	F28 VFloat32
	F29 float64
	F30 VFloat64
	F31 *VStructEmpty
	F32 *VNamedError
}

func (VStructDepth1_All) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_All"`
}) {
}

func (x VStructDepth1_All) VDLIsZero() bool { //nolint:gocyclo
	if x.F0 != nil && !x.F0.VDLIsZero() {
		return false
	}
	if x.F1 {
		return false
	}
	if x.F2 {
		return false
	}
	if x.F3 != "" {
		return false
	}
	if x.F4 != "" {
		return false
	}
	if x.F5 != nil && x.F5 != vdl.AnyType {
		return false
	}
	if x.F6 != 0 {
		return false
	}
	if x.F7 != 0 {
		return false
	}
	if x.F8 != VEnumAbcA {
		return false
	}
	if x.F9 != VEnumBcdB {
		return false
	}
	if x.F10 != (VStructEmpty{}) {
		return false
	}
	if x.F11 != (VNamedError{}) {
		return false
	}
	if x.F12 != nil {
		return false
	}
	if x.F13 != 0 {
		return false
	}
	if x.F14 != 0 {
		return false
	}
	if x.F15 != 0 {
		return false
	}
	if x.F16 != 0 {
		return false
	}
	if x.F17 != 0 {
		return false
	}
	if x.F18 != 0 {
		return false
	}
	if x.F19 != 0 {
		return false
	}
	if x.F20 != 0 {
		return false
	}
	if x.F21 != 0 {
		return false
	}
	if x.F22 != 0 {
		return false
	}
	if x.F23 != 0 {
		return false
	}
	if x.F24 != 0 {
		return false
	}
	if x.F25 != 0 {
		return false
	}
	if x.F26 != 0 {
		return false
	}
	if x.F27 != 0 {
		return false
	}
	if x.F28 != 0 {
		return false
	}
	if x.F29 != 0 {
		return false
	}
	if x.F30 != 0 {
		return false
	}
	if x.F31 != nil {
		return false
	}
	if x.F32 != nil {
		return false
	}
	return true
}

func (x VStructDepth1_All) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct81); err != nil {
		return err
	}
	if x.F0 != nil && !x.F0.VDLIsZero() {
		if err := enc.NextField(0); err != nil {
			return err
		}
		if err := x.F0.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F1 {
		if err := enc.NextFieldValueBool(1, vdl.BoolType, x.F1); err != nil {
			return err
		}
	}
	if x.F2 {
		if err := enc.NextFieldValueBool(2, vdlTypeBool1, bool(x.F2)); err != nil {
			return err
		}
	}
	if x.F3 != "" {
		if err := enc.NextFieldValueString(3, vdl.StringType, x.F3); err != nil {
			return err
		}
	}
	if x.F4 != "" {
		if err := enc.NextFieldValueString(4, vdlTypeString2, string(x.F4)); err != nil {
			return err
		}
	}
	if x.F5 != nil && x.F5 != vdl.AnyType {
		if err := enc.NextFieldValueTypeObject(5, x.F5); err != nil {
			return err
		}
	}
	if x.F6 != 0 {
		if err := enc.NextFieldValueUint(6, vdl.ByteType, uint64(x.F6)); err != nil {
			return err
		}
	}
	if x.F7 != 0 {
		if err := enc.NextFieldValueUint(7, vdlTypeByte3, uint64(x.F7)); err != nil {
			return err
		}
	}
	if x.F8 != VEnumAbcA {
		if err := enc.NextFieldValueString(8, vdlTypeEnum4, x.F8.String()); err != nil {
			return err
		}
	}
	if x.F9 != VEnumBcdB {
		if err := enc.NextFieldValueString(9, vdlTypeEnum5, x.F9.String()); err != nil {
			return err
		}
	}
	if x.F10 != (VStructEmpty{}) {
		if err := enc.NextField(10); err != nil {
			return err
		}
		if err := x.F10.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F11 != (VNamedError{}) {
		if err := enc.NextField(11); err != nil {
			return err
		}
		if err := x.F11.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F12 != nil {
		if err := enc.NextField(12); err != nil {
			return err
		}
		if err := verror.VDLWrite(enc, x.F12); err != nil {
			return err
		}
	}
	if x.F13 != 0 {
		if err := enc.NextFieldValueUint(13, vdl.Uint16Type, uint64(x.F13)); err != nil {
			return err
		}
	}
	if x.F14 != 0 {
		if err := enc.NextFieldValueUint(14, vdlTypeUint168, uint64(x.F14)); err != nil {
			return err
		}
	}
	if x.F15 != 0 {
		if err := enc.NextFieldValueUint(15, vdl.Uint32Type, uint64(x.F15)); err != nil {
			return err
		}
	}
	if x.F16 != 0 {
		if err := enc.NextFieldValueUint(16, vdlTypeUint329, uint64(x.F16)); err != nil {
			return err
		}
	}
	if x.F17 != 0 {
		if err := enc.NextFieldValueUint(17, vdl.Uint64Type, x.F17); err != nil {
			return err
		}
	}
	if x.F18 != 0 {
		if err := enc.NextFieldValueUint(18, vdlTypeUint6410, uint64(x.F18)); err != nil {
			return err
		}
	}
	if x.F19 != 0 {
		if err := enc.NextFieldValueInt(19, vdl.Int8Type, int64(x.F19)); err != nil {
			return err
		}
	}
	if x.F20 != 0 {
		if err := enc.NextFieldValueInt(20, vdlTypeInt811, int64(x.F20)); err != nil {
			return err
		}
	}
	if x.F21 != 0 {
		if err := enc.NextFieldValueInt(21, vdl.Int16Type, int64(x.F21)); err != nil {
			return err
		}
	}
	if x.F22 != 0 {
		if err := enc.NextFieldValueInt(22, vdlTypeInt1612, int64(x.F22)); err != nil {
			return err
		}
	}
	if x.F23 != 0 {
		if err := enc.NextFieldValueInt(23, vdl.Int32Type, int64(x.F23)); err != nil {
			return err
		}
	}
	if x.F24 != 0 {
		if err := enc.NextFieldValueInt(24, vdlTypeInt3213, int64(x.F24)); err != nil {
			return err
		}
	}
	if x.F25 != 0 {
		if err := enc.NextFieldValueInt(25, vdl.Int64Type, x.F25); err != nil {
			return err
		}
	}
	if x.F26 != 0 {
		if err := enc.NextFieldValueInt(26, vdlTypeInt6414, int64(x.F26)); err != nil {
			return err
		}
	}
	if x.F27 != 0 {
		if err := enc.NextFieldValueFloat(27, vdl.Float32Type, float64(x.F27)); err != nil {
			return err
		}
	}
	if x.F28 != 0 {
		if err := enc.NextFieldValueFloat(28, vdlTypeFloat3215, float64(x.F28)); err != nil {
			return err
		}
	}
	if x.F29 != 0 {
		if err := enc.NextFieldValueFloat(29, vdl.Float64Type, x.F29); err != nil {
			return err
		}
	}
	if x.F30 != 0 {
		if err := enc.NextFieldValueFloat(30, vdlTypeFloat6416, float64(x.F30)); err != nil {
			return err
		}
	}
	if x.F31 != nil {
		if err := enc.NextField(31); err != nil {
			return err
		}
		enc.SetNextStartValueIsOptional()
		if err := x.F31.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F32 != nil {
		if err := enc.NextField(32); err != nil {
			return err
		}
		enc.SetNextStartValueIsOptional()
		if err := x.F32.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_All) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_All{
		F0: vom.RawBytesOf(vdl.ZeroValue(vdl.AnyType)),
		F5: vdl.AnyType,
	}
	if err := dec.StartValue(vdlTypeStruct81); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct81 {
			index = vdlTypeStruct81.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		switch index {
		case 0:
			x.F0 = new(vom.RawBytes)
			if err := x.F0.VDLRead(dec); err != nil {
				return err
			}
		case 1:
			switch value, err := dec.ReadValueBool(); {
			case err != nil:
				return err
			default:
				x.F1 = value
			}
		case 2:
			switch value, err := dec.ReadValueBool(); {
			case err != nil:
				return err
			default:
				x.F2 = VBool(value)
			}
		case 3:
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				x.F3 = value
			}
		case 4:
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				x.F4 = VString(value)
			}
		case 5:
			switch value, err := dec.ReadValueTypeObject(); {
			case err != nil:
				return err
			default:
				x.F5 = value
			}
		case 6:
			switch value, err := dec.ReadValueUint(8); {
			case err != nil:
				return err
			default:
				x.F6 = byte(value)
			}
		case 7:
			switch value, err := dec.ReadValueUint(8); {
			case err != nil:
				return err
			default:
				x.F7 = VByte(value)
			}
		case 8:
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				if err := x.F8.Set(value); err != nil {
					return err
				}
			}
		case 9:
			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				if err := x.F9.Set(value); err != nil {
					return err
				}
			}
		case 10:
			if err := x.F10.VDLRead(dec); err != nil {
				return err
			}
		case 11:
			if err := x.F11.VDLRead(dec); err != nil {
				return err
			}
		case 12:
			if err := verror.VDLRead(dec, &x.F12); err != nil {
				return err
			}
		case 13:
			switch value, err := dec.ReadValueUint(16); {
			case err != nil:
				return err
			default:
				x.F13 = uint16(value)
			}
		case 14:
			switch value, err := dec.ReadValueUint(16); {
			case err != nil:
				return err
			default:
				x.F14 = VUint16(value)
			}
		case 15:
			switch value, err := dec.ReadValueUint(32); {
			case err != nil:
				return err
			default:
				x.F15 = uint32(value)
			}
		case 16:
			switch value, err := dec.ReadValueUint(32); {
			case err != nil:
				return err
			default:
				x.F16 = VUint32(value)
			}
		case 17:
			switch value, err := dec.ReadValueUint(64); {
			case err != nil:
				return err
			default:
				x.F17 = value
			}
		case 18:
			switch value, err := dec.ReadValueUint(64); {
			case err != nil:
				return err
			default:
				x.F18 = VUint64(value)
			}
		case 19:
			switch value, err := dec.ReadValueInt(8); {
			case err != nil:
				return err
			default:
				x.F19 = int8(value)
			}
		case 20:
			switch value, err := dec.ReadValueInt(8); {
			case err != nil:
				return err
			default:
				x.F20 = VInt8(value)
			}
		case 21:
			switch value, err := dec.ReadValueInt(16); {
			case err != nil:
				return err
			default:
				x.F21 = int16(value)
			}
		case 22:
			switch value, err := dec.ReadValueInt(16); {
			case err != nil:
				return err
			default:
				x.F22 = VInt16(value)
			}
		case 23:
			switch value, err := dec.ReadValueInt(32); {
			case err != nil:
				return err
			default:
				x.F23 = int32(value)
			}
		case 24:
			switch value, err := dec.ReadValueInt(32); {
			case err != nil:
				return err
			default:
				x.F24 = VInt32(value)
			}
		case 25:
			switch value, err := dec.ReadValueInt(64); {
			case err != nil:
				return err
			default:
				x.F25 = value
			}
		case 26:
			switch value, err := dec.ReadValueInt(64); {
			case err != nil:
				return err
			default:
				x.F26 = VInt64(value)
			}
		case 27:
			switch value, err := dec.ReadValueFloat(32); {
			case err != nil:
				return err
			default:
				x.F27 = float32(value)
			}
		case 28:
			switch value, err := dec.ReadValueFloat(32); {
			case err != nil:
				return err
			default:
				x.F28 = VFloat32(value)
			}
		case 29:
			switch value, err := dec.ReadValueFloat(64); {
			case err != nil:
				return err
			default:
				x.F29 = value
			}
		case 30:
			switch value, err := dec.ReadValueFloat(64); {
			case err != nil:
				return err
			default:
				x.F30 = VFloat64(value)
			}
		case 31:
			if err := dec.StartValue(vdlTypeOptional34); err != nil {
				return err
			}
			if dec.IsNil() {
				x.F31 = nil
				if err := dec.FinishValue(); err != nil {
					return err
				}
			} else {
				x.F31 = new(VStructEmpty)
				dec.IgnoreNextStartValue()
				if err := x.F31.VDLRead(dec); err != nil {
					return err
				}
			}
		case 32:
			if err := dec.StartValue(vdlTypeOptional36); err != nil {
				return err
			}
			if dec.IsNil() {
				x.F32 = nil
				if err := dec.FinishValue(); err != nil {
					return err
				}
			} else {
				x.F32 = new(VNamedError)
				dec.IgnoreNextStartValue()
				if err := x.F32.VDLRead(dec); err != nil {
					return err
				}
			}
		}
	}
}

type VStructDepth1_Any struct {
	F0 *vom.RawBytes
}

func (VStructDepth1_Any) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_Any"`
}) {
}

func (x VStructDepth1_Any) VDLIsZero() bool { //nolint:gocyclo
	return x.F0 == nil || x.F0.VDLIsZero()
}

func (x VStructDepth1_Any) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct82); err != nil {
		return err
	}
	if x.F0 != nil && !x.F0.VDLIsZero() {
		if err := enc.NextField(0); err != nil {
			return err
		}
		if err := x.F0.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_Any) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_Any{
		F0: vom.RawBytesOf(vdl.ZeroValue(vdl.AnyType)),
	}
	if err := dec.StartValue(vdlTypeStruct82); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct82 {
			index = vdlTypeStruct82.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			x.F0 = new(vom.RawBytes)
			if err := x.F0.VDLRead(dec); err != nil {
				return err
			}
		}
	}
}

type VStructDepth1_Bool struct {
	F1 bool
}

func (VStructDepth1_Bool) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_Bool"`
}) {
}

func (x VStructDepth1_Bool) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_Bool{}
}

func (x VStructDepth1_Bool) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct83); err != nil {
		return err
	}
	if x.F1 {
		if err := enc.NextFieldValueBool(0, vdl.BoolType, x.F1); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_Bool) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_Bool{}
	if err := dec.StartValue(vdlTypeStruct83); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct83 {
			index = vdlTypeStruct83.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueBool(); {
			case err != nil:
				return err
			default:
				x.F1 = value
			}
		}
	}
}

type VStructDepth1_VBool struct {
	F2 VBool
}

func (VStructDepth1_VBool) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VBool"`
}) {
}

func (x VStructDepth1_VBool) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VBool{}
}

func (x VStructDepth1_VBool) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct84); err != nil {
		return err
	}
	if x.F2 {
		if err := enc.NextFieldValueBool(0, vdlTypeBool1, bool(x.F2)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VBool) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VBool{}
	if err := dec.StartValue(vdlTypeStruct84); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct84 {
			index = vdlTypeStruct84.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueBool(); {
			case err != nil:
				return err
			default:
				x.F2 = VBool(value)
			}
		}
	}
}

type VStructDepth1_String struct {
	F3 string
}

func (VStructDepth1_String) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_String"`
}) {
}

func (x VStructDepth1_String) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_String{}
}

func (x VStructDepth1_String) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct85); err != nil {
		return err
	}
	if x.F3 != "" {
		if err := enc.NextFieldValueString(0, vdl.StringType, x.F3); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_String) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_String{}
	if err := dec.StartValue(vdlTypeStruct85); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct85 {
			index = vdlTypeStruct85.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				x.F3 = value
			}
		}
	}
}

type VStructDepth1_VString struct {
	F4 VString
}

func (VStructDepth1_VString) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VString"`
}) {
}

func (x VStructDepth1_VString) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VString{}
}

func (x VStructDepth1_VString) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct86); err != nil {
		return err
	}
	if x.F4 != "" {
		if err := enc.NextFieldValueString(0, vdlTypeString2, string(x.F4)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VString) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VString{}
	if err := dec.StartValue(vdlTypeStruct86); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct86 {
			index = vdlTypeStruct86.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				x.F4 = VString(value)
			}
		}
	}
}

type VStructDepth1_TypeObject struct {
	F5 *vdl.Type
}

func (VStructDepth1_TypeObject) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_TypeObject"`
}) {
}

func (x VStructDepth1_TypeObject) VDLIsZero() bool { //nolint:gocyclo
	return x.F5 == nil || x.F5 == vdl.AnyType
}

func (x VStructDepth1_TypeObject) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct87); err != nil {
		return err
	}
	if x.F5 != nil && x.F5 != vdl.AnyType {
		if err := enc.NextFieldValueTypeObject(0, x.F5); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_TypeObject) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_TypeObject{
		F5: vdl.AnyType,
	}
	if err := dec.StartValue(vdlTypeStruct87); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct87 {
			index = vdlTypeStruct87.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueTypeObject(); {
			case err != nil:
				return err
			default:
				x.F5 = value
			}
		}
	}
}

type VStructDepth1_Byte struct {
	F6 byte
}

func (VStructDepth1_Byte) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_Byte"`
}) {
}

func (x VStructDepth1_Byte) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_Byte{}
}

func (x VStructDepth1_Byte) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct88); err != nil {
		return err
	}
	if x.F6 != 0 {
		if err := enc.NextFieldValueUint(0, vdl.ByteType, uint64(x.F6)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_Byte) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_Byte{}
	if err := dec.StartValue(vdlTypeStruct88); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct88 {
			index = vdlTypeStruct88.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueUint(8); {
			case err != nil:
				return err
			default:
				x.F6 = byte(value)
			}
		}
	}
}

type VStructDepth1_VByte struct {
	F7 VByte
}

func (VStructDepth1_VByte) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VByte"`
}) {
}

func (x VStructDepth1_VByte) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VByte{}
}

func (x VStructDepth1_VByte) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct89); err != nil {
		return err
	}
	if x.F7 != 0 {
		if err := enc.NextFieldValueUint(0, vdlTypeByte3, uint64(x.F7)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VByte) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VByte{}
	if err := dec.StartValue(vdlTypeStruct89); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct89 {
			index = vdlTypeStruct89.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueUint(8); {
			case err != nil:
				return err
			default:
				x.F7 = VByte(value)
			}
		}
	}
}

type VStructDepth1_VEnumAbc struct {
	F8 VEnumAbc
}

func (VStructDepth1_VEnumAbc) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VEnumAbc"`
}) {
}

func (x VStructDepth1_VEnumAbc) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VEnumAbc{}
}

func (x VStructDepth1_VEnumAbc) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct90); err != nil {
		return err
	}
	if x.F8 != VEnumAbcA {
		if err := enc.NextFieldValueString(0, vdlTypeEnum4, x.F8.String()); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VEnumAbc) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VEnumAbc{}
	if err := dec.StartValue(vdlTypeStruct90); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct90 {
			index = vdlTypeStruct90.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				if err := x.F8.Set(value); err != nil {
					return err
				}
			}
		}
	}
}

type VStructDepth1_VEnumBcd struct {
	F9 VEnumBcd
}

func (VStructDepth1_VEnumBcd) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VEnumBcd"`
}) {
}

func (x VStructDepth1_VEnumBcd) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VEnumBcd{}
}

func (x VStructDepth1_VEnumBcd) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct91); err != nil {
		return err
	}
	if x.F9 != VEnumBcdB {
		if err := enc.NextFieldValueString(0, vdlTypeEnum5, x.F9.String()); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VEnumBcd) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VEnumBcd{}
	if err := dec.StartValue(vdlTypeStruct91); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct91 {
			index = vdlTypeStruct91.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueString(); {
			case err != nil:
				return err
			default:
				if err := x.F9.Set(value); err != nil {
					return err
				}
			}
		}
	}
}

type VStructDepth1_VStructEmpty struct {
	F10 VStructEmpty
}

func (VStructDepth1_VStructEmpty) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VStructEmpty"`
}) {
}

func (x VStructDepth1_VStructEmpty) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VStructEmpty{}
}

func (x VStructDepth1_VStructEmpty) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct92); err != nil {
		return err
	}
	if x.F10 != (VStructEmpty{}) {
		if err := enc.NextField(0); err != nil {
			return err
		}
		if err := x.F10.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VStructEmpty) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VStructEmpty{}
	if err := dec.StartValue(vdlTypeStruct92); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct92 {
			index = vdlTypeStruct92.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			if err := x.F10.VDLRead(dec); err != nil {
				return err
			}
		}
	}
}

type VStructDepth1_VNamedError struct {
	F11 VNamedError
}

func (VStructDepth1_VNamedError) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VNamedError"`
}) {
}

func (x VStructDepth1_VNamedError) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VNamedError{}
}

func (x VStructDepth1_VNamedError) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct93); err != nil {
		return err
	}
	if x.F11 != (VNamedError{}) {
		if err := enc.NextField(0); err != nil {
			return err
		}
		if err := x.F11.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VNamedError) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VNamedError{}
	if err := dec.StartValue(vdlTypeStruct93); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct93 {
			index = vdlTypeStruct93.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			if err := x.F11.VDLRead(dec); err != nil {
				return err
			}
		}
	}
}

type VStructDepth1_Error struct {
	F12 error
}

func (VStructDepth1_Error) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_Error"`
}) {
}

func (x VStructDepth1_Error) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_Error{}
}

func (x VStructDepth1_Error) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct94); err != nil {
		return err
	}
	if x.F12 != nil {
		if err := enc.NextField(0); err != nil {
			return err
		}
		if err := verror.VDLWrite(enc, x.F12); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_Error) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_Error{}
	if err := dec.StartValue(vdlTypeStruct94); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct94 {
			index = vdlTypeStruct94.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			if err := verror.VDLRead(dec, &x.F12); err != nil {
				return err
			}
		}
	}
}

type VStructDepth1_Uint16 struct {
	F13 uint16
}

func (VStructDepth1_Uint16) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_Uint16"`
}) {
}

func (x VStructDepth1_Uint16) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_Uint16{}
}

func (x VStructDepth1_Uint16) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct95); err != nil {
		return err
	}
	if x.F13 != 0 {
		if err := enc.NextFieldValueUint(0, vdl.Uint16Type, uint64(x.F13)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_Uint16) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_Uint16{}
	if err := dec.StartValue(vdlTypeStruct95); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct95 {
			index = vdlTypeStruct95.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueUint(16); {
			case err != nil:
				return err
			default:
				x.F13 = uint16(value)
			}
		}
	}
}

type VStructDepth1_VUint16 struct {
	F14 VUint16
}

func (VStructDepth1_VUint16) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VUint16"`
}) {
}

func (x VStructDepth1_VUint16) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VUint16{}
}

func (x VStructDepth1_VUint16) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct96); err != nil {
		return err
	}
	if x.F14 != 0 {
		if err := enc.NextFieldValueUint(0, vdlTypeUint168, uint64(x.F14)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VUint16) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VUint16{}
	if err := dec.StartValue(vdlTypeStruct96); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct96 {
			index = vdlTypeStruct96.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueUint(16); {
			case err != nil:
				return err
			default:
				x.F14 = VUint16(value)
			}
		}
	}
}

type VStructDepth1_Uint32 struct {
	F15 uint32
}

func (VStructDepth1_Uint32) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_Uint32"`
}) {
}

func (x VStructDepth1_Uint32) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_Uint32{}
}

func (x VStructDepth1_Uint32) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct97); err != nil {
		return err
	}
	if x.F15 != 0 {
		if err := enc.NextFieldValueUint(0, vdl.Uint32Type, uint64(x.F15)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_Uint32) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_Uint32{}
	if err := dec.StartValue(vdlTypeStruct97); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct97 {
			index = vdlTypeStruct97.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueUint(32); {
			case err != nil:
				return err
			default:
				x.F15 = uint32(value)
			}
		}
	}
}

type VStructDepth1_VUint32 struct {
	F16 VUint32
}

func (VStructDepth1_VUint32) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VUint32"`
}) {
}

func (x VStructDepth1_VUint32) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VUint32{}
}

func (x VStructDepth1_VUint32) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct98); err != nil {
		return err
	}
	if x.F16 != 0 {
		if err := enc.NextFieldValueUint(0, vdlTypeUint329, uint64(x.F16)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VUint32) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VUint32{}
	if err := dec.StartValue(vdlTypeStruct98); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct98 {
			index = vdlTypeStruct98.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueUint(32); {
			case err != nil:
				return err
			default:
				x.F16 = VUint32(value)
			}
		}
	}
}

type VStructDepth1_Uint64 struct {
	F17 uint64
}

func (VStructDepth1_Uint64) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_Uint64"`
}) {
}

func (x VStructDepth1_Uint64) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_Uint64{}
}

func (x VStructDepth1_Uint64) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct99); err != nil {
		return err
	}
	if x.F17 != 0 {
		if err := enc.NextFieldValueUint(0, vdl.Uint64Type, x.F17); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_Uint64) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_Uint64{}
	if err := dec.StartValue(vdlTypeStruct99); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct99 {
			index = vdlTypeStruct99.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueUint(64); {
			case err != nil:
				return err
			default:
				x.F17 = value
			}
		}
	}
}

type VStructDepth1_VUint64 struct {
	F18 VUint64
}

func (VStructDepth1_VUint64) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VUint64"`
}) {
}

func (x VStructDepth1_VUint64) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VUint64{}
}

func (x VStructDepth1_VUint64) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct100); err != nil {
		return err
	}
	if x.F18 != 0 {
		if err := enc.NextFieldValueUint(0, vdlTypeUint6410, uint64(x.F18)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VUint64) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VUint64{}
	if err := dec.StartValue(vdlTypeStruct100); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct100 {
			index = vdlTypeStruct100.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueUint(64); {
			case err != nil:
				return err
			default:
				x.F18 = VUint64(value)
			}
		}
	}
}

type VStructDepth1_Int8 struct {
	F19 int8
}

func (VStructDepth1_Int8) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_Int8"`
}) {
}

func (x VStructDepth1_Int8) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_Int8{}
}

func (x VStructDepth1_Int8) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct101); err != nil {
		return err
	}
	if x.F19 != 0 {
		if err := enc.NextFieldValueInt(0, vdl.Int8Type, int64(x.F19)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_Int8) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_Int8{}
	if err := dec.StartValue(vdlTypeStruct101); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct101 {
			index = vdlTypeStruct101.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueInt(8); {
			case err != nil:
				return err
			default:
				x.F19 = int8(value)
			}
		}
	}
}

type VStructDepth1_VInt8 struct {
	F20 VInt8
}

func (VStructDepth1_VInt8) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VInt8"`
}) {
}

func (x VStructDepth1_VInt8) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VInt8{}
}

func (x VStructDepth1_VInt8) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct102); err != nil {
		return err
	}
	if x.F20 != 0 {
		if err := enc.NextFieldValueInt(0, vdlTypeInt811, int64(x.F20)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VInt8) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VInt8{}
	if err := dec.StartValue(vdlTypeStruct102); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct102 {
			index = vdlTypeStruct102.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueInt(8); {
			case err != nil:
				return err
			default:
				x.F20 = VInt8(value)
			}
		}
	}
}

type VStructDepth1_Int16 struct {
	F21 int16
}

func (VStructDepth1_Int16) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_Int16"`
}) {
}

func (x VStructDepth1_Int16) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_Int16{}
}

func (x VStructDepth1_Int16) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct103); err != nil {
		return err
	}
	if x.F21 != 0 {
		if err := enc.NextFieldValueInt(0, vdl.Int16Type, int64(x.F21)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_Int16) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_Int16{}
	if err := dec.StartValue(vdlTypeStruct103); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct103 {
			index = vdlTypeStruct103.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueInt(16); {
			case err != nil:
				return err
			default:
				x.F21 = int16(value)
			}
		}
	}
}

type VStructDepth1_VInt16 struct {
	F22 VInt16
}

func (VStructDepth1_VInt16) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VInt16"`
}) {
}

func (x VStructDepth1_VInt16) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VInt16{}
}

func (x VStructDepth1_VInt16) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct104); err != nil {
		return err
	}
	if x.F22 != 0 {
		if err := enc.NextFieldValueInt(0, vdlTypeInt1612, int64(x.F22)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VInt16) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VInt16{}
	if err := dec.StartValue(vdlTypeStruct104); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct104 {
			index = vdlTypeStruct104.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueInt(16); {
			case err != nil:
				return err
			default:
				x.F22 = VInt16(value)
			}
		}
	}
}

type VStructDepth1_Int32 struct {
	F23 int32
}

func (VStructDepth1_Int32) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_Int32"`
}) {
}

func (x VStructDepth1_Int32) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_Int32{}
}

func (x VStructDepth1_Int32) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct105); err != nil {
		return err
	}
	if x.F23 != 0 {
		if err := enc.NextFieldValueInt(0, vdl.Int32Type, int64(x.F23)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_Int32) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_Int32{}
	if err := dec.StartValue(vdlTypeStruct105); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct105 {
			index = vdlTypeStruct105.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueInt(32); {
			case err != nil:
				return err
			default:
				x.F23 = int32(value)
			}
		}
	}
}

type VStructDepth1_VInt32 struct {
	F24 VInt32
}

func (VStructDepth1_VInt32) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VInt32"`
}) {
}

func (x VStructDepth1_VInt32) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VInt32{}
}

func (x VStructDepth1_VInt32) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct106); err != nil {
		return err
	}
	if x.F24 != 0 {
		if err := enc.NextFieldValueInt(0, vdlTypeInt3213, int64(x.F24)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VInt32) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VInt32{}
	if err := dec.StartValue(vdlTypeStruct106); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct106 {
			index = vdlTypeStruct106.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueInt(32); {
			case err != nil:
				return err
			default:
				x.F24 = VInt32(value)
			}
		}
	}
}

type VStructDepth1_Int64 struct {
	F25 int64
}

func (VStructDepth1_Int64) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_Int64"`
}) {
}

func (x VStructDepth1_Int64) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_Int64{}
}

func (x VStructDepth1_Int64) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct107); err != nil {
		return err
	}
	if x.F25 != 0 {
		if err := enc.NextFieldValueInt(0, vdl.Int64Type, x.F25); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_Int64) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_Int64{}
	if err := dec.StartValue(vdlTypeStruct107); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct107 {
			index = vdlTypeStruct107.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueInt(64); {
			case err != nil:
				return err
			default:
				x.F25 = value
			}
		}
	}
}

type VStructDepth1_VInt64 struct {
	F26 VInt64
}

func (VStructDepth1_VInt64) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VInt64"`
}) {
}

func (x VStructDepth1_VInt64) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VInt64{}
}

func (x VStructDepth1_VInt64) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct108); err != nil {
		return err
	}
	if x.F26 != 0 {
		if err := enc.NextFieldValueInt(0, vdlTypeInt6414, int64(x.F26)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VInt64) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VInt64{}
	if err := dec.StartValue(vdlTypeStruct108); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct108 {
			index = vdlTypeStruct108.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueInt(64); {
			case err != nil:
				return err
			default:
				x.F26 = VInt64(value)
			}
		}
	}
}

type VStructDepth1_Float32 struct {
	F27 float32
}

func (VStructDepth1_Float32) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_Float32"`
}) {
}

func (x VStructDepth1_Float32) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_Float32{}
}

func (x VStructDepth1_Float32) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct109); err != nil {
		return err
	}
	if x.F27 != 0 {
		if err := enc.NextFieldValueFloat(0, vdl.Float32Type, float64(x.F27)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_Float32) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_Float32{}
	if err := dec.StartValue(vdlTypeStruct109); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct109 {
			index = vdlTypeStruct109.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueFloat(32); {
			case err != nil:
				return err
			default:
				x.F27 = float32(value)
			}
		}
	}
}

type VStructDepth1_VFloat32 struct {
	F28 VFloat32
}

func (VStructDepth1_VFloat32) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VFloat32"`
}) {
}

func (x VStructDepth1_VFloat32) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VFloat32{}
}

func (x VStructDepth1_VFloat32) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct110); err != nil {
		return err
	}
	if x.F28 != 0 {
		if err := enc.NextFieldValueFloat(0, vdlTypeFloat3215, float64(x.F28)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VFloat32) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VFloat32{}
	if err := dec.StartValue(vdlTypeStruct110); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct110 {
			index = vdlTypeStruct110.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueFloat(32); {
			case err != nil:
				return err
			default:
				x.F28 = VFloat32(value)
			}
		}
	}
}

type VStructDepth1_Float64 struct {
	F29 float64
}

func (VStructDepth1_Float64) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_Float64"`
}) {
}

func (x VStructDepth1_Float64) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_Float64{}
}

func (x VStructDepth1_Float64) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct111); err != nil {
		return err
	}
	if x.F29 != 0 {
		if err := enc.NextFieldValueFloat(0, vdl.Float64Type, x.F29); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_Float64) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_Float64{}
	if err := dec.StartValue(vdlTypeStruct111); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct111 {
			index = vdlTypeStruct111.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueFloat(64); {
			case err != nil:
				return err
			default:
				x.F29 = value
			}
		}
	}
}

type VStructDepth1_VFloat64 struct {
	F30 VFloat64
}

func (VStructDepth1_VFloat64) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_VFloat64"`
}) {
}

func (x VStructDepth1_VFloat64) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_VFloat64{}
}

func (x VStructDepth1_VFloat64) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct112); err != nil {
		return err
	}
	if x.F30 != 0 {
		if err := enc.NextFieldValueFloat(0, vdlTypeFloat6416, float64(x.F30)); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_VFloat64) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_VFloat64{}
	if err := dec.StartValue(vdlTypeStruct112); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct112 {
			index = vdlTypeStruct112.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			switch value, err := dec.ReadValueFloat(64); {
			case err != nil:
				return err
			default:
				x.F30 = VFloat64(value)
			}
		}
	}
}

type VStructDepth1_OptVStructEmpty struct {
	F31 *VStructEmpty
}

func (VStructDepth1_OptVStructEmpty) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_OptVStructEmpty"`
}) {
}

func (x VStructDepth1_OptVStructEmpty) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_OptVStructEmpty{}
}

func (x VStructDepth1_OptVStructEmpty) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct113); err != nil {
		return err
	}
	if x.F31 != nil {
		if err := enc.NextField(0); err != nil {
			return err
		}
		enc.SetNextStartValueIsOptional()
		if err := x.F31.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_OptVStructEmpty) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_OptVStructEmpty{}
	if err := dec.StartValue(vdlTypeStruct113); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct113 {
			index = vdlTypeStruct113.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			if err := dec.StartValue(vdlTypeOptional34); err != nil {
				return err
			}
			if dec.IsNil() {
				x.F31 = nil
				if err := dec.FinishValue(); err != nil {
					return err
				}
			} else {
				x.F31 = new(VStructEmpty)
				dec.IgnoreNextStartValue()
				if err := x.F31.VDLRead(dec); err != nil {
					return err
				}
			}
		}
	}
}

type VStructDepth1_OptVNamedError struct {
	F32 *VNamedError
}

func (VStructDepth1_OptVNamedError) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VStructDepth1_OptVNamedError"`
}) {
}

func (x VStructDepth1_OptVNamedError) VDLIsZero() bool { //nolint:gocyclo
	return x == VStructDepth1_OptVNamedError{}
}

func (x VStructDepth1_OptVNamedError) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeStruct114); err != nil {
		return err
	}
	if x.F32 != nil {
		if err := enc.NextField(0); err != nil {
			return err
		}
		enc.SetNextStartValueIsOptional()
		if err := x.F32.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_OptVNamedError) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	*x = VStructDepth1_OptVNamedError{}
	if err := dec.StartValue(vdlTypeStruct114); err != nil {
		return err
	}
	decType := dec.Type()
	for {
		index, err := dec.NextField()
		switch {
		case err != nil:
			return err
		case index == -1:
			return dec.FinishValue()
		}
		if decType != vdlTypeStruct114 {
			index = vdlTypeStruct114.FieldIndexByName(decType.Field(index).Name)
			if index == -1 {
				if err := dec.SkipValue(); err != nil {
					return err
				}
				continue
			}
		}
		if index == 0 {

			if err := dec.StartValue(vdlTypeOptional36); err != nil {
				return err
			}
			if dec.IsNil() {
				x.F32 = nil
				if err := dec.FinishValue(); err != nil {
					return err
				}
			} else {
				x.F32 = new(VNamedError)
				dec.IgnoreNextStartValue()
				if err := x.F32.VDLRead(dec); err != nil {
					return err
				}
			}
		}
	}
}

type (
	// VUnionDepth1_All represents any single field of the VUnionDepth1_All union type.
	VUnionDepth1_All interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_All union type.
		VDLReflect(vdlVUnionDepth1_AllReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_AllF0 represents field F0 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF0 struct{ Value *vom.RawBytes }
	// VUnionDepth1_AllF1 represents field F1 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF1 struct{ Value bool }
	// VUnionDepth1_AllF2 represents field F2 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF2 struct{ Value VBool }
	// VUnionDepth1_AllF3 represents field F3 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF3 struct{ Value string }
	// VUnionDepth1_AllF4 represents field F4 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF4 struct{ Value VString }
	// VUnionDepth1_AllF5 represents field F5 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF5 struct{ Value *vdl.Type }
	// VUnionDepth1_AllF6 represents field F6 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF6 struct{ Value byte }
	// VUnionDepth1_AllF7 represents field F7 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF7 struct{ Value VByte }
	// VUnionDepth1_AllF8 represents field F8 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF8 struct{ Value VEnumAbc }
	// VUnionDepth1_AllF9 represents field F9 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF9 struct{ Value VEnumBcd }
	// VUnionDepth1_AllF10 represents field F10 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF10 struct{ Value VStructEmpty }
	// VUnionDepth1_AllF11 represents field F11 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF11 struct{ Value VNamedError }
	// VUnionDepth1_AllF12 represents field F12 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF12 struct{ Value error }
	// VUnionDepth1_AllF13 represents field F13 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF13 struct{ Value uint16 }
	// VUnionDepth1_AllF14 represents field F14 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF14 struct{ Value VUint16 }
	// VUnionDepth1_AllF15 represents field F15 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF15 struct{ Value uint32 }
	// VUnionDepth1_AllF16 represents field F16 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF16 struct{ Value VUint32 }
	// VUnionDepth1_AllF17 represents field F17 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF17 struct{ Value uint64 }
	// VUnionDepth1_AllF18 represents field F18 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF18 struct{ Value VUint64 }
	// VUnionDepth1_AllF19 represents field F19 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF19 struct{ Value int8 }
	// VUnionDepth1_AllF20 represents field F20 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF20 struct{ Value VInt8 }
	// VUnionDepth1_AllF21 represents field F21 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF21 struct{ Value int16 }
	// VUnionDepth1_AllF22 represents field F22 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF22 struct{ Value VInt16 }
	// VUnionDepth1_AllF23 represents field F23 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF23 struct{ Value int32 }
	// VUnionDepth1_AllF24 represents field F24 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF24 struct{ Value VInt32 }
	// VUnionDepth1_AllF25 represents field F25 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF25 struct{ Value int64 }
	// VUnionDepth1_AllF26 represents field F26 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF26 struct{ Value VInt64 }
	// VUnionDepth1_AllF27 represents field F27 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF27 struct{ Value float32 }
	// VUnionDepth1_AllF28 represents field F28 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF28 struct{ Value VFloat32 }
	// VUnionDepth1_AllF29 represents field F29 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF29 struct{ Value float64 }
	// VUnionDepth1_AllF30 represents field F30 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF30 struct{ Value VFloat64 }
	// VUnionDepth1_AllF31 represents field F31 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF31 struct{ Value *VStructEmpty }
	// VUnionDepth1_AllF32 represents field F32 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF32 struct{ Value *VNamedError }
	// vdlVUnionDepth1_AllReflect describes the VUnionDepth1_All union type.
	vdlVUnionDepth1_AllReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_All"`
		Type  VUnionDepth1_All
		Union struct {
			F0  VUnionDepth1_AllF0
			F1  VUnionDepth1_AllF1
			F2  VUnionDepth1_AllF2
			F3  VUnionDepth1_AllF3
			F4  VUnionDepth1_AllF4
			F5  VUnionDepth1_AllF5
			F6  VUnionDepth1_AllF6
			F7  VUnionDepth1_AllF7
			F8  VUnionDepth1_AllF8
			F9  VUnionDepth1_AllF9
			F10 VUnionDepth1_AllF10
			F11 VUnionDepth1_AllF11
			F12 VUnionDepth1_AllF12
			F13 VUnionDepth1_AllF13
			F14 VUnionDepth1_AllF14
			F15 VUnionDepth1_AllF15
			F16 VUnionDepth1_AllF16
			F17 VUnionDepth1_AllF17
			F18 VUnionDepth1_AllF18
			F19 VUnionDepth1_AllF19
			F20 VUnionDepth1_AllF20
			F21 VUnionDepth1_AllF21
			F22 VUnionDepth1_AllF22
			F23 VUnionDepth1_AllF23
			F24 VUnionDepth1_AllF24
			F25 VUnionDepth1_AllF25
			F26 VUnionDepth1_AllF26
			F27 VUnionDepth1_AllF27
			F28 VUnionDepth1_AllF28
			F29 VUnionDepth1_AllF29
			F30 VUnionDepth1_AllF30
			F31 VUnionDepth1_AllF31
			F32 VUnionDepth1_AllF32
		}
	}
)

func (x VUnionDepth1_AllF0) Index() int                            { return 0 }
func (x VUnionDepth1_AllF0) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF0) Name() string                          { return "F0" }
func (x VUnionDepth1_AllF0) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF1) Index() int                            { return 1 }
func (x VUnionDepth1_AllF1) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF1) Name() string                          { return "F1" }
func (x VUnionDepth1_AllF1) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF2) Index() int                            { return 2 }
func (x VUnionDepth1_AllF2) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF2) Name() string                          { return "F2" }
func (x VUnionDepth1_AllF2) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF3) Index() int                            { return 3 }
func (x VUnionDepth1_AllF3) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF3) Name() string                          { return "F3" }
func (x VUnionDepth1_AllF3) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF4) Index() int                            { return 4 }
func (x VUnionDepth1_AllF4) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF4) Name() string                          { return "F4" }
func (x VUnionDepth1_AllF4) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF5) Index() int                            { return 5 }
func (x VUnionDepth1_AllF5) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF5) Name() string                          { return "F5" }
func (x VUnionDepth1_AllF5) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF6) Index() int                            { return 6 }
func (x VUnionDepth1_AllF6) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF6) Name() string                          { return "F6" }
func (x VUnionDepth1_AllF6) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF7) Index() int                            { return 7 }
func (x VUnionDepth1_AllF7) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF7) Name() string                          { return "F7" }
func (x VUnionDepth1_AllF7) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF8) Index() int                            { return 8 }
func (x VUnionDepth1_AllF8) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF8) Name() string                          { return "F8" }
func (x VUnionDepth1_AllF8) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF9) Index() int                            { return 9 }
func (x VUnionDepth1_AllF9) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF9) Name() string                          { return "F9" }
func (x VUnionDepth1_AllF9) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF10) Index() int                            { return 10 }
func (x VUnionDepth1_AllF10) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF10) Name() string                          { return "F10" }
func (x VUnionDepth1_AllF10) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF11) Index() int                            { return 11 }
func (x VUnionDepth1_AllF11) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF11) Name() string                          { return "F11" }
func (x VUnionDepth1_AllF11) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF12) Index() int                            { return 12 }
func (x VUnionDepth1_AllF12) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF12) Name() string                          { return "F12" }
func (x VUnionDepth1_AllF12) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF13) Index() int                            { return 13 }
func (x VUnionDepth1_AllF13) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF13) Name() string                          { return "F13" }
func (x VUnionDepth1_AllF13) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF14) Index() int                            { return 14 }
func (x VUnionDepth1_AllF14) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF14) Name() string                          { return "F14" }
func (x VUnionDepth1_AllF14) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF15) Index() int                            { return 15 }
func (x VUnionDepth1_AllF15) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF15) Name() string                          { return "F15" }
func (x VUnionDepth1_AllF15) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF16) Index() int                            { return 16 }
func (x VUnionDepth1_AllF16) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF16) Name() string                          { return "F16" }
func (x VUnionDepth1_AllF16) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF17) Index() int                            { return 17 }
func (x VUnionDepth1_AllF17) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF17) Name() string                          { return "F17" }
func (x VUnionDepth1_AllF17) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF18) Index() int                            { return 18 }
func (x VUnionDepth1_AllF18) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF18) Name() string                          { return "F18" }
func (x VUnionDepth1_AllF18) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF19) Index() int                            { return 19 }
func (x VUnionDepth1_AllF19) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF19) Name() string                          { return "F19" }
func (x VUnionDepth1_AllF19) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF20) Index() int                            { return 20 }
func (x VUnionDepth1_AllF20) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF20) Name() string                          { return "F20" }
func (x VUnionDepth1_AllF20) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF21) Index() int                            { return 21 }
func (x VUnionDepth1_AllF21) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF21) Name() string                          { return "F21" }
func (x VUnionDepth1_AllF21) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF22) Index() int                            { return 22 }
func (x VUnionDepth1_AllF22) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF22) Name() string                          { return "F22" }
func (x VUnionDepth1_AllF22) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF23) Index() int                            { return 23 }
func (x VUnionDepth1_AllF23) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF23) Name() string                          { return "F23" }
func (x VUnionDepth1_AllF23) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF24) Index() int                            { return 24 }
func (x VUnionDepth1_AllF24) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF24) Name() string                          { return "F24" }
func (x VUnionDepth1_AllF24) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF25) Index() int                            { return 25 }
func (x VUnionDepth1_AllF25) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF25) Name() string                          { return "F25" }
func (x VUnionDepth1_AllF25) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF26) Index() int                            { return 26 }
func (x VUnionDepth1_AllF26) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF26) Name() string                          { return "F26" }
func (x VUnionDepth1_AllF26) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF27) Index() int                            { return 27 }
func (x VUnionDepth1_AllF27) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF27) Name() string                          { return "F27" }
func (x VUnionDepth1_AllF27) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF28) Index() int                            { return 28 }
func (x VUnionDepth1_AllF28) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF28) Name() string                          { return "F28" }
func (x VUnionDepth1_AllF28) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF29) Index() int                            { return 29 }
func (x VUnionDepth1_AllF29) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF29) Name() string                          { return "F29" }
func (x VUnionDepth1_AllF29) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF30) Index() int                            { return 30 }
func (x VUnionDepth1_AllF30) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF30) Name() string                          { return "F30" }
func (x VUnionDepth1_AllF30) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF31) Index() int                            { return 31 }
func (x VUnionDepth1_AllF31) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF31) Name() string                          { return "F31" }
func (x VUnionDepth1_AllF31) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF32) Index() int                            { return 32 }
func (x VUnionDepth1_AllF32) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AllF32) Name() string                          { return "F32" }
func (x VUnionDepth1_AllF32) VDLReflect(vdlVUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF0) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == nil || x.Value.VDLIsZero()
}

func (x VUnionDepth1_AllF1) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF2) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF3) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF4) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF5) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF6) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF7) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF8) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF9) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF10) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF11) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF12) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF13) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF14) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF15) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF16) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF17) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF18) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF19) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF20) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF21) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF22) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF23) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF24) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF25) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF26) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF27) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF28) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF29) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF30) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF31) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF32) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF0) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextField(0); err != nil {
		return err
	}
	if x.Value == nil {
		if err := enc.NilValue(vdl.AnyType); err != nil {
			return err
		}
	} else {
		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF1) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueBool(1, vdl.BoolType, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF2) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueBool(2, vdlTypeBool1, bool(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF3) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueString(3, vdl.StringType, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF4) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueString(4, vdlTypeString2, string(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF5) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueTypeObject(5, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF6) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(6, vdl.ByteType, uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF7) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(7, vdlTypeByte3, uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF8) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueString(8, vdlTypeEnum4, x.Value.String()); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF9) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueString(9, vdlTypeEnum5, x.Value.String()); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF10) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextField(10); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF11) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextField(11); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF12) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextField(12); err != nil {
		return err
	}
	if err := verror.VDLWrite(enc, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF13) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(13, vdl.Uint16Type, uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF14) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(14, vdlTypeUint168, uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF15) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(15, vdl.Uint32Type, uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF16) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(16, vdlTypeUint329, uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF17) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(17, vdl.Uint64Type, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF18) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(18, vdlTypeUint6410, uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF19) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(19, vdl.Int8Type, int64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF20) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(20, vdlTypeInt811, int64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF21) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(21, vdl.Int16Type, int64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF22) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(22, vdlTypeInt1612, int64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF23) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(23, vdl.Int32Type, int64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF24) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(24, vdlTypeInt3213, int64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF25) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(25, vdl.Int64Type, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF26) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(26, vdlTypeInt6414, int64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF27) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueFloat(27, vdl.Float32Type, float64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF28) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueFloat(28, vdlTypeFloat3215, float64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF29) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueFloat(29, vdl.Float64Type, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF30) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextFieldValueFloat(30, vdlTypeFloat6416, float64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF31) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextField(31); err != nil {
		return err
	}
	if x.Value == nil {
		if err := enc.NilValue(vdlTypeOptional34); err != nil {
			return err
		}
	} else {
		enc.SetNextStartValueIsOptional()
		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF32) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	if err := enc.NextField(32); err != nil {
		return err
	}
	if x.Value == nil {
		if err := enc.NilValue(vdlTypeOptional36); err != nil {
			return err
		}
	} else {
		enc.SetNextStartValueIsOptional()
		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_All(dec vdl.Decoder, x *VUnionDepth1_All) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion115); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion115 {
		name := decType.Field(index).Name
		index = vdlTypeUnion115.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	switch index {
	case 0:
		var field VUnionDepth1_AllF0
		field.Value = new(vom.RawBytes)
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case 1:
		var field VUnionDepth1_AllF1
		switch value, err := dec.ReadValueBool(); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	case 2:
		var field VUnionDepth1_AllF2
		switch value, err := dec.ReadValueBool(); {
		case err != nil:
			return err
		default:
			field.Value = VBool(value)
		}
		*x = field
	case 3:
		var field VUnionDepth1_AllF3
		switch value, err := dec.ReadValueString(); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	case 4:
		var field VUnionDepth1_AllF4
		switch value, err := dec.ReadValueString(); {
		case err != nil:
			return err
		default:
			field.Value = VString(value)
		}
		*x = field
	case 5:
		var field VUnionDepth1_AllF5
		switch value, err := dec.ReadValueTypeObject(); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	case 6:
		var field VUnionDepth1_AllF6
		switch value, err := dec.ReadValueUint(8); {
		case err != nil:
			return err
		default:
			field.Value = byte(value)
		}
		*x = field
	case 7:
		var field VUnionDepth1_AllF7
		switch value, err := dec.ReadValueUint(8); {
		case err != nil:
			return err
		default:
			field.Value = VByte(value)
		}
		*x = field
	case 8:
		var field VUnionDepth1_AllF8
		switch value, err := dec.ReadValueString(); {
		case err != nil:
			return err
		default:
			if err := field.Value.Set(value); err != nil {
				return err
			}
		}
		*x = field
	case 9:
		var field VUnionDepth1_AllF9
		switch value, err := dec.ReadValueString(); {
		case err != nil:
			return err
		default:
			if err := field.Value.Set(value); err != nil {
				return err
			}
		}
		*x = field
	case 10:
		var field VUnionDepth1_AllF10
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case 11:
		var field VUnionDepth1_AllF11
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case 12:
		var field VUnionDepth1_AllF12
		if err := verror.VDLRead(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case 13:
		var field VUnionDepth1_AllF13
		switch value, err := dec.ReadValueUint(16); {
		case err != nil:
			return err
		default:
			field.Value = uint16(value)
		}
		*x = field
	case 14:
		var field VUnionDepth1_AllF14
		switch value, err := dec.ReadValueUint(16); {
		case err != nil:
			return err
		default:
			field.Value = VUint16(value)
		}
		*x = field
	case 15:
		var field VUnionDepth1_AllF15
		switch value, err := dec.ReadValueUint(32); {
		case err != nil:
			return err
		default:
			field.Value = uint32(value)
		}
		*x = field
	case 16:
		var field VUnionDepth1_AllF16
		switch value, err := dec.ReadValueUint(32); {
		case err != nil:
			return err
		default:
			field.Value = VUint32(value)
		}
		*x = field
	case 17:
		var field VUnionDepth1_AllF17
		switch value, err := dec.ReadValueUint(64); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	case 18:
		var field VUnionDepth1_AllF18
		switch value, err := dec.ReadValueUint(64); {
		case err != nil:
			return err
		default:
			field.Value = VUint64(value)
		}
		*x = field
	case 19:
		var field VUnionDepth1_AllF19
		switch value, err := dec.ReadValueInt(8); {
		case err != nil:
			return err
		default:
			field.Value = int8(value)
		}
		*x = field
	case 20:
		var field VUnionDepth1_AllF20
		switch value, err := dec.ReadValueInt(8); {
		case err != nil:
			return err
		default:
			field.Value = VInt8(value)
		}
		*x = field
	case 21:
		var field VUnionDepth1_AllF21
		switch value, err := dec.ReadValueInt(16); {
		case err != nil:
			return err
		default:
			field.Value = int16(value)
		}
		*x = field
	case 22:
		var field VUnionDepth1_AllF22
		switch value, err := dec.ReadValueInt(16); {
		case err != nil:
			return err
		default:
			field.Value = VInt16(value)
		}
		*x = field
	case 23:
		var field VUnionDepth1_AllF23
		switch value, err := dec.ReadValueInt(32); {
		case err != nil:
			return err
		default:
			field.Value = int32(value)
		}
		*x = field
	case 24:
		var field VUnionDepth1_AllF24
		switch value, err := dec.ReadValueInt(32); {
		case err != nil:
			return err
		default:
			field.Value = VInt32(value)
		}
		*x = field
	case 25:
		var field VUnionDepth1_AllF25
		switch value, err := dec.ReadValueInt(64); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	case 26:
		var field VUnionDepth1_AllF26
		switch value, err := dec.ReadValueInt(64); {
		case err != nil:
			return err
		default:
			field.Value = VInt64(value)
		}
		*x = field
	case 27:
		var field VUnionDepth1_AllF27
		switch value, err := dec.ReadValueFloat(32); {
		case err != nil:
			return err
		default:
			field.Value = float32(value)
		}
		*x = field
	case 28:
		var field VUnionDepth1_AllF28
		switch value, err := dec.ReadValueFloat(32); {
		case err != nil:
			return err
		default:
			field.Value = VFloat32(value)
		}
		*x = field
	case 29:
		var field VUnionDepth1_AllF29
		switch value, err := dec.ReadValueFloat(64); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	case 30:
		var field VUnionDepth1_AllF30
		switch value, err := dec.ReadValueFloat(64); {
		case err != nil:
			return err
		default:
			field.Value = VFloat64(value)
		}
		*x = field
	case 31:
		var field VUnionDepth1_AllF31
		if err := dec.StartValue(vdlTypeOptional34); err != nil {
			return err
		}
		if dec.IsNil() {
			field.Value = nil
			if err := dec.FinishValue(); err != nil {
				return err
			}
		} else {
			field.Value = new(VStructEmpty)
			dec.IgnoreNextStartValue()
			if err := field.Value.VDLRead(dec); err != nil {
				return err
			}
		}
		*x = field
	case 32:
		var field VUnionDepth1_AllF32
		if err := dec.StartValue(vdlTypeOptional36); err != nil {
			return err
		}
		if dec.IsNil() {
			field.Value = nil
			if err := dec.FinishValue(); err != nil {
				return err
			}
		} else {
			field.Value = new(VNamedError)
			dec.IgnoreNextStartValue()
			if err := field.Value.VDLRead(dec); err != nil {
				return err
			}
		}
		*x = field
	}
	switch index, err := dec.NextField(); {
	case err != nil:
		return err
	case index != -1:
		return fmt.Errorf("extra field %d in union %T, from %v", index, x, dec.Type())
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_Any represents any single field of the VUnionDepth1_Any union type.
	VUnionDepth1_Any interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_Any union type.
		VDLReflect(vdlVUnionDepth1_AnyReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_AnyF0 represents field F0 of the VUnionDepth1_Any union type.
	VUnionDepth1_AnyF0 struct{ Value *vom.RawBytes }
	// vdlVUnionDepth1_AnyReflect describes the VUnionDepth1_Any union type.
	vdlVUnionDepth1_AnyReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_Any"`
		Type  VUnionDepth1_Any
		Union struct {
			F0 VUnionDepth1_AnyF0
		}
	}
)

func (x VUnionDepth1_AnyF0) Index() int                            { return 0 }
func (x VUnionDepth1_AnyF0) Interface() interface{}                { return x.Value }
func (x VUnionDepth1_AnyF0) Name() string                          { return "F0" }
func (x VUnionDepth1_AnyF0) VDLReflect(vdlVUnionDepth1_AnyReflect) {}

func (x VUnionDepth1_AnyF0) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == nil || x.Value.VDLIsZero()
}

func (x VUnionDepth1_AnyF0) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion116); err != nil {
		return err
	}
	if err := enc.NextField(0); err != nil {
		return err
	}
	if x.Value == nil {
		if err := enc.NilValue(vdl.AnyType); err != nil {
			return err
		}
	} else {
		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_Any(dec vdl.Decoder, x *VUnionDepth1_Any) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion116); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion116 {
		name := decType.Field(index).Name
		index = vdlTypeUnion116.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_AnyF0
		field.Value = new(vom.RawBytes)
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_Bool represents any single field of the VUnionDepth1_Bool union type.
	VUnionDepth1_Bool interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_Bool union type.
		VDLReflect(vdlVUnionDepth1_BoolReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_BoolF1 represents field F1 of the VUnionDepth1_Bool union type.
	VUnionDepth1_BoolF1 struct{ Value bool }
	// vdlVUnionDepth1_BoolReflect describes the VUnionDepth1_Bool union type.
	vdlVUnionDepth1_BoolReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_Bool"`
		Type  VUnionDepth1_Bool
		Union struct {
			F1 VUnionDepth1_BoolF1
		}
	}
)

func (x VUnionDepth1_BoolF1) Index() int                             { return 0 }
func (x VUnionDepth1_BoolF1) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_BoolF1) Name() string                           { return "F1" }
func (x VUnionDepth1_BoolF1) VDLReflect(vdlVUnionDepth1_BoolReflect) {}

func (x VUnionDepth1_BoolF1) VDLIsZero() bool { //nolint:gocyclo
	return !x.Value
}

func (x VUnionDepth1_BoolF1) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion117); err != nil {
		return err
	}
	if err := enc.NextFieldValueBool(0, vdl.BoolType, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_Bool(dec vdl.Decoder, x *VUnionDepth1_Bool) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion117); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion117 {
		name := decType.Field(index).Name
		index = vdlTypeUnion117.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_BoolF1
		switch value, err := dec.ReadValueBool(); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VBool represents any single field of the VUnionDepth1_VBool union type.
	VUnionDepth1_VBool interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VBool union type.
		VDLReflect(vdlVUnionDepth1_VBoolReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VBoolF2 represents field F2 of the VUnionDepth1_VBool union type.
	VUnionDepth1_VBoolF2 struct{ Value VBool }
	// vdlVUnionDepth1_VBoolReflect describes the VUnionDepth1_VBool union type.
	vdlVUnionDepth1_VBoolReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VBool"`
		Type  VUnionDepth1_VBool
		Union struct {
			F2 VUnionDepth1_VBoolF2
		}
	}
)

func (x VUnionDepth1_VBoolF2) Index() int                              { return 0 }
func (x VUnionDepth1_VBoolF2) Interface() interface{}                  { return x.Value }
func (x VUnionDepth1_VBoolF2) Name() string                            { return "F2" }
func (x VUnionDepth1_VBoolF2) VDLReflect(vdlVUnionDepth1_VBoolReflect) {}

func (x VUnionDepth1_VBoolF2) VDLIsZero() bool { //nolint:gocyclo
	return bool(!x.Value)
}

func (x VUnionDepth1_VBoolF2) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion118); err != nil {
		return err
	}
	if err := enc.NextFieldValueBool(0, vdlTypeBool1, bool(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VBool(dec vdl.Decoder, x *VUnionDepth1_VBool) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion118); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion118 {
		name := decType.Field(index).Name
		index = vdlTypeUnion118.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VBoolF2
		switch value, err := dec.ReadValueBool(); {
		case err != nil:
			return err
		default:
			field.Value = VBool(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_String represents any single field of the VUnionDepth1_String union type.
	VUnionDepth1_String interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_String union type.
		VDLReflect(vdlVUnionDepth1_StringReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_StringF3 represents field F3 of the VUnionDepth1_String union type.
	VUnionDepth1_StringF3 struct{ Value string }
	// vdlVUnionDepth1_StringReflect describes the VUnionDepth1_String union type.
	vdlVUnionDepth1_StringReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_String"`
		Type  VUnionDepth1_String
		Union struct {
			F3 VUnionDepth1_StringF3
		}
	}
)

func (x VUnionDepth1_StringF3) Index() int                               { return 0 }
func (x VUnionDepth1_StringF3) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_StringF3) Name() string                             { return "F3" }
func (x VUnionDepth1_StringF3) VDLReflect(vdlVUnionDepth1_StringReflect) {}

func (x VUnionDepth1_StringF3) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == ""
}

func (x VUnionDepth1_StringF3) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion119); err != nil {
		return err
	}
	if err := enc.NextFieldValueString(0, vdl.StringType, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_String(dec vdl.Decoder, x *VUnionDepth1_String) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion119); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion119 {
		name := decType.Field(index).Name
		index = vdlTypeUnion119.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_StringF3
		switch value, err := dec.ReadValueString(); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VString represents any single field of the VUnionDepth1_VString union type.
	VUnionDepth1_VString interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VString union type.
		VDLReflect(vdlVUnionDepth1_VStringReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VStringF4 represents field F4 of the VUnionDepth1_VString union type.
	VUnionDepth1_VStringF4 struct{ Value VString }
	// vdlVUnionDepth1_VStringReflect describes the VUnionDepth1_VString union type.
	vdlVUnionDepth1_VStringReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VString"`
		Type  VUnionDepth1_VString
		Union struct {
			F4 VUnionDepth1_VStringF4
		}
	}
)

func (x VUnionDepth1_VStringF4) Index() int                                { return 0 }
func (x VUnionDepth1_VStringF4) Interface() interface{}                    { return x.Value }
func (x VUnionDepth1_VStringF4) Name() string                              { return "F4" }
func (x VUnionDepth1_VStringF4) VDLReflect(vdlVUnionDepth1_VStringReflect) {}

func (x VUnionDepth1_VStringF4) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == ""
}

func (x VUnionDepth1_VStringF4) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion120); err != nil {
		return err
	}
	if err := enc.NextFieldValueString(0, vdlTypeString2, string(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VString(dec vdl.Decoder, x *VUnionDepth1_VString) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion120); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion120 {
		name := decType.Field(index).Name
		index = vdlTypeUnion120.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VStringF4
		switch value, err := dec.ReadValueString(); {
		case err != nil:
			return err
		default:
			field.Value = VString(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_TypeObject represents any single field of the VUnionDepth1_TypeObject union type.
	VUnionDepth1_TypeObject interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_TypeObject union type.
		VDLReflect(vdlVUnionDepth1_TypeObjectReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_TypeObjectF5 represents field F5 of the VUnionDepth1_TypeObject union type.
	VUnionDepth1_TypeObjectF5 struct{ Value *vdl.Type }
	// vdlVUnionDepth1_TypeObjectReflect describes the VUnionDepth1_TypeObject union type.
	vdlVUnionDepth1_TypeObjectReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_TypeObject"`
		Type  VUnionDepth1_TypeObject
		Union struct {
			F5 VUnionDepth1_TypeObjectF5
		}
	}
)

func (x VUnionDepth1_TypeObjectF5) Index() int                                   { return 0 }
func (x VUnionDepth1_TypeObjectF5) Interface() interface{}                       { return x.Value }
func (x VUnionDepth1_TypeObjectF5) Name() string                                 { return "F5" }
func (x VUnionDepth1_TypeObjectF5) VDLReflect(vdlVUnionDepth1_TypeObjectReflect) {}

func (x VUnionDepth1_TypeObjectF5) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == nil || x.Value == vdl.AnyType
}

func (x VUnionDepth1_TypeObjectF5) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion121); err != nil {
		return err
	}
	if err := enc.NextFieldValueTypeObject(0, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_TypeObject(dec vdl.Decoder, x *VUnionDepth1_TypeObject) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion121); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion121 {
		name := decType.Field(index).Name
		index = vdlTypeUnion121.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_TypeObjectF5
		switch value, err := dec.ReadValueTypeObject(); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_Byte represents any single field of the VUnionDepth1_Byte union type.
	VUnionDepth1_Byte interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_Byte union type.
		VDLReflect(vdlVUnionDepth1_ByteReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_ByteF6 represents field F6 of the VUnionDepth1_Byte union type.
	VUnionDepth1_ByteF6 struct{ Value byte }
	// vdlVUnionDepth1_ByteReflect describes the VUnionDepth1_Byte union type.
	vdlVUnionDepth1_ByteReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_Byte"`
		Type  VUnionDepth1_Byte
		Union struct {
			F6 VUnionDepth1_ByteF6
		}
	}
)

func (x VUnionDepth1_ByteF6) Index() int                             { return 0 }
func (x VUnionDepth1_ByteF6) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_ByteF6) Name() string                           { return "F6" }
func (x VUnionDepth1_ByteF6) VDLReflect(vdlVUnionDepth1_ByteReflect) {}

func (x VUnionDepth1_ByteF6) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_ByteF6) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion122); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(0, vdl.ByteType, uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_Byte(dec vdl.Decoder, x *VUnionDepth1_Byte) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion122); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion122 {
		name := decType.Field(index).Name
		index = vdlTypeUnion122.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_ByteF6
		switch value, err := dec.ReadValueUint(8); {
		case err != nil:
			return err
		default:
			field.Value = byte(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VByte represents any single field of the VUnionDepth1_VByte union type.
	VUnionDepth1_VByte interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VByte union type.
		VDLReflect(vdlVUnionDepth1_VByteReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VByteF7 represents field F7 of the VUnionDepth1_VByte union type.
	VUnionDepth1_VByteF7 struct{ Value VByte }
	// vdlVUnionDepth1_VByteReflect describes the VUnionDepth1_VByte union type.
	vdlVUnionDepth1_VByteReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VByte"`
		Type  VUnionDepth1_VByte
		Union struct {
			F7 VUnionDepth1_VByteF7
		}
	}
)

func (x VUnionDepth1_VByteF7) Index() int                              { return 0 }
func (x VUnionDepth1_VByteF7) Interface() interface{}                  { return x.Value }
func (x VUnionDepth1_VByteF7) Name() string                            { return "F7" }
func (x VUnionDepth1_VByteF7) VDLReflect(vdlVUnionDepth1_VByteReflect) {}

func (x VUnionDepth1_VByteF7) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_VByteF7) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion123); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(0, vdlTypeByte3, uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VByte(dec vdl.Decoder, x *VUnionDepth1_VByte) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion123); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion123 {
		name := decType.Field(index).Name
		index = vdlTypeUnion123.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VByteF7
		switch value, err := dec.ReadValueUint(8); {
		case err != nil:
			return err
		default:
			field.Value = VByte(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VEnumAbc represents any single field of the VUnionDepth1_VEnumAbc union type.
	VUnionDepth1_VEnumAbc interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VEnumAbc union type.
		VDLReflect(vdlVUnionDepth1_VEnumAbcReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VEnumAbcF8 represents field F8 of the VUnionDepth1_VEnumAbc union type.
	VUnionDepth1_VEnumAbcF8 struct{ Value VEnumAbc }
	// vdlVUnionDepth1_VEnumAbcReflect describes the VUnionDepth1_VEnumAbc union type.
	vdlVUnionDepth1_VEnumAbcReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VEnumAbc"`
		Type  VUnionDepth1_VEnumAbc
		Union struct {
			F8 VUnionDepth1_VEnumAbcF8
		}
	}
)

func (x VUnionDepth1_VEnumAbcF8) Index() int                                 { return 0 }
func (x VUnionDepth1_VEnumAbcF8) Interface() interface{}                     { return x.Value }
func (x VUnionDepth1_VEnumAbcF8) Name() string                               { return "F8" }
func (x VUnionDepth1_VEnumAbcF8) VDLReflect(vdlVUnionDepth1_VEnumAbcReflect) {}

func (x VUnionDepth1_VEnumAbcF8) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == VEnumAbcA
}

func (x VUnionDepth1_VEnumAbcF8) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion124); err != nil {
		return err
	}
	if err := enc.NextFieldValueString(0, vdlTypeEnum4, x.Value.String()); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VEnumAbc(dec vdl.Decoder, x *VUnionDepth1_VEnumAbc) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion124); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion124 {
		name := decType.Field(index).Name
		index = vdlTypeUnion124.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VEnumAbcF8
		switch value, err := dec.ReadValueString(); {
		case err != nil:
			return err
		default:
			if err := field.Value.Set(value); err != nil {
				return err
			}
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VEnumBcd represents any single field of the VUnionDepth1_VEnumBcd union type.
	VUnionDepth1_VEnumBcd interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VEnumBcd union type.
		VDLReflect(vdlVUnionDepth1_VEnumBcdReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VEnumBcdF9 represents field F9 of the VUnionDepth1_VEnumBcd union type.
	VUnionDepth1_VEnumBcdF9 struct{ Value VEnumBcd }
	// vdlVUnionDepth1_VEnumBcdReflect describes the VUnionDepth1_VEnumBcd union type.
	vdlVUnionDepth1_VEnumBcdReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VEnumBcd"`
		Type  VUnionDepth1_VEnumBcd
		Union struct {
			F9 VUnionDepth1_VEnumBcdF9
		}
	}
)

func (x VUnionDepth1_VEnumBcdF9) Index() int                                 { return 0 }
func (x VUnionDepth1_VEnumBcdF9) Interface() interface{}                     { return x.Value }
func (x VUnionDepth1_VEnumBcdF9) Name() string                               { return "F9" }
func (x VUnionDepth1_VEnumBcdF9) VDLReflect(vdlVUnionDepth1_VEnumBcdReflect) {}

func (x VUnionDepth1_VEnumBcdF9) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == VEnumBcdB
}

func (x VUnionDepth1_VEnumBcdF9) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion125); err != nil {
		return err
	}
	if err := enc.NextFieldValueString(0, vdlTypeEnum5, x.Value.String()); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VEnumBcd(dec vdl.Decoder, x *VUnionDepth1_VEnumBcd) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion125); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion125 {
		name := decType.Field(index).Name
		index = vdlTypeUnion125.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VEnumBcdF9
		switch value, err := dec.ReadValueString(); {
		case err != nil:
			return err
		default:
			if err := field.Value.Set(value); err != nil {
				return err
			}
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VStructEmpty represents any single field of the VUnionDepth1_VStructEmpty union type.
	VUnionDepth1_VStructEmpty interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VStructEmpty union type.
		VDLReflect(vdlVUnionDepth1_VStructEmptyReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VStructEmptyF10 represents field F10 of the VUnionDepth1_VStructEmpty union type.
	VUnionDepth1_VStructEmptyF10 struct{ Value VStructEmpty }
	// vdlVUnionDepth1_VStructEmptyReflect describes the VUnionDepth1_VStructEmpty union type.
	vdlVUnionDepth1_VStructEmptyReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VStructEmpty"`
		Type  VUnionDepth1_VStructEmpty
		Union struct {
			F10 VUnionDepth1_VStructEmptyF10
		}
	}
)

func (x VUnionDepth1_VStructEmptyF10) Index() int                                     { return 0 }
func (x VUnionDepth1_VStructEmptyF10) Interface() interface{}                         { return x.Value }
func (x VUnionDepth1_VStructEmptyF10) Name() string                                   { return "F10" }
func (x VUnionDepth1_VStructEmptyF10) VDLReflect(vdlVUnionDepth1_VStructEmptyReflect) {}

func (x VUnionDepth1_VStructEmptyF10) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == VStructEmpty{}
}

func (x VUnionDepth1_VStructEmptyF10) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion126); err != nil {
		return err
	}
	if err := enc.NextField(0); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VStructEmpty(dec vdl.Decoder, x *VUnionDepth1_VStructEmpty) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion126); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion126 {
		name := decType.Field(index).Name
		index = vdlTypeUnion126.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VStructEmptyF10
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VNamedError represents any single field of the VUnionDepth1_VNamedError union type.
	VUnionDepth1_VNamedError interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VNamedError union type.
		VDLReflect(vdlVUnionDepth1_VNamedErrorReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VNamedErrorF11 represents field F11 of the VUnionDepth1_VNamedError union type.
	VUnionDepth1_VNamedErrorF11 struct{ Value VNamedError }
	// vdlVUnionDepth1_VNamedErrorReflect describes the VUnionDepth1_VNamedError union type.
	vdlVUnionDepth1_VNamedErrorReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VNamedError"`
		Type  VUnionDepth1_VNamedError
		Union struct {
			F11 VUnionDepth1_VNamedErrorF11
		}
	}
)

func (x VUnionDepth1_VNamedErrorF11) Index() int                                    { return 0 }
func (x VUnionDepth1_VNamedErrorF11) Interface() interface{}                        { return x.Value }
func (x VUnionDepth1_VNamedErrorF11) Name() string                                  { return "F11" }
func (x VUnionDepth1_VNamedErrorF11) VDLReflect(vdlVUnionDepth1_VNamedErrorReflect) {}

func (x VUnionDepth1_VNamedErrorF11) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == VNamedError{}
}

func (x VUnionDepth1_VNamedErrorF11) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion127); err != nil {
		return err
	}
	if err := enc.NextField(0); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VNamedError(dec vdl.Decoder, x *VUnionDepth1_VNamedError) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion127); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion127 {
		name := decType.Field(index).Name
		index = vdlTypeUnion127.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VNamedErrorF11
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_Error represents any single field of the VUnionDepth1_Error union type.
	VUnionDepth1_Error interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_Error union type.
		VDLReflect(vdlVUnionDepth1_ErrorReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_ErrorF12 represents field F12 of the VUnionDepth1_Error union type.
	VUnionDepth1_ErrorF12 struct{ Value error }
	// vdlVUnionDepth1_ErrorReflect describes the VUnionDepth1_Error union type.
	vdlVUnionDepth1_ErrorReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_Error"`
		Type  VUnionDepth1_Error
		Union struct {
			F12 VUnionDepth1_ErrorF12
		}
	}
)

func (x VUnionDepth1_ErrorF12) Index() int                              { return 0 }
func (x VUnionDepth1_ErrorF12) Interface() interface{}                  { return x.Value }
func (x VUnionDepth1_ErrorF12) Name() string                            { return "F12" }
func (x VUnionDepth1_ErrorF12) VDLReflect(vdlVUnionDepth1_ErrorReflect) {}

func (x VUnionDepth1_ErrorF12) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == nil
}

func (x VUnionDepth1_ErrorF12) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion128); err != nil {
		return err
	}
	if err := enc.NextField(0); err != nil {
		return err
	}
	if err := verror.VDLWrite(enc, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_Error(dec vdl.Decoder, x *VUnionDepth1_Error) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion128); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion128 {
		name := decType.Field(index).Name
		index = vdlTypeUnion128.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_ErrorF12
		if err := verror.VDLRead(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_Uint16 represents any single field of the VUnionDepth1_Uint16 union type.
	VUnionDepth1_Uint16 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_Uint16 union type.
		VDLReflect(vdlVUnionDepth1_Uint16Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_Uint16F13 represents field F13 of the VUnionDepth1_Uint16 union type.
	VUnionDepth1_Uint16F13 struct{ Value uint16 }
	// vdlVUnionDepth1_Uint16Reflect describes the VUnionDepth1_Uint16 union type.
	vdlVUnionDepth1_Uint16Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_Uint16"`
		Type  VUnionDepth1_Uint16
		Union struct {
			F13 VUnionDepth1_Uint16F13
		}
	}
)

func (x VUnionDepth1_Uint16F13) Index() int                               { return 0 }
func (x VUnionDepth1_Uint16F13) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_Uint16F13) Name() string                             { return "F13" }
func (x VUnionDepth1_Uint16F13) VDLReflect(vdlVUnionDepth1_Uint16Reflect) {}

func (x VUnionDepth1_Uint16F13) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_Uint16F13) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion129); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(0, vdl.Uint16Type, uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_Uint16(dec vdl.Decoder, x *VUnionDepth1_Uint16) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion129); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion129 {
		name := decType.Field(index).Name
		index = vdlTypeUnion129.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_Uint16F13
		switch value, err := dec.ReadValueUint(16); {
		case err != nil:
			return err
		default:
			field.Value = uint16(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VUint16 represents any single field of the VUnionDepth1_VUint16 union type.
	VUnionDepth1_VUint16 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VUint16 union type.
		VDLReflect(vdlVUnionDepth1_VUint16Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VUint16F14 represents field F14 of the VUnionDepth1_VUint16 union type.
	VUnionDepth1_VUint16F14 struct{ Value VUint16 }
	// vdlVUnionDepth1_VUint16Reflect describes the VUnionDepth1_VUint16 union type.
	vdlVUnionDepth1_VUint16Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VUint16"`
		Type  VUnionDepth1_VUint16
		Union struct {
			F14 VUnionDepth1_VUint16F14
		}
	}
)

func (x VUnionDepth1_VUint16F14) Index() int                                { return 0 }
func (x VUnionDepth1_VUint16F14) Interface() interface{}                    { return x.Value }
func (x VUnionDepth1_VUint16F14) Name() string                              { return "F14" }
func (x VUnionDepth1_VUint16F14) VDLReflect(vdlVUnionDepth1_VUint16Reflect) {}

func (x VUnionDepth1_VUint16F14) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_VUint16F14) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion130); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(0, vdlTypeUint168, uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VUint16(dec vdl.Decoder, x *VUnionDepth1_VUint16) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion130); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion130 {
		name := decType.Field(index).Name
		index = vdlTypeUnion130.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VUint16F14
		switch value, err := dec.ReadValueUint(16); {
		case err != nil:
			return err
		default:
			field.Value = VUint16(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_Uint32 represents any single field of the VUnionDepth1_Uint32 union type.
	VUnionDepth1_Uint32 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_Uint32 union type.
		VDLReflect(vdlVUnionDepth1_Uint32Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_Uint32F15 represents field F15 of the VUnionDepth1_Uint32 union type.
	VUnionDepth1_Uint32F15 struct{ Value uint32 }
	// vdlVUnionDepth1_Uint32Reflect describes the VUnionDepth1_Uint32 union type.
	vdlVUnionDepth1_Uint32Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_Uint32"`
		Type  VUnionDepth1_Uint32
		Union struct {
			F15 VUnionDepth1_Uint32F15
		}
	}
)

func (x VUnionDepth1_Uint32F15) Index() int                               { return 0 }
func (x VUnionDepth1_Uint32F15) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_Uint32F15) Name() string                             { return "F15" }
func (x VUnionDepth1_Uint32F15) VDLReflect(vdlVUnionDepth1_Uint32Reflect) {}

func (x VUnionDepth1_Uint32F15) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_Uint32F15) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion131); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(0, vdl.Uint32Type, uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_Uint32(dec vdl.Decoder, x *VUnionDepth1_Uint32) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion131); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion131 {
		name := decType.Field(index).Name
		index = vdlTypeUnion131.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_Uint32F15
		switch value, err := dec.ReadValueUint(32); {
		case err != nil:
			return err
		default:
			field.Value = uint32(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VUint32 represents any single field of the VUnionDepth1_VUint32 union type.
	VUnionDepth1_VUint32 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VUint32 union type.
		VDLReflect(vdlVUnionDepth1_VUint32Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VUint32F16 represents field F16 of the VUnionDepth1_VUint32 union type.
	VUnionDepth1_VUint32F16 struct{ Value VUint32 }
	// vdlVUnionDepth1_VUint32Reflect describes the VUnionDepth1_VUint32 union type.
	vdlVUnionDepth1_VUint32Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VUint32"`
		Type  VUnionDepth1_VUint32
		Union struct {
			F16 VUnionDepth1_VUint32F16
		}
	}
)

func (x VUnionDepth1_VUint32F16) Index() int                                { return 0 }
func (x VUnionDepth1_VUint32F16) Interface() interface{}                    { return x.Value }
func (x VUnionDepth1_VUint32F16) Name() string                              { return "F16" }
func (x VUnionDepth1_VUint32F16) VDLReflect(vdlVUnionDepth1_VUint32Reflect) {}

func (x VUnionDepth1_VUint32F16) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_VUint32F16) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion132); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(0, vdlTypeUint329, uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VUint32(dec vdl.Decoder, x *VUnionDepth1_VUint32) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion132); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion132 {
		name := decType.Field(index).Name
		index = vdlTypeUnion132.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VUint32F16
		switch value, err := dec.ReadValueUint(32); {
		case err != nil:
			return err
		default:
			field.Value = VUint32(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_Uint64 represents any single field of the VUnionDepth1_Uint64 union type.
	VUnionDepth1_Uint64 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_Uint64 union type.
		VDLReflect(vdlVUnionDepth1_Uint64Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_Uint64F17 represents field F17 of the VUnionDepth1_Uint64 union type.
	VUnionDepth1_Uint64F17 struct{ Value uint64 }
	// vdlVUnionDepth1_Uint64Reflect describes the VUnionDepth1_Uint64 union type.
	vdlVUnionDepth1_Uint64Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_Uint64"`
		Type  VUnionDepth1_Uint64
		Union struct {
			F17 VUnionDepth1_Uint64F17
		}
	}
)

func (x VUnionDepth1_Uint64F17) Index() int                               { return 0 }
func (x VUnionDepth1_Uint64F17) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_Uint64F17) Name() string                             { return "F17" }
func (x VUnionDepth1_Uint64F17) VDLReflect(vdlVUnionDepth1_Uint64Reflect) {}

func (x VUnionDepth1_Uint64F17) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_Uint64F17) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion133); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(0, vdl.Uint64Type, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_Uint64(dec vdl.Decoder, x *VUnionDepth1_Uint64) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion133); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion133 {
		name := decType.Field(index).Name
		index = vdlTypeUnion133.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_Uint64F17
		switch value, err := dec.ReadValueUint(64); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VUint64 represents any single field of the VUnionDepth1_VUint64 union type.
	VUnionDepth1_VUint64 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VUint64 union type.
		VDLReflect(vdlVUnionDepth1_VUint64Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VUint64F18 represents field F18 of the VUnionDepth1_VUint64 union type.
	VUnionDepth1_VUint64F18 struct{ Value VUint64 }
	// vdlVUnionDepth1_VUint64Reflect describes the VUnionDepth1_VUint64 union type.
	vdlVUnionDepth1_VUint64Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VUint64"`
		Type  VUnionDepth1_VUint64
		Union struct {
			F18 VUnionDepth1_VUint64F18
		}
	}
)

func (x VUnionDepth1_VUint64F18) Index() int                                { return 0 }
func (x VUnionDepth1_VUint64F18) Interface() interface{}                    { return x.Value }
func (x VUnionDepth1_VUint64F18) Name() string                              { return "F18" }
func (x VUnionDepth1_VUint64F18) VDLReflect(vdlVUnionDepth1_VUint64Reflect) {}

func (x VUnionDepth1_VUint64F18) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_VUint64F18) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion134); err != nil {
		return err
	}
	if err := enc.NextFieldValueUint(0, vdlTypeUint6410, uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VUint64(dec vdl.Decoder, x *VUnionDepth1_VUint64) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion134); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion134 {
		name := decType.Field(index).Name
		index = vdlTypeUnion134.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VUint64F18
		switch value, err := dec.ReadValueUint(64); {
		case err != nil:
			return err
		default:
			field.Value = VUint64(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_Int8 represents any single field of the VUnionDepth1_Int8 union type.
	VUnionDepth1_Int8 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_Int8 union type.
		VDLReflect(vdlVUnionDepth1_Int8Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_Int8F19 represents field F19 of the VUnionDepth1_Int8 union type.
	VUnionDepth1_Int8F19 struct{ Value int8 }
	// vdlVUnionDepth1_Int8Reflect describes the VUnionDepth1_Int8 union type.
	vdlVUnionDepth1_Int8Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_Int8"`
		Type  VUnionDepth1_Int8
		Union struct {
			F19 VUnionDepth1_Int8F19
		}
	}
)

func (x VUnionDepth1_Int8F19) Index() int                             { return 0 }
func (x VUnionDepth1_Int8F19) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_Int8F19) Name() string                           { return "F19" }
func (x VUnionDepth1_Int8F19) VDLReflect(vdlVUnionDepth1_Int8Reflect) {}

func (x VUnionDepth1_Int8F19) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_Int8F19) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion135); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(0, vdl.Int8Type, int64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_Int8(dec vdl.Decoder, x *VUnionDepth1_Int8) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion135); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion135 {
		name := decType.Field(index).Name
		index = vdlTypeUnion135.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_Int8F19
		switch value, err := dec.ReadValueInt(8); {
		case err != nil:
			return err
		default:
			field.Value = int8(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VInt8 represents any single field of the VUnionDepth1_VInt8 union type.
	VUnionDepth1_VInt8 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VInt8 union type.
		VDLReflect(vdlVUnionDepth1_VInt8Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VInt8F20 represents field F20 of the VUnionDepth1_VInt8 union type.
	VUnionDepth1_VInt8F20 struct{ Value VInt8 }
	// vdlVUnionDepth1_VInt8Reflect describes the VUnionDepth1_VInt8 union type.
	vdlVUnionDepth1_VInt8Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VInt8"`
		Type  VUnionDepth1_VInt8
		Union struct {
			F20 VUnionDepth1_VInt8F20
		}
	}
)

func (x VUnionDepth1_VInt8F20) Index() int                              { return 0 }
func (x VUnionDepth1_VInt8F20) Interface() interface{}                  { return x.Value }
func (x VUnionDepth1_VInt8F20) Name() string                            { return "F20" }
func (x VUnionDepth1_VInt8F20) VDLReflect(vdlVUnionDepth1_VInt8Reflect) {}

func (x VUnionDepth1_VInt8F20) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_VInt8F20) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion136); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(0, vdlTypeInt811, int64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VInt8(dec vdl.Decoder, x *VUnionDepth1_VInt8) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion136); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion136 {
		name := decType.Field(index).Name
		index = vdlTypeUnion136.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VInt8F20
		switch value, err := dec.ReadValueInt(8); {
		case err != nil:
			return err
		default:
			field.Value = VInt8(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_Int16 represents any single field of the VUnionDepth1_Int16 union type.
	VUnionDepth1_Int16 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_Int16 union type.
		VDLReflect(vdlVUnionDepth1_Int16Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_Int16F21 represents field F21 of the VUnionDepth1_Int16 union type.
	VUnionDepth1_Int16F21 struct{ Value int16 }
	// vdlVUnionDepth1_Int16Reflect describes the VUnionDepth1_Int16 union type.
	vdlVUnionDepth1_Int16Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_Int16"`
		Type  VUnionDepth1_Int16
		Union struct {
			F21 VUnionDepth1_Int16F21
		}
	}
)

func (x VUnionDepth1_Int16F21) Index() int                              { return 0 }
func (x VUnionDepth1_Int16F21) Interface() interface{}                  { return x.Value }
func (x VUnionDepth1_Int16F21) Name() string                            { return "F21" }
func (x VUnionDepth1_Int16F21) VDLReflect(vdlVUnionDepth1_Int16Reflect) {}

func (x VUnionDepth1_Int16F21) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_Int16F21) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion137); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(0, vdl.Int16Type, int64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_Int16(dec vdl.Decoder, x *VUnionDepth1_Int16) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion137); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion137 {
		name := decType.Field(index).Name
		index = vdlTypeUnion137.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_Int16F21
		switch value, err := dec.ReadValueInt(16); {
		case err != nil:
			return err
		default:
			field.Value = int16(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VInt16 represents any single field of the VUnionDepth1_VInt16 union type.
	VUnionDepth1_VInt16 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VInt16 union type.
		VDLReflect(vdlVUnionDepth1_VInt16Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VInt16F22 represents field F22 of the VUnionDepth1_VInt16 union type.
	VUnionDepth1_VInt16F22 struct{ Value VInt16 }
	// vdlVUnionDepth1_VInt16Reflect describes the VUnionDepth1_VInt16 union type.
	vdlVUnionDepth1_VInt16Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VInt16"`
		Type  VUnionDepth1_VInt16
		Union struct {
			F22 VUnionDepth1_VInt16F22
		}
	}
)

func (x VUnionDepth1_VInt16F22) Index() int                               { return 0 }
func (x VUnionDepth1_VInt16F22) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_VInt16F22) Name() string                             { return "F22" }
func (x VUnionDepth1_VInt16F22) VDLReflect(vdlVUnionDepth1_VInt16Reflect) {}

func (x VUnionDepth1_VInt16F22) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_VInt16F22) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion138); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(0, vdlTypeInt1612, int64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VInt16(dec vdl.Decoder, x *VUnionDepth1_VInt16) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion138); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion138 {
		name := decType.Field(index).Name
		index = vdlTypeUnion138.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VInt16F22
		switch value, err := dec.ReadValueInt(16); {
		case err != nil:
			return err
		default:
			field.Value = VInt16(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_Int32 represents any single field of the VUnionDepth1_Int32 union type.
	VUnionDepth1_Int32 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_Int32 union type.
		VDLReflect(vdlVUnionDepth1_Int32Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_Int32F23 represents field F23 of the VUnionDepth1_Int32 union type.
	VUnionDepth1_Int32F23 struct{ Value int32 }
	// vdlVUnionDepth1_Int32Reflect describes the VUnionDepth1_Int32 union type.
	vdlVUnionDepth1_Int32Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_Int32"`
		Type  VUnionDepth1_Int32
		Union struct {
			F23 VUnionDepth1_Int32F23
		}
	}
)

func (x VUnionDepth1_Int32F23) Index() int                              { return 0 }
func (x VUnionDepth1_Int32F23) Interface() interface{}                  { return x.Value }
func (x VUnionDepth1_Int32F23) Name() string                            { return "F23" }
func (x VUnionDepth1_Int32F23) VDLReflect(vdlVUnionDepth1_Int32Reflect) {}

func (x VUnionDepth1_Int32F23) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_Int32F23) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion139); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(0, vdl.Int32Type, int64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_Int32(dec vdl.Decoder, x *VUnionDepth1_Int32) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion139); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion139 {
		name := decType.Field(index).Name
		index = vdlTypeUnion139.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_Int32F23
		switch value, err := dec.ReadValueInt(32); {
		case err != nil:
			return err
		default:
			field.Value = int32(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VInt32 represents any single field of the VUnionDepth1_VInt32 union type.
	VUnionDepth1_VInt32 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VInt32 union type.
		VDLReflect(vdlVUnionDepth1_VInt32Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VInt32F24 represents field F24 of the VUnionDepth1_VInt32 union type.
	VUnionDepth1_VInt32F24 struct{ Value VInt32 }
	// vdlVUnionDepth1_VInt32Reflect describes the VUnionDepth1_VInt32 union type.
	vdlVUnionDepth1_VInt32Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VInt32"`
		Type  VUnionDepth1_VInt32
		Union struct {
			F24 VUnionDepth1_VInt32F24
		}
	}
)

func (x VUnionDepth1_VInt32F24) Index() int                               { return 0 }
func (x VUnionDepth1_VInt32F24) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_VInt32F24) Name() string                             { return "F24" }
func (x VUnionDepth1_VInt32F24) VDLReflect(vdlVUnionDepth1_VInt32Reflect) {}

func (x VUnionDepth1_VInt32F24) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_VInt32F24) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion140); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(0, vdlTypeInt3213, int64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VInt32(dec vdl.Decoder, x *VUnionDepth1_VInt32) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion140); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion140 {
		name := decType.Field(index).Name
		index = vdlTypeUnion140.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VInt32F24
		switch value, err := dec.ReadValueInt(32); {
		case err != nil:
			return err
		default:
			field.Value = VInt32(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_Int64 represents any single field of the VUnionDepth1_Int64 union type.
	VUnionDepth1_Int64 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_Int64 union type.
		VDLReflect(vdlVUnionDepth1_Int64Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_Int64F25 represents field F25 of the VUnionDepth1_Int64 union type.
	VUnionDepth1_Int64F25 struct{ Value int64 }
	// vdlVUnionDepth1_Int64Reflect describes the VUnionDepth1_Int64 union type.
	vdlVUnionDepth1_Int64Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_Int64"`
		Type  VUnionDepth1_Int64
		Union struct {
			F25 VUnionDepth1_Int64F25
		}
	}
)

func (x VUnionDepth1_Int64F25) Index() int                              { return 0 }
func (x VUnionDepth1_Int64F25) Interface() interface{}                  { return x.Value }
func (x VUnionDepth1_Int64F25) Name() string                            { return "F25" }
func (x VUnionDepth1_Int64F25) VDLReflect(vdlVUnionDepth1_Int64Reflect) {}

func (x VUnionDepth1_Int64F25) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_Int64F25) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion141); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(0, vdl.Int64Type, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_Int64(dec vdl.Decoder, x *VUnionDepth1_Int64) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion141); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion141 {
		name := decType.Field(index).Name
		index = vdlTypeUnion141.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_Int64F25
		switch value, err := dec.ReadValueInt(64); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VInt64 represents any single field of the VUnionDepth1_VInt64 union type.
	VUnionDepth1_VInt64 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VInt64 union type.
		VDLReflect(vdlVUnionDepth1_VInt64Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VInt64F26 represents field F26 of the VUnionDepth1_VInt64 union type.
	VUnionDepth1_VInt64F26 struct{ Value VInt64 }
	// vdlVUnionDepth1_VInt64Reflect describes the VUnionDepth1_VInt64 union type.
	vdlVUnionDepth1_VInt64Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VInt64"`
		Type  VUnionDepth1_VInt64
		Union struct {
			F26 VUnionDepth1_VInt64F26
		}
	}
)

func (x VUnionDepth1_VInt64F26) Index() int                               { return 0 }
func (x VUnionDepth1_VInt64F26) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_VInt64F26) Name() string                             { return "F26" }
func (x VUnionDepth1_VInt64F26) VDLReflect(vdlVUnionDepth1_VInt64Reflect) {}

func (x VUnionDepth1_VInt64F26) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_VInt64F26) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion142); err != nil {
		return err
	}
	if err := enc.NextFieldValueInt(0, vdlTypeInt6414, int64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VInt64(dec vdl.Decoder, x *VUnionDepth1_VInt64) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion142); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion142 {
		name := decType.Field(index).Name
		index = vdlTypeUnion142.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VInt64F26
		switch value, err := dec.ReadValueInt(64); {
		case err != nil:
			return err
		default:
			field.Value = VInt64(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_Float32 represents any single field of the VUnionDepth1_Float32 union type.
	VUnionDepth1_Float32 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_Float32 union type.
		VDLReflect(vdlVUnionDepth1_Float32Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_Float32F27 represents field F27 of the VUnionDepth1_Float32 union type.
	VUnionDepth1_Float32F27 struct{ Value float32 }
	// vdlVUnionDepth1_Float32Reflect describes the VUnionDepth1_Float32 union type.
	vdlVUnionDepth1_Float32Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_Float32"`
		Type  VUnionDepth1_Float32
		Union struct {
			F27 VUnionDepth1_Float32F27
		}
	}
)

func (x VUnionDepth1_Float32F27) Index() int                                { return 0 }
func (x VUnionDepth1_Float32F27) Interface() interface{}                    { return x.Value }
func (x VUnionDepth1_Float32F27) Name() string                              { return "F27" }
func (x VUnionDepth1_Float32F27) VDLReflect(vdlVUnionDepth1_Float32Reflect) {}

func (x VUnionDepth1_Float32F27) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_Float32F27) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion143); err != nil {
		return err
	}
	if err := enc.NextFieldValueFloat(0, vdl.Float32Type, float64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_Float32(dec vdl.Decoder, x *VUnionDepth1_Float32) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion143); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion143 {
		name := decType.Field(index).Name
		index = vdlTypeUnion143.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_Float32F27
		switch value, err := dec.ReadValueFloat(32); {
		case err != nil:
			return err
		default:
			field.Value = float32(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VFloat32 represents any single field of the VUnionDepth1_VFloat32 union type.
	VUnionDepth1_VFloat32 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VFloat32 union type.
		VDLReflect(vdlVUnionDepth1_VFloat32Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VFloat32F28 represents field F28 of the VUnionDepth1_VFloat32 union type.
	VUnionDepth1_VFloat32F28 struct{ Value VFloat32 }
	// vdlVUnionDepth1_VFloat32Reflect describes the VUnionDepth1_VFloat32 union type.
	vdlVUnionDepth1_VFloat32Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VFloat32"`
		Type  VUnionDepth1_VFloat32
		Union struct {
			F28 VUnionDepth1_VFloat32F28
		}
	}
)

func (x VUnionDepth1_VFloat32F28) Index() int                                 { return 0 }
func (x VUnionDepth1_VFloat32F28) Interface() interface{}                     { return x.Value }
func (x VUnionDepth1_VFloat32F28) Name() string                               { return "F28" }
func (x VUnionDepth1_VFloat32F28) VDLReflect(vdlVUnionDepth1_VFloat32Reflect) {}

func (x VUnionDepth1_VFloat32F28) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_VFloat32F28) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion144); err != nil {
		return err
	}
	if err := enc.NextFieldValueFloat(0, vdlTypeFloat3215, float64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VFloat32(dec vdl.Decoder, x *VUnionDepth1_VFloat32) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion144); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion144 {
		name := decType.Field(index).Name
		index = vdlTypeUnion144.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VFloat32F28
		switch value, err := dec.ReadValueFloat(32); {
		case err != nil:
			return err
		default:
			field.Value = VFloat32(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_Float64 represents any single field of the VUnionDepth1_Float64 union type.
	VUnionDepth1_Float64 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_Float64 union type.
		VDLReflect(vdlVUnionDepth1_Float64Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_Float64F29 represents field F29 of the VUnionDepth1_Float64 union type.
	VUnionDepth1_Float64F29 struct{ Value float64 }
	// vdlVUnionDepth1_Float64Reflect describes the VUnionDepth1_Float64 union type.
	vdlVUnionDepth1_Float64Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_Float64"`
		Type  VUnionDepth1_Float64
		Union struct {
			F29 VUnionDepth1_Float64F29
		}
	}
)

func (x VUnionDepth1_Float64F29) Index() int                                { return 0 }
func (x VUnionDepth1_Float64F29) Interface() interface{}                    { return x.Value }
func (x VUnionDepth1_Float64F29) Name() string                              { return "F29" }
func (x VUnionDepth1_Float64F29) VDLReflect(vdlVUnionDepth1_Float64Reflect) {}

func (x VUnionDepth1_Float64F29) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_Float64F29) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion145); err != nil {
		return err
	}
	if err := enc.NextFieldValueFloat(0, vdl.Float64Type, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_Float64(dec vdl.Decoder, x *VUnionDepth1_Float64) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion145); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion145 {
		name := decType.Field(index).Name
		index = vdlTypeUnion145.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_Float64F29
		switch value, err := dec.ReadValueFloat(64); {
		case err != nil:
			return err
		default:
			field.Value = value
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_VFloat64 represents any single field of the VUnionDepth1_VFloat64 union type.
	VUnionDepth1_VFloat64 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_VFloat64 union type.
		VDLReflect(vdlVUnionDepth1_VFloat64Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_VFloat64F30 represents field F30 of the VUnionDepth1_VFloat64 union type.
	VUnionDepth1_VFloat64F30 struct{ Value VFloat64 }
	// vdlVUnionDepth1_VFloat64Reflect describes the VUnionDepth1_VFloat64 union type.
	vdlVUnionDepth1_VFloat64Reflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_VFloat64"`
		Type  VUnionDepth1_VFloat64
		Union struct {
			F30 VUnionDepth1_VFloat64F30
		}
	}
)

func (x VUnionDepth1_VFloat64F30) Index() int                                 { return 0 }
func (x VUnionDepth1_VFloat64F30) Interface() interface{}                     { return x.Value }
func (x VUnionDepth1_VFloat64F30) Name() string                               { return "F30" }
func (x VUnionDepth1_VFloat64F30) VDLReflect(vdlVUnionDepth1_VFloat64Reflect) {}

func (x VUnionDepth1_VFloat64F30) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == 0
}

func (x VUnionDepth1_VFloat64F30) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion146); err != nil {
		return err
	}
	if err := enc.NextFieldValueFloat(0, vdlTypeFloat6416, float64(x.Value)); err != nil {
		return err
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_VFloat64(dec vdl.Decoder, x *VUnionDepth1_VFloat64) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion146); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion146 {
		name := decType.Field(index).Name
		index = vdlTypeUnion146.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_VFloat64F30
		switch value, err := dec.ReadValueFloat(64); {
		case err != nil:
			return err
		default:
			field.Value = VFloat64(value)
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_OptVStructEmpty represents any single field of the VUnionDepth1_OptVStructEmpty union type.
	VUnionDepth1_OptVStructEmpty interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_OptVStructEmpty union type.
		VDLReflect(vdlVUnionDepth1_OptVStructEmptyReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_OptVStructEmptyF31 represents field F31 of the VUnionDepth1_OptVStructEmpty union type.
	VUnionDepth1_OptVStructEmptyF31 struct{ Value *VStructEmpty }
	// vdlVUnionDepth1_OptVStructEmptyReflect describes the VUnionDepth1_OptVStructEmpty union type.
	vdlVUnionDepth1_OptVStructEmptyReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_OptVStructEmpty"`
		Type  VUnionDepth1_OptVStructEmpty
		Union struct {
			F31 VUnionDepth1_OptVStructEmptyF31
		}
	}
)

func (x VUnionDepth1_OptVStructEmptyF31) Index() int                                        { return 0 }
func (x VUnionDepth1_OptVStructEmptyF31) Interface() interface{}                            { return x.Value }
func (x VUnionDepth1_OptVStructEmptyF31) Name() string                                      { return "F31" }
func (x VUnionDepth1_OptVStructEmptyF31) VDLReflect(vdlVUnionDepth1_OptVStructEmptyReflect) {}

func (x VUnionDepth1_OptVStructEmptyF31) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == nil
}

func (x VUnionDepth1_OptVStructEmptyF31) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion147); err != nil {
		return err
	}
	if err := enc.NextField(0); err != nil {
		return err
	}
	if x.Value == nil {
		if err := enc.NilValue(vdlTypeOptional34); err != nil {
			return err
		}
	} else {
		enc.SetNextStartValueIsOptional()
		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_OptVStructEmpty(dec vdl.Decoder, x *VUnionDepth1_OptVStructEmpty) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion147); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion147 {
		name := decType.Field(index).Name
		index = vdlTypeUnion147.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_OptVStructEmptyF31
		if err := dec.StartValue(vdlTypeOptional34); err != nil {
			return err
		}
		if dec.IsNil() {
			field.Value = nil
			if err := dec.FinishValue(); err != nil {
				return err
			}
		} else {
			field.Value = new(VStructEmpty)
			dec.IgnoreNextStartValue()
			if err := field.Value.VDLRead(dec); err != nil {
				return err
			}
		}
		*x = field
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_OptVNamedError represents any single field of the VUnionDepth1_OptVNamedError union type.
	VUnionDepth1_OptVNamedError interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// VDLReflect describes the VUnionDepth1_OptVNamedError union type.
		VDLReflect(vdlVUnionDepth1_OptVNamedErrorReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_OptVNamedErrorF32 represents field F32 of the VUnionDepth1_OptVNamedError union type.
	VUnionDepth1_OptVNamedErrorF32 struct{ Value *VNamedError }
	// vdlVUnionDepth1_OptVNamedErrorReflect describes the VUnionDepth1_OptVNamedError union type.
	vdlVUnionDepth1_OptVNamedErrorReflect struct {
		Name  string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.VUnionDepth1_OptVNamedError"`
		Type  VUnionDepth1_OptVNamedError
		Union struct {
			F32 VUnionDepth1_OptVNamedErrorF32
		}
	}
)

func (x VUnionDepth1_OptVNamedErrorF32) Index() int                                       { return 0 }
func (x VUnionDepth1_OptVNamedErrorF32) Interface() interface{}                           { return x.Value }
func (x VUnionDepth1_OptVNamedErrorF32) Name() string                                     { return "F32" }
func (x VUnionDepth1_OptVNamedErrorF32) VDLReflect(vdlVUnionDepth1_OptVNamedErrorReflect) {}

func (x VUnionDepth1_OptVNamedErrorF32) VDLIsZero() bool { //nolint:gocyclo
	return x.Value == nil
}

func (x VUnionDepth1_OptVNamedErrorF32) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeUnion148); err != nil {
		return err
	}
	if err := enc.NextField(0); err != nil {
		return err
	}
	if x.Value == nil {
		if err := enc.NilValue(vdlTypeOptional36); err != nil {
			return err
		}
	} else {
		enc.SetNextStartValueIsOptional()
		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(-1); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_OptVNamedError(dec vdl.Decoder, x *VUnionDepth1_OptVNamedError) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeUnion148); err != nil {
		return err
	}
	decType := dec.Type()
	index, err := dec.NextField()
	switch {
	case err != nil:
		return err
	case index == -1:
		return fmt.Errorf("missing field in union %T, from %v", x, decType)
	}
	if decType != vdlTypeUnion148 {
		name := decType.Field(index).Name
		index = vdlTypeUnion148.FieldIndexByName(name)
		if index == -1 {
			return fmt.Errorf("field %q not in union %T, from %v", name, x, decType)
		}
	}
	if index == 0 {
		var field VUnionDepth1_OptVNamedErrorF32
		if err := dec.StartValue(vdlTypeOptional36); err != nil {
			return err
		}
		if dec.IsNil() {
			field.Value = nil
			if err := dec.FinishValue(); err != nil {
				return err
			}
		} else {
			field.Value = new(VNamedError)
			dec.IgnoreNextStartValue()
			if err := field.Value.VDLRead(dec); err != nil {
				return err
			}
		}
		*x = field
	}
	return dec.FinishValue()
}

type XType map[VString]struct{}

func (XType) VDLReflect(struct {
	Name string `vdl:"v.io/v23/vom/vomtest/internal/vomforever/testdata/tmp.XType"`
}) {
}

func (x XType) VDLIsZero() bool { //nolint:gocyclo
	return len(x) == 0
}

func (x XType) VDLWrite(enc vdl.Encoder) error { //nolint:gocyclo
	if err := enc.StartValue(vdlTypeSet149); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntryValueString(vdlTypeString2, string(key)); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *XType) VDLRead(dec vdl.Decoder) error { //nolint:gocyclo
	if err := dec.StartValue(vdlTypeSet149); err != nil {
		return err
	}
	var tmpMap XType
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(XType, len)
	}
	for {
		switch done, key, err := dec.NextEntryValueString(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		default:
			if tmpMap == nil {
				tmpMap = make(XType)
			}
			tmpMap[VString(key)] = struct{}{}
		}
	}
}

// Const definitions
// =================

var X = XType{
	"":              {},
	"abcdeΔΘΠΣΦ王普澤": {},
	"eΔΘ":           {},
}

// initializeVDL performs vdl initialization.  It is safe to call multiple times.
// If you have an init ordering issue, just insert the following line verbatim
// into your source files in this package, right after the "package foo" clause:
//
//	var _ = initializeVDL()
//
// The purpose of this function is to ensure that vdl initialization occurs in
// the right order, and very early in the init sequence.  In particular, vdl
// registration and package variable initialization needs to occur before
// functions like vdl.TypeOf will work properly.
//
// This function returns a dummy value, so that it can be used to initialize the
// first var in the file, to take advantage of Go's defined init order.
func initializeVDL() struct{} {
	if initializeVDLCalled {
		return struct{}{}
	}
	initializeVDLCalled = true

	// Register types.
	vdl.Register((*VBool)(nil))
	vdl.Register((*VString)(nil))
	vdl.Register((*VByte)(nil))
	vdl.Register((*VEnumAbc)(nil))
	vdl.Register((*VEnumBcd)(nil))
	vdl.Register((*VStructEmpty)(nil))
	vdl.Register((*VNamedError)(nil))
	vdl.Register((*VUint16)(nil))
	vdl.Register((*VUint32)(nil))
	vdl.Register((*VUint64)(nil))
	vdl.Register((*VInt8)(nil))
	vdl.Register((*VInt16)(nil))
	vdl.Register((*VInt32)(nil))
	vdl.Register((*VInt64)(nil))
	vdl.Register((*VFloat32)(nil))
	vdl.Register((*VFloat64)(nil))
	vdl.Register((*VArray1_Any)(nil))
	vdl.Register((*VArray3_Bool)(nil))
	vdl.Register((*VArray3_VBool)(nil))
	vdl.Register((*VArray1_String)(nil))
	vdl.Register((*VArray3_VString)(nil))
	vdl.Register((*VArray3_TypeObject)(nil))
	vdl.Register((*VArray2_Byte)(nil))
	vdl.Register((*VArray1_VByte)(nil))
	vdl.Register((*VArray3_VEnumAbc)(nil))
	vdl.Register((*VArray2_VEnumBcd)(nil))
	vdl.Register((*VArray3_VStructEmpty)(nil))
	vdl.Register((*VArray2_VNamedError)(nil))
	vdl.Register((*VArray2_Error)(nil))
	vdl.Register((*VArray1_Uint16)(nil))
	vdl.Register((*VArray2_VUint16)(nil))
	vdl.Register((*VArray1_Int64)(nil))
	vdl.Register((*VArray1_OptVStructEmpty)(nil))
	vdl.Register((*VArray2_OptVNamedError)(nil))
	vdl.Register((*VList_Any)(nil))
	vdl.Register((*VList_Bool)(nil))
	vdl.Register((*VList_VBool)(nil))
	vdl.Register((*VList_String)(nil))
	vdl.Register((*VList_VString)(nil))
	vdl.Register((*VList_TypeObject)(nil))
	vdl.Register((*VList_Byte)(nil))
	vdl.Register((*VList_VByte)(nil))
	vdl.Register((*VList_VEnumAbc)(nil))
	vdl.Register((*VList_VEnumBcd)(nil))
	vdl.Register((*VList_VStructEmpty)(nil))
	vdl.Register((*VList_VNamedError)(nil))
	vdl.Register((*VList_Error)(nil))
	vdl.Register((*VList_Uint16)(nil))
	vdl.Register((*VList_Uint32)(nil))
	vdl.Register((*VList_VFloat32)(nil))
	vdl.Register((*VList_OptVStructEmpty)(nil))
	vdl.Register((*VList_OptVNamedError)(nil))
	vdl.Register((*VSet_Bool)(nil))
	vdl.Register((*VSet_VBool)(nil))
	vdl.Register((*VSet_String)(nil))
	vdl.Register((*VSet_VString)(nil))
	vdl.Register((*VSet_Byte)(nil))
	vdl.Register((*VSet_VByte)(nil))
	vdl.Register((*VSet_VEnumAbc)(nil))
	vdl.Register((*VSet_VEnumBcd)(nil))
	vdl.Register((*VSet_VStructEmpty)(nil))
	vdl.Register((*VSet_VNamedError)(nil))
	vdl.Register((*VSet_Uint64)(nil))
	vdl.Register((*VSet_Float32)(nil))
	vdl.Register((*VSet_VFloat64)(nil))
	vdl.Register((*VMap_Bool_Bool)(nil))
	vdl.Register((*VMap_VBool_VBool)(nil))
	vdl.Register((*VMap_String_String)(nil))
	vdl.Register((*VMap_VString_VString)(nil))
	vdl.Register((*VMap_Byte_Byte)(nil))
	vdl.Register((*VMap_VByte_VByte)(nil))
	vdl.Register((*VMap_VEnumAbc_VEnumAbc)(nil))
	vdl.Register((*VMap_VEnumBcd_VEnumBcd)(nil))
	vdl.Register((*VMap_VStructEmpty_VStructEmpty)(nil))
	vdl.Register((*VMap_VNamedError_VNamedError)(nil))
	vdl.Register((*VMap_VInt16_VInt16)(nil))
	vdl.Register((*VMap_VInt32_VInt32)(nil))
	vdl.Register((*VMap_VInt64_VInt64)(nil))
	vdl.Register((*VStructDepth1_All)(nil))
	vdl.Register((*VStructDepth1_Any)(nil))
	vdl.Register((*VStructDepth1_Bool)(nil))
	vdl.Register((*VStructDepth1_VBool)(nil))
	vdl.Register((*VStructDepth1_String)(nil))
	vdl.Register((*VStructDepth1_VString)(nil))
	vdl.Register((*VStructDepth1_TypeObject)(nil))
	vdl.Register((*VStructDepth1_Byte)(nil))
	vdl.Register((*VStructDepth1_VByte)(nil))
	vdl.Register((*VStructDepth1_VEnumAbc)(nil))
	vdl.Register((*VStructDepth1_VEnumBcd)(nil))
	vdl.Register((*VStructDepth1_VStructEmpty)(nil))
	vdl.Register((*VStructDepth1_VNamedError)(nil))
	vdl.Register((*VStructDepth1_Error)(nil))
	vdl.Register((*VStructDepth1_Uint16)(nil))
	vdl.Register((*VStructDepth1_VUint16)(nil))
	vdl.Register((*VStructDepth1_Uint32)(nil))
	vdl.Register((*VStructDepth1_VUint32)(nil))
	vdl.Register((*VStructDepth1_Uint64)(nil))
	vdl.Register((*VStructDepth1_VUint64)(nil))
	vdl.Register((*VStructDepth1_Int8)(nil))
	vdl.Register((*VStructDepth1_VInt8)(nil))
	vdl.Register((*VStructDepth1_Int16)(nil))
	vdl.Register((*VStructDepth1_VInt16)(nil))
	vdl.Register((*VStructDepth1_Int32)(nil))
	vdl.Register((*VStructDepth1_VInt32)(nil))
	vdl.Register((*VStructDepth1_Int64)(nil))
	vdl.Register((*VStructDepth1_VInt64)(nil))
	vdl.Register((*VStructDepth1_Float32)(nil))
	vdl.Register((*VStructDepth1_VFloat32)(nil))
	vdl.Register((*VStructDepth1_Float64)(nil))
	vdl.Register((*VStructDepth1_VFloat64)(nil))
	vdl.Register((*VStructDepth1_OptVStructEmpty)(nil))
	vdl.Register((*VStructDepth1_OptVNamedError)(nil))
	vdl.Register((*VUnionDepth1_All)(nil))
	vdl.Register((*VUnionDepth1_Any)(nil))
	vdl.Register((*VUnionDepth1_Bool)(nil))
	vdl.Register((*VUnionDepth1_VBool)(nil))
	vdl.Register((*VUnionDepth1_String)(nil))
	vdl.Register((*VUnionDepth1_VString)(nil))
	vdl.Register((*VUnionDepth1_TypeObject)(nil))
	vdl.Register((*VUnionDepth1_Byte)(nil))
	vdl.Register((*VUnionDepth1_VByte)(nil))
	vdl.Register((*VUnionDepth1_VEnumAbc)(nil))
	vdl.Register((*VUnionDepth1_VEnumBcd)(nil))
	vdl.Register((*VUnionDepth1_VStructEmpty)(nil))
	vdl.Register((*VUnionDepth1_VNamedError)(nil))
	vdl.Register((*VUnionDepth1_Error)(nil))
	vdl.Register((*VUnionDepth1_Uint16)(nil))
	vdl.Register((*VUnionDepth1_VUint16)(nil))
	vdl.Register((*VUnionDepth1_Uint32)(nil))
	vdl.Register((*VUnionDepth1_VUint32)(nil))
	vdl.Register((*VUnionDepth1_Uint64)(nil))
	vdl.Register((*VUnionDepth1_VUint64)(nil))
	vdl.Register((*VUnionDepth1_Int8)(nil))
	vdl.Register((*VUnionDepth1_VInt8)(nil))
	vdl.Register((*VUnionDepth1_Int16)(nil))
	vdl.Register((*VUnionDepth1_VInt16)(nil))
	vdl.Register((*VUnionDepth1_Int32)(nil))
	vdl.Register((*VUnionDepth1_VInt32)(nil))
	vdl.Register((*VUnionDepth1_Int64)(nil))
	vdl.Register((*VUnionDepth1_VInt64)(nil))
	vdl.Register((*VUnionDepth1_Float32)(nil))
	vdl.Register((*VUnionDepth1_VFloat32)(nil))
	vdl.Register((*VUnionDepth1_Float64)(nil))
	vdl.Register((*VUnionDepth1_VFloat64)(nil))
	vdl.Register((*VUnionDepth1_OptVStructEmpty)(nil))
	vdl.Register((*VUnionDepth1_OptVNamedError)(nil))
	vdl.Register((*XType)(nil))

	// Initialize type definitions.
	vdlTypeBool1 = vdl.TypeOf((*VBool)(nil))
	vdlTypeString2 = vdl.TypeOf((*VString)(nil))
	vdlTypeByte3 = vdl.TypeOf((*VByte)(nil))
	vdlTypeEnum4 = vdl.TypeOf((*VEnumAbc)(nil))
	vdlTypeEnum5 = vdl.TypeOf((*VEnumBcd)(nil))
	vdlTypeStruct6 = vdl.TypeOf((*VStructEmpty)(nil)).Elem()
	vdlTypeStruct7 = vdl.TypeOf((*VNamedError)(nil)).Elem()
	vdlTypeUint168 = vdl.TypeOf((*VUint16)(nil))
	vdlTypeUint329 = vdl.TypeOf((*VUint32)(nil))
	vdlTypeUint6410 = vdl.TypeOf((*VUint64)(nil))
	vdlTypeInt811 = vdl.TypeOf((*VInt8)(nil))
	vdlTypeInt1612 = vdl.TypeOf((*VInt16)(nil))
	vdlTypeInt3213 = vdl.TypeOf((*VInt32)(nil))
	vdlTypeInt6414 = vdl.TypeOf((*VInt64)(nil))
	vdlTypeFloat3215 = vdl.TypeOf((*VFloat32)(nil))
	vdlTypeFloat6416 = vdl.TypeOf((*VFloat64)(nil))
	vdlTypeArray17 = vdl.TypeOf((*VArray1_Any)(nil))
	vdlTypeArray18 = vdl.TypeOf((*VArray3_Bool)(nil))
	vdlTypeArray19 = vdl.TypeOf((*VArray3_VBool)(nil))
	vdlTypeArray20 = vdl.TypeOf((*VArray1_String)(nil))
	vdlTypeArray21 = vdl.TypeOf((*VArray3_VString)(nil))
	vdlTypeArray22 = vdl.TypeOf((*VArray3_TypeObject)(nil))
	vdlTypeArray23 = vdl.TypeOf((*VArray2_Byte)(nil))
	vdlTypeArray24 = vdl.TypeOf((*VArray1_VByte)(nil))
	vdlTypeArray25 = vdl.TypeOf((*VArray3_VEnumAbc)(nil))
	vdlTypeArray26 = vdl.TypeOf((*VArray2_VEnumBcd)(nil))
	vdlTypeArray27 = vdl.TypeOf((*VArray3_VStructEmpty)(nil))
	vdlTypeArray28 = vdl.TypeOf((*VArray2_VNamedError)(nil))
	vdlTypeArray29 = vdl.TypeOf((*VArray2_Error)(nil))
	vdlTypeArray30 = vdl.TypeOf((*VArray1_Uint16)(nil))
	vdlTypeArray31 = vdl.TypeOf((*VArray2_VUint16)(nil))
	vdlTypeArray32 = vdl.TypeOf((*VArray1_Int64)(nil))
	vdlTypeArray33 = vdl.TypeOf((*VArray1_OptVStructEmpty)(nil))
	vdlTypeOptional34 = vdl.TypeOf((*VStructEmpty)(nil))
	vdlTypeArray35 = vdl.TypeOf((*VArray2_OptVNamedError)(nil))
	vdlTypeOptional36 = vdl.TypeOf((*VNamedError)(nil))
	vdlTypeList37 = vdl.TypeOf((*VList_Any)(nil))
	vdlTypeList38 = vdl.TypeOf((*VList_Bool)(nil))
	vdlTypeList39 = vdl.TypeOf((*VList_VBool)(nil))
	vdlTypeList40 = vdl.TypeOf((*VList_String)(nil))
	vdlTypeList41 = vdl.TypeOf((*VList_VString)(nil))
	vdlTypeList42 = vdl.TypeOf((*VList_TypeObject)(nil))
	vdlTypeList43 = vdl.TypeOf((*VList_Byte)(nil))
	vdlTypeList44 = vdl.TypeOf((*VList_VByte)(nil))
	vdlTypeList45 = vdl.TypeOf((*VList_VEnumAbc)(nil))
	vdlTypeList46 = vdl.TypeOf((*VList_VEnumBcd)(nil))
	vdlTypeList47 = vdl.TypeOf((*VList_VStructEmpty)(nil))
	vdlTypeList48 = vdl.TypeOf((*VList_VNamedError)(nil))
	vdlTypeList49 = vdl.TypeOf((*VList_Error)(nil))
	vdlTypeList50 = vdl.TypeOf((*VList_Uint16)(nil))
	vdlTypeList51 = vdl.TypeOf((*VList_Uint32)(nil))
	vdlTypeList52 = vdl.TypeOf((*VList_VFloat32)(nil))
	vdlTypeList53 = vdl.TypeOf((*VList_OptVStructEmpty)(nil))
	vdlTypeList54 = vdl.TypeOf((*VList_OptVNamedError)(nil))
	vdlTypeSet55 = vdl.TypeOf((*VSet_Bool)(nil))
	vdlTypeSet56 = vdl.TypeOf((*VSet_VBool)(nil))
	vdlTypeSet57 = vdl.TypeOf((*VSet_String)(nil))
	vdlTypeSet58 = vdl.TypeOf((*VSet_VString)(nil))
	vdlTypeSet59 = vdl.TypeOf((*VSet_Byte)(nil))
	vdlTypeSet60 = vdl.TypeOf((*VSet_VByte)(nil))
	vdlTypeSet61 = vdl.TypeOf((*VSet_VEnumAbc)(nil))
	vdlTypeSet62 = vdl.TypeOf((*VSet_VEnumBcd)(nil))
	vdlTypeSet63 = vdl.TypeOf((*VSet_VStructEmpty)(nil))
	vdlTypeSet64 = vdl.TypeOf((*VSet_VNamedError)(nil))
	vdlTypeSet65 = vdl.TypeOf((*VSet_Uint64)(nil))
	vdlTypeSet66 = vdl.TypeOf((*VSet_Float32)(nil))
	vdlTypeSet67 = vdl.TypeOf((*VSet_VFloat64)(nil))
	vdlTypeMap68 = vdl.TypeOf((*VMap_Bool_Bool)(nil))
	vdlTypeMap69 = vdl.TypeOf((*VMap_VBool_VBool)(nil))
	vdlTypeMap70 = vdl.TypeOf((*VMap_String_String)(nil))
	vdlTypeMap71 = vdl.TypeOf((*VMap_VString_VString)(nil))
	vdlTypeMap72 = vdl.TypeOf((*VMap_Byte_Byte)(nil))
	vdlTypeMap73 = vdl.TypeOf((*VMap_VByte_VByte)(nil))
	vdlTypeMap74 = vdl.TypeOf((*VMap_VEnumAbc_VEnumAbc)(nil))
	vdlTypeMap75 = vdl.TypeOf((*VMap_VEnumBcd_VEnumBcd)(nil))
	vdlTypeMap76 = vdl.TypeOf((*VMap_VStructEmpty_VStructEmpty)(nil))
	vdlTypeMap77 = vdl.TypeOf((*VMap_VNamedError_VNamedError)(nil))
	vdlTypeMap78 = vdl.TypeOf((*VMap_VInt16_VInt16)(nil))
	vdlTypeMap79 = vdl.TypeOf((*VMap_VInt32_VInt32)(nil))
	vdlTypeMap80 = vdl.TypeOf((*VMap_VInt64_VInt64)(nil))
	vdlTypeStruct81 = vdl.TypeOf((*VStructDepth1_All)(nil)).Elem()
	vdlTypeStruct82 = vdl.TypeOf((*VStructDepth1_Any)(nil)).Elem()
	vdlTypeStruct83 = vdl.TypeOf((*VStructDepth1_Bool)(nil)).Elem()
	vdlTypeStruct84 = vdl.TypeOf((*VStructDepth1_VBool)(nil)).Elem()
	vdlTypeStruct85 = vdl.TypeOf((*VStructDepth1_String)(nil)).Elem()
	vdlTypeStruct86 = vdl.TypeOf((*VStructDepth1_VString)(nil)).Elem()
	vdlTypeStruct87 = vdl.TypeOf((*VStructDepth1_TypeObject)(nil)).Elem()
	vdlTypeStruct88 = vdl.TypeOf((*VStructDepth1_Byte)(nil)).Elem()
	vdlTypeStruct89 = vdl.TypeOf((*VStructDepth1_VByte)(nil)).Elem()
	vdlTypeStruct90 = vdl.TypeOf((*VStructDepth1_VEnumAbc)(nil)).Elem()
	vdlTypeStruct91 = vdl.TypeOf((*VStructDepth1_VEnumBcd)(nil)).Elem()
	vdlTypeStruct92 = vdl.TypeOf((*VStructDepth1_VStructEmpty)(nil)).Elem()
	vdlTypeStruct93 = vdl.TypeOf((*VStructDepth1_VNamedError)(nil)).Elem()
	vdlTypeStruct94 = vdl.TypeOf((*VStructDepth1_Error)(nil)).Elem()
	vdlTypeStruct95 = vdl.TypeOf((*VStructDepth1_Uint16)(nil)).Elem()
	vdlTypeStruct96 = vdl.TypeOf((*VStructDepth1_VUint16)(nil)).Elem()
	vdlTypeStruct97 = vdl.TypeOf((*VStructDepth1_Uint32)(nil)).Elem()
	vdlTypeStruct98 = vdl.TypeOf((*VStructDepth1_VUint32)(nil)).Elem()
	vdlTypeStruct99 = vdl.TypeOf((*VStructDepth1_Uint64)(nil)).Elem()
	vdlTypeStruct100 = vdl.TypeOf((*VStructDepth1_VUint64)(nil)).Elem()
	vdlTypeStruct101 = vdl.TypeOf((*VStructDepth1_Int8)(nil)).Elem()
	vdlTypeStruct102 = vdl.TypeOf((*VStructDepth1_VInt8)(nil)).Elem()
	vdlTypeStruct103 = vdl.TypeOf((*VStructDepth1_Int16)(nil)).Elem()
	vdlTypeStruct104 = vdl.TypeOf((*VStructDepth1_VInt16)(nil)).Elem()
	vdlTypeStruct105 = vdl.TypeOf((*VStructDepth1_Int32)(nil)).Elem()
	vdlTypeStruct106 = vdl.TypeOf((*VStructDepth1_VInt32)(nil)).Elem()
	vdlTypeStruct107 = vdl.TypeOf((*VStructDepth1_Int64)(nil)).Elem()
	vdlTypeStruct108 = vdl.TypeOf((*VStructDepth1_VInt64)(nil)).Elem()
	vdlTypeStruct109 = vdl.TypeOf((*VStructDepth1_Float32)(nil)).Elem()
	vdlTypeStruct110 = vdl.TypeOf((*VStructDepth1_VFloat32)(nil)).Elem()
	vdlTypeStruct111 = vdl.TypeOf((*VStructDepth1_Float64)(nil)).Elem()
	vdlTypeStruct112 = vdl.TypeOf((*VStructDepth1_VFloat64)(nil)).Elem()
	vdlTypeStruct113 = vdl.TypeOf((*VStructDepth1_OptVStructEmpty)(nil)).Elem()
	vdlTypeStruct114 = vdl.TypeOf((*VStructDepth1_OptVNamedError)(nil)).Elem()
	vdlTypeUnion115 = vdl.TypeOf((*VUnionDepth1_All)(nil))
	vdlTypeUnion116 = vdl.TypeOf((*VUnionDepth1_Any)(nil))
	vdlTypeUnion117 = vdl.TypeOf((*VUnionDepth1_Bool)(nil))
	vdlTypeUnion118 = vdl.TypeOf((*VUnionDepth1_VBool)(nil))
	vdlTypeUnion119 = vdl.TypeOf((*VUnionDepth1_String)(nil))
	vdlTypeUnion120 = vdl.TypeOf((*VUnionDepth1_VString)(nil))
	vdlTypeUnion121 = vdl.TypeOf((*VUnionDepth1_TypeObject)(nil))
	vdlTypeUnion122 = vdl.TypeOf((*VUnionDepth1_Byte)(nil))
	vdlTypeUnion123 = vdl.TypeOf((*VUnionDepth1_VByte)(nil))
	vdlTypeUnion124 = vdl.TypeOf((*VUnionDepth1_VEnumAbc)(nil))
	vdlTypeUnion125 = vdl.TypeOf((*VUnionDepth1_VEnumBcd)(nil))
	vdlTypeUnion126 = vdl.TypeOf((*VUnionDepth1_VStructEmpty)(nil))
	vdlTypeUnion127 = vdl.TypeOf((*VUnionDepth1_VNamedError)(nil))
	vdlTypeUnion128 = vdl.TypeOf((*VUnionDepth1_Error)(nil))
	vdlTypeUnion129 = vdl.TypeOf((*VUnionDepth1_Uint16)(nil))
	vdlTypeUnion130 = vdl.TypeOf((*VUnionDepth1_VUint16)(nil))
	vdlTypeUnion131 = vdl.TypeOf((*VUnionDepth1_Uint32)(nil))
	vdlTypeUnion132 = vdl.TypeOf((*VUnionDepth1_VUint32)(nil))
	vdlTypeUnion133 = vdl.TypeOf((*VUnionDepth1_Uint64)(nil))
	vdlTypeUnion134 = vdl.TypeOf((*VUnionDepth1_VUint64)(nil))
	vdlTypeUnion135 = vdl.TypeOf((*VUnionDepth1_Int8)(nil))
	vdlTypeUnion136 = vdl.TypeOf((*VUnionDepth1_VInt8)(nil))
	vdlTypeUnion137 = vdl.TypeOf((*VUnionDepth1_Int16)(nil))
	vdlTypeUnion138 = vdl.TypeOf((*VUnionDepth1_VInt16)(nil))
	vdlTypeUnion139 = vdl.TypeOf((*VUnionDepth1_Int32)(nil))
	vdlTypeUnion140 = vdl.TypeOf((*VUnionDepth1_VInt32)(nil))
	vdlTypeUnion141 = vdl.TypeOf((*VUnionDepth1_Int64)(nil))
	vdlTypeUnion142 = vdl.TypeOf((*VUnionDepth1_VInt64)(nil))
	vdlTypeUnion143 = vdl.TypeOf((*VUnionDepth1_Float32)(nil))
	vdlTypeUnion144 = vdl.TypeOf((*VUnionDepth1_VFloat32)(nil))
	vdlTypeUnion145 = vdl.TypeOf((*VUnionDepth1_Float64)(nil))
	vdlTypeUnion146 = vdl.TypeOf((*VUnionDepth1_VFloat64)(nil))
	vdlTypeUnion147 = vdl.TypeOf((*VUnionDepth1_OptVStructEmpty)(nil))
	vdlTypeUnion148 = vdl.TypeOf((*VUnionDepth1_OptVNamedError)(nil))
	vdlTypeSet149 = vdl.TypeOf((*XType)(nil))

	return struct{}{}
}

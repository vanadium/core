// Copyright 2020 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: echo

//nolint:golint
package echo

import (
	v23 "v.io/v23"
	"v.io/v23/context"
	"v.io/v23/rpc"
	"v.io/v23/security/access"
	"v.io/v23/vdl"
)

var _ = initializeVDL() // Must be first; see initializeVDL comments for details.

// Interface definitions
// =====================

// EchoServiceClientMethods is the client interface
// containing EchoService methods.
type EchoServiceClientMethods interface {
	Echo(_ *context.T, msg string, _ ...rpc.CallOpt) (string, error)
}

// EchoServiceClientStub embeds EchoServiceClientMethods and is a
// placeholder for additional management operations.
type EchoServiceClientStub interface {
	EchoServiceClientMethods
}

// EchoServiceClient returns a client stub for EchoService.
func EchoServiceClient(name string) EchoServiceClientStub {
	return implEchoServiceClientStub{name}
}

type implEchoServiceClientStub struct {
	name string
}

func (c implEchoServiceClientStub) Echo(ctx *context.T, i0 string, opts ...rpc.CallOpt) (o0 string, err error) {
	err = v23.GetClient(ctx).Call(ctx, c.name, "Echo", []interface{}{i0}, []interface{}{&o0}, opts...)
	return
}

// EchoServiceServerMethods is the interface a server writer
// implements for EchoService.
type EchoServiceServerMethods interface {
	Echo(_ *context.T, _ rpc.ServerCall, msg string) (string, error)
}

// EchoServiceServerStubMethods is the server interface containing
// EchoService methods, as expected by rpc.Server.
// There is no difference between this interface and EchoServiceServerMethods
// since there are no streaming methods.
type EchoServiceServerStubMethods EchoServiceServerMethods

// EchoServiceServerStub adds universal methods to EchoServiceServerStubMethods.
type EchoServiceServerStub interface {
	EchoServiceServerStubMethods
	// DescribeInterfaces the EchoService interfaces.
	Describe__() []rpc.InterfaceDesc
}

// EchoServiceServer returns a server stub for EchoService.
// It converts an implementation of EchoServiceServerMethods into
// an object that may be used by rpc.Server.
func EchoServiceServer(impl EchoServiceServerMethods) EchoServiceServerStub {
	stub := implEchoServiceServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := rpc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := rpc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implEchoServiceServerStub struct {
	impl EchoServiceServerMethods
	gs   *rpc.GlobState
}

func (s implEchoServiceServerStub) Echo(ctx *context.T, call rpc.ServerCall, i0 string) (string, error) {
	return s.impl.Echo(ctx, call, i0)
}

func (s implEchoServiceServerStub) Globber() *rpc.GlobState {
	return s.gs
}

func (s implEchoServiceServerStub) Describe__() []rpc.InterfaceDesc {
	return []rpc.InterfaceDesc{EchoServiceDesc}
}

// EchoServiceDesc describes the EchoService interface.
var EchoServiceDesc rpc.InterfaceDesc = descEchoService

// descEchoService hides the desc to keep godoc clean.
var descEchoService = rpc.InterfaceDesc{
	Name:    "EchoService",
	PkgPath: "v.io/x/ref/examples/echo",
	Methods: []rpc.MethodDesc{
		{
			Name: "Echo",
			InArgs: []rpc.ArgDesc{
				{Name: "msg", Doc: ``}, // string
			},
			OutArgs: []rpc.ArgDesc{
				{Name: "", Doc: ``}, // string
			},
			Tags: []*vdl.Value{vdl.ValueOf(access.Tag("Read"))},
		},
	},
}

var initializeVDLCalled bool

// initializeVDL performs vdl initialization.  It is safe to call multiple times.
// If you have an init ordering issue, just insert the following line verbatim
// into your source files in this package, right after the "package foo" clause:
//
//    var _ = initializeVDL()
//
// The purpose of this function is to ensure that vdl initialization occurs in
// the right order, and very early in the init sequence.  In particular, vdl
// registration and package variable initialization needs to occur before
// functions like vdl.TypeOf will work properly.
//
// This function returns a dummy value, so that it can be used to initialize the
// first var in the file, to take advantage of Go's defined init order.
func initializeVDL() struct{} {
	if initializeVDLCalled {
		return struct{}{}
	}
	initializeVDLCalled = true

	return struct{}{}
}

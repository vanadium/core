// Copyright 2020 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package assets contains template strings and other assets for the benarchd web interface.
//
// This package is auto-generated by "go generate v.io/x/ref/services/ben/benarchd/internal"
// which in-turn uses https://github.com/cosnicolaou/go-bindata/
// Code generated by go-bindata.
// sources:
// badquery.tmpl.html
// benchmarks.tmpl.html
// chart.js
// footer.tmpl.html
// home.tmpl.html
// nobenchmarks.tmpl.html
// runs.tmpl.html
// sortable.css
// sortable.js
// styling.tmpl.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _badqueryTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x6b\xe3\x30\x10\x85\xef\xf9\x15\xb3\xba\xdb\x22\x2c\x2c\x24\x28\x86\x6d\x9b\x73\x5a\xd3\x4b\x29\x25\xa8\x92\x1a\xab\x1d\x4b\x41\x9a\xd8\x31\xc6\xff\xbd\x28\x8e\xdb\x43\x5a\x68\x4f\x9a\x41\xdf\x7b\x7a\x68\x46\xfc\xb9\xd9\x5c\xdf\x3f\xdc\xae\xa1\xa2\x1a\x8b\x99\x48\x07\x1c\x6b\x74\x71\xc5\x2a\xa2\xfd\x92\xf3\xb6\x6d\xf3\xf6\x6f\xee\xc3\x8e\xcf\x17\x8b\x05\x3f\x26\x86\x25\xd6\x48\x5d\xcc\x00\x00\x04\x59\x42\x53\xac\xcb\x72\x53\x2e\xe1\xca\x38\x55\xd5\x32\xbc\x41\x69\xe2\x01\x29\xc2\xff\xa0\x2a\xdb\x18\xc1\x47\xee\xa4\xe9\x7b\x32\xf5\x1e\x25\x19\x60\x91\x3a\xb4\x6e\xc7\x86\x61\x26\xf8\x68\x2b\x9e\xbd\xee\x12\x29\xb4\x6d\x40\xa1\x8c\x71\xc5\x6a\x8d\x19\xca\xce\x1f\x08\x52\xf9\x1a\xcf\x1d\x3b\xc7\xa8\xa5\x75\x97\xec\x76\xab\xbc\x23\xe3\x26\xec\xd2\x73\x17\xac\xfe\xf6\x52\x19\x44\x98\x8a\x2c\x9b\x67\xca\x23\x2b\x04\xd7\xb6\xf9\xa1\xe4\xdf\x28\x99\x60\xfb\x81\x4a\x32\xc1\x4a\xcc\xac\xf2\x2e\xb2\xc2\x84\xe0\x83\xe0\xb6\x78\xec\xfb\xfc\xee\x60\x42\x37\x0c\x4f\x60\x23\x38\x4f\xd0\x48\xb4\x7a\x09\x7d\x9f\xaf\x13\x36\x0c\x93\xdd\x2f\x82\x7c\x99\xfd\xb3\x11\x3c\x7d\xe0\xe5\x78\x5e\xbc\x27\x13\xd8\xe9\xc9\x33\x2e\xf8\x38\x1f\xc1\xc7\xc5\x79\x0f\x00\x00\xff\xff\x5f\x6f\xa4\x6d\x49\x02\x00\x00")

func badqueryTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_badqueryTmplHtml,
		"badquery.tmpl.html",
	)
}

func badqueryTmplHtml() (*asset, error) {
	bytes, err := badqueryTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "badquery.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _benchmarksTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4d\x8f\xdb\x36\x10\xbd\xef\xaf\x98\xb2\xbd\x4a\x4c\xd2\x14\x45\x0a\x4a\x41\xba\xc9\x21\x40\xd0\x75\xbb\x71\x81\x9e\x0c\x5a\x1a\x5b\x4c\x28\x52\x21\xa9\xf5\x1a\xea\xfe\xf7\x82\x94\x2c\xcb\xf2\xc7\xc6\x5d\xef\xc9\xf2\x70\x38\xf3\x66\xc4\x79\x7c\x10\xfb\xe1\xfd\xcd\xf5\xe7\x7f\x26\x1f\xa0\x70\xa5\x4c\xaf\x98\xff\x81\xfb\x52\x2a\x9b\x90\xc2\xb9\xea\x37\x4a\x57\xab\x55\xbc\xfa\x39\xd6\x66\x49\x5f\xbe\x79\xf3\x86\xde\x7b\x1f\xe2\x7d\x91\xe7\xe9\x15\x00\x00\x73\xc2\x49\x4c\x7f\x47\x95\x15\x25\x37\x5f\xe1\x2f\xb4\xb5\x74\x16\xde\x99\xac\x10\x77\xc8\x68\xeb\x10\x9c\x9b\xc6\x61\x59\x49\xee\x10\x88\x75\x6b\x29\xd4\x92\x3c\x3c\xb4\x71\xa4\x50\x5f\xc1\xa0\x4c\xc2\x0a\xda\x02\xd1\x11\x28\x0c\x2e\x12\x62\xb5\x71\x7c\x2e\x31\xce\xac\xf5\xe9\x69\x9b\x9f\xcd\x75\xbe\x86\x4c\x72\x6b\x13\x52\xe6\x32\xca\xb1\xd4\xe0\x1f\x32\x2d\xb5\x89\xa2\xa5\xc1\x75\xf4\xf2\xc5\x8b\x81\xcd\xe1\xbd\xeb\x16\x7e\xed\x16\xe6\xdc\x22\xf1\x00\x59\x2e\xee\x86\xe1\x24\x5f\xeb\xda\x05\x9f\x2f\x76\xf8\xaf\x7d\x8c\xa2\x85\xb8\xc7\x3c\xf2\x60\xd0\x90\xae\x1f\x25\x17\x6a\x3f\xc8\x6c\x96\x69\xe5\x50\xb9\xce\x0d\x80\x59\xcc\x9c\xd0\xbd\x6f\xf7\x37\x8a\x32\x54\x0e\x4d\xc8\xb3\x34\x22\xef\x1f\xa2\x48\xe9\xc8\x56\x3c\x13\x6a\x19\x8c\xb6\xe0\xb9\x5e\x45\xd1\xab\xbc\xea\xa3\xee\x17\x91\x71\x93\xcf\x66\xb6\xae\x2a\x6d\x9c\x50\xcb\xd0\x81\xa1\xff\x42\x9b\x12\x78\x48\x9e\x90\x1f\x07\x2b\x87\xa2\xf9\xcd\x0b\x81\x32\xdf\x74\xa5\x37\x8c\x36\x02\x30\xa1\xaa\xda\x1d\xdc\x3c\x9b\x85\x35\x02\x6e\x5d\x61\x42\x02\x22\x10\x79\x42\xbe\x11\x50\xbc\xc4\xf0\x70\xc7\x65\x8d\x09\x69\x9a\xf8\xcf\x1a\xcd\xfa\xe1\x81\xd0\xbd\x14\x92\xcf\x51\x1e\x49\x11\xd6\x08\x2c\xb4\xf1\xe1\xd2\x6d\x1c\x46\xc3\xd2\xa8\x50\x9a\x8b\xbb\x91\xa9\x2d\xa0\xc3\x71\x8b\xdc\x64\xc5\x06\xb2\xad\xe7\xa5\x70\x64\x98\x7a\x5e\x3b\xa7\xd5\xa6\x2f\x83\x7f\xed\x63\x14\x19\x2e\x2c\xe6\x3b\xa6\x70\x26\x31\x1f\x57\xd6\x34\x62\x01\x2d\xdc\xf8\x7a\x32\xed\x46\xa4\xc7\xc5\xbb\xb1\xa0\x6f\xbf\x25\x4d\x63\x70\x21\x14\x06\xe7\x6e\x0f\x90\xeb\xc9\x94\x00\x21\xf0\x2f\xd4\x46\x7e\xeb\xda\xf7\x18\x58\x92\x32\xd1\xfb\x70\x87\x46\x70\x19\x89\x4c\x2b\x4b\x52\x83\xa5\xf6\xc3\x2c\xd2\xeb\xc9\x94\x51\x3e\xc6\x8b\x2a\x1f\xa1\x1c\xd6\x70\x73\x7b\x7e\x09\x37\xb7\xcf\x55\xc1\xcd\xed\xd9\x05\x4c\x2b\xa9\xfd\x90\x9f\x5f\xc6\x66\xe7\x73\x15\xb3\x89\x7f\x76\x49\x9f\xfc\x0c\x9c\x5f\xcf\xa7\x76\xaa\x9e\xa7\x98\x10\xfc\xd1\x4a\x18\xf5\x94\x95\x5e\x5d\x1d\x9c\x5d\x46\x3b\x26\x7d\x5e\xa2\x3d\x44\xb3\xed\x35\x83\x52\xf6\x0f\x51\xf4\xf2\x95\x1f\xf2\x73\xf9\x19\xf4\x1d\x9a\x85\xd4\xab\xc8\x66\x46\x4b\xb9\x43\xae\xac\x78\xbd\xbd\x6f\x2d\xa3\xc5\xeb\x9d\xd5\x70\x53\xee\xdc\x8a\xdc\xf1\xa8\xb5\x76\xef\x64\x64\x19\xd4\x07\xbb\x1b\xa2\xcd\xcd\x3b\xbe\x16\xdc\x56\x01\x6c\x6d\x66\x8f\x9f\x5d\x71\x18\xc8\x6c\xd6\x5e\x9a\x83\xf8\x7f\xf0\xd2\x8b\x85\xe2\xff\xc7\x80\x47\xd6\x23\x55\x97\x68\x44\x46\x20\x48\x92\x84\x38\x51\x22\x54\x68\x40\x38\x34\xdc\x1f\x0a\x92\x7a\x1b\xd5\xd5\xd3\x90\xf4\x19\x74\x15\x02\xab\x25\xd8\xb5\x75\x58\x82\x56\xb0\x2a\x44\x56\xc0\xbc\x7f\x81\xb0\x42\x83\x60\x6a\x45\x02\x33\x5d\x24\xef\xf5\x64\x0a\xfe\xba\x12\x0e\x33\x57\x1b\x7c\x24\x6f\xe0\xf4\x8b\x24\x5e\x15\x1a\xea\x96\x92\x72\x30\x9d\x14\x5c\x68\x03\xae\x10\x76\x9b\x9c\x0c\x78\xeb\x49\x79\x37\x94\xf1\xd4\x20\xd6\xc1\xb4\xca\xb9\x3b\x70\x04\x19\x1d\x1f\x6c\xef\x73\xe0\xf8\x7b\x35\x3a\x46\xe1\xd9\xcb\x70\xb5\x44\x88\x3f\x3a\x2c\xed\x88\x70\xe1\xf0\xdc\x78\x63\x7e\x0c\x7d\xcb\x2b\x4a\xab\xfe\x3c\xa7\x3d\x6f\xbf\x15\x79\xd2\x34\xf1\xc7\xf7\xbb\xec\xec\xc5\x8f\x9f\x2f\xaf\x7d\x78\xca\xa8\xcb\x0f\x66\x4c\x03\x37\x79\x1d\xe6\xa7\x60\x16\x02\x75\xbb\x27\x06\x9d\x5b\x7f\x16\x6d\x0c\x4f\xb7\x7b\xca\x50\x6b\xe9\x44\xd5\x09\xae\xdd\x00\xcc\x56\x5c\x9d\xac\xc7\x1b\x3a\x98\x4a\xdf\x62\x66\x27\x68\x6e\x2a\x9f\xcb\x6f\x4d\x95\xed\x92\x1e\x83\x7e\x4e\xb3\x36\x45\x6a\x3b\x40\x78\xfc\xe6\xfb\x69\xa8\x48\xe2\xdb\x0c\x15\x37\x42\xc7\x37\x36\xfe\x1b\x8d\xf5\x17\xcb\x5e\xaf\x87\x4e\xc3\xbe\x9f\xe8\xdb\x1e\x79\x6d\xdb\xd2\x76\x74\x88\x76\x94\xa2\xc3\xd1\xbf\x99\x4b\x36\x29\xab\xea\xf3\xba\x14\xa4\xe7\x16\xde\x75\x55\xc7\xef\xd1\x66\x46\x54\xee\x74\xaf\xbc\xe7\xbb\x01\x67\x5d\xa2\x69\x3b\xe8\xc7\xc9\x06\xb0\x2e\xda\xba\xef\x68\xd2\x56\x15\xf6\xd2\x72\xbf\x33\x5b\xd1\x79\x72\x6a\x2f\x0c\xad\x13\x78\xdb\x56\x05\xc3\x89\xf7\xd6\x09\xc9\x4b\x61\x6c\x9a\xd8\xd3\x71\xcb\xc6\x3e\xec\xc1\x90\x7b\x9c\x0c\x47\x24\x2f\x0c\x29\xf8\x83\x19\x2b\x78\xe8\x08\x38\x60\xd4\xd2\x93\x4d\xf2\xcb\x09\xad\x8a\xc6\x68\xe3\xa5\x6a\xd3\xc4\x1d\xb8\xef\xc7\xc2\xe8\xde\x1d\xc1\x68\xe8\x44\x7a\x4c\xcb\x1e\x17\xb6\x8c\x96\x5c\x6c\x9e\xdb\x83\x0c\xd6\x64\x09\xa1\xfd\xd7\x92\x2f\x96\xa4\x8c\xb6\x6b\xfb\x1f\x60\x16\x5a\x3b\x34\xed\xf7\x97\x2e\x11\xa3\x2d\x3e\x46\xdb\x6f\x42\xff\x05\x00\x00\xff\xff\xa6\x3f\xcf\x72\x24\x12\x00\x00")

func benchmarksTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_benchmarksTmplHtml,
		"benchmarks.tmpl.html",
	)
}

func benchmarksTmplHtml() (*asset, error) {
	bytes, err := benchmarksTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "benchmarks.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _chartJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x3f\x6f\xdb\x30\x14\xc4\x77\x7d\x8a\x03\x3a\xd0\x06\x5c\x39\x29\xd0\xa2\x91\x91\xc1\x51\x32\x04\x08\x3a\x24\x6e\x87\x16\x19\x9e\xc9\x27\x89\x30\x45\x0a\x24\xe5\x3f\x0d\xfc\xdd\x0b\xca\x72\xdd\x21\xe8\x24\xe9\xe9\x47\xdd\xe9\xdd\xcd\xe7\x28\x5d\x77\xf0\xba\x6e\x22\x3e\x5d\x5d\x7f\xc1\xaa\x61\xfc\x20\x4b\x4a\xf7\x2d\x96\x7d\x6c\x9c\x0f\x39\x96\xc6\x60\x80\x02\x3c\x07\xf6\x5b\x56\x79\x36\x9f\xe3\x7b\x60\xb8\x0a\xb1\xd1\x01\xc1\xf5\x5e\x32\xa4\x53\x0c\x1d\x50\xbb\x2d\x7b\xcb\x0a\xeb\x03\x08\x77\x2f\xf7\x1f\x43\x3c\x18\x4e\xa7\x8c\x96\x6c\x03\x23\x36\x14\x21\xc9\x62\xcd\xa8\x5c\x6f\x15\xb4\x45\x6c\x18\x4f\x8f\xe5\xc3\xb7\x97\x07\x54\xda\x70\x9e\x65\xb5\x73\xb5\xe1\x5c\x36\xe4\x63\xc8\x8d\x23\x35\x11\xb2\xf7\x9e\x6d\x14\x33\xbc\x75\x24\x37\x54\x73\x28\xf0\x4b\x48\xe7\x79\xe0\xc4\x0c\xc2\x68\xcb\xe2\xf5\x38\x5d\x64\x59\xd5\x5b\x19\xb5\xb3\x50\x9e\x76\x65\x02\x26\x3a\x72\x1b\x66\x60\xc3\xed\x14\x6f\x19\xb0\x25\x0f\x45\x91\x70\x0b\xcb\x3b\x8c\xaa\x5b\x1d\x7a\x32\xfa\x37\xa5\xe3\xf9\x3d\x45\x5a\xd1\xda\xf0\x64\xba\xc8\x30\xe0\x39\x29\x55\x3a\xd3\xb7\x76\x22\x14\x45\x8e\xba\xe5\xa4\x9e\xee\xc5\xbb\x94\xed\xdb\x35\xfb\xc4\xc8\xae\xc7\xc0\x27\x8f\x17\xf0\xd9\xed\xc2\xc9\xdf\x69\x9e\x9c\xb9\x2e\x19\x08\xb8\x1d\xbc\x02\xcd\x72\xaf\x43\x31\x3e\x00\x51\x47\xc3\xc5\xa8\x3a\x1b\x87\xc1\x90\x8d\xac\x56\xbc\x8f\x05\x2a\x32\x81\x4f\x6f\x8e\xa7\xcb\xf6\xfd\x4f\xd8\x30\x77\x9d\xf8\x17\x5c\x93\xdc\xd4\x3e\x25\x54\x3a\xe3\x7c\x01\xf1\xa1\xba\xae\xbe\xf2\xcd\xa8\xb4\xd3\x2a\x36\x05\xc4\xe7\xab\xab\x71\xd2\x70\x6a\x4b\x01\x71\x7d\x73\x1e\xf1\xbe\x33\xce\xb3\xbf\x08\xd2\x10\xc9\x90\x9b\xf2\x54\xaf\xdc\x4f\xe7\xda\xb4\x96\xa1\x6a\xa5\xd1\x72\xb3\x72\xcf\x1c\x38\x8a\xd7\xf3\x2f\x6d\x98\xbb\x47\x7b\x97\xbc\x84\x02\xd1\xf7\x7c\x31\x7a\xfc\xbb\xac\xa1\x02\xff\xcb\xf1\x49\x5b\x3e\xd5\x60\xc8\x3f\xa5\x34\x9c\xc9\x53\x3f\x26\x29\x87\xd9\x79\xe3\xd3\x45\x76\xcc\xfe\x04\x00\x00\xff\xff\x36\xa2\x5c\x0d\x29\x03\x00\x00")

func chartJsBytes() ([]byte, error) {
	return bindataRead(
		_chartJs,
		"chart.js",
	)
}

func chartJs() (*asset, error) {
	bytes, err := chartJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chart.js", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _footerTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcf\xb1\x6e\x03\x21\x0c\x06\xe0\x9d\xa7\x40\xec\x17\xef\x15\x61\x6d\xdf\x22\x22\x87\xc9\x59\x35\x50\x61\xdf\x2d\x88\x77\xaf\x74\x69\x97\xaa\xd9\x2c\xf9\xb3\xf5\xff\x63\x24\xcc\x54\xd1\xba\xdc\x9a\x62\x77\x73\x1a\xff\x1c\xed\xca\x51\xe4\xea\x4a\xe2\xa5\x50\xa5\xe5\x47\x04\x63\xad\x4f\x74\xbc\xd8\xdf\x6e\x8c\x59\x17\xc1\x55\xa9\xd5\x53\x5b\xeb\x77\x7e\xcd\xa9\x7e\x2e\x4c\xa2\xbf\x96\x29\xf8\x68\xb7\x8e\xf9\xea\xc0\x85\x8f\x56\xd0\x43\x0c\x1e\x98\xfe\x11\x9b\xea\x97\xbc\x01\x3c\x48\xb7\xfd\x7e\x59\x5b\x81\x23\xd6\x98\x68\x2f\xf0\x68\x97\x8e\x19\xb4\x23\x42\x89\xa2\xd8\x41\xb0\x1f\xb4\xa2\xc0\x1d\xab\x0b\xef\xe7\xd1\x9f\xef\xb0\xf3\xd9\x11\x12\x1d\xc1\x78\x78\x06\x0d\x66\x0c\xac\x69\x4e\xf3\x1d\x00\x00\xff\xff\xba\xbb\x8c\x27\x34\x01\x00\x00")

func footerTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_footerTmplHtml,
		"footer.tmpl.html",
	)
}

func footerTmplHtml() (*asset, error) {
	bytes, err := footerTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "footer.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4d\x8f\xdb\x36\x10\xbd\xe7\x57\x4c\x59\xa0\x97\x44\x66\xb7\x59\x04\x58\x87\x56\x91\xa4\x39\x14\x28\x90\xa0\x69\x0a\xf4\xb4\xa0\xc9\x91\xc5\x2c\x3f\xb4\xe4\xd0\xb6\xb0\xc8\x7f\x2f\x24\x4a\x8e\x36\x76\x82\x9c\x38\x9c\x79\xef\x69\xe6\xc1\x1c\x8b\x9f\xfe\x78\xf7\xe6\x9f\xff\xde\xbf\x85\x96\x9c\xad\x9f\x88\xe1\x80\xa3\xb3\x3e\x6d\x58\x4b\xd4\xad\x39\x3f\x1c\x0e\xab\xc3\xf3\x55\x88\x3b\x7e\x75\x73\x73\xc3\x8f\x03\x86\x0d\x58\x94\xba\x7e\x02\x00\x20\xc8\x90\xc5\xfa\x35\x7a\xd5\x3a\x19\xef\xe0\x6f\x4c\xd9\x52\x82\x57\x51\xb5\x66\x8f\x82\x17\xc0\x08\x7e\x78\x20\x74\x9d\x95\x84\xc0\x12\xf5\xd6\xf8\x1d\xfb\xfc\xb9\xe8\x0c\xf7\x09\xb6\x6a\xcc\x11\x75\x75\x30\x9a\x5a\x78\x80\x26\x78\xaa\x1a\xe9\x8c\xed\xd7\xe0\x82\x0f\xa9\x93\x0a\x5f\xc2\x44\xe4\x13\x53\xf0\xd2\x95\xd8\x06\xdd\x0f\x42\x42\x9b\x3d\x28\x2b\x53\xda\x30\xa7\x6d\x65\x65\x1f\x32\xc1\x10\x7e\x4a\xd3\x8d\x4d\x53\x38\x69\xfc\x39\xf6\xf6\x56\x05\x4f\xe8\x4f\xb0\xaf\x14\x77\xd1\xe8\x6f\x94\x14\x5a\x0b\x73\x50\x55\x57\x95\x0a\x96\xd5\x82\x6b\xb3\xff\x21\xc2\x8b\x42\x28\xd0\x26\x44\x07\x52\x91\x09\x7e\xc3\x7e\x9e\xb2\x97\x44\x08\x8f\xd4\x18\xb4\x7a\x9e\xf2\x94\x58\x90\x00\x84\xf1\x5d\xa6\x8b\xc4\xdb\xdb\xb1\xc6\x80\xfa\x0e\x37\x6c\xc8\x33\x30\x7a\xc3\xee\x19\x78\xe9\x70\x08\xf8\x23\x2d\x2b\xb7\x68\xbf\xa1\x35\xd6\x18\x34\x21\x0e\xbc\xfa\x03\xca\xa8\x5a\xb8\xcf\x18\x7b\xc1\xc7\xe2\x62\x96\x2f\xde\x2c\x7a\xdc\x4b\x9b\x71\xc3\x0a\x73\xee\x2a\xe5\xad\x33\xc4\x96\x1f\xdd\x66\xa2\xe0\xe7\xb1\x17\xb7\x12\x56\x55\x94\x26\xa1\x7e\x94\x52\xc1\x86\x88\x7a\x9e\x47\xf0\xc1\xe7\x12\x7f\x90\xae\xb3\x38\x76\x6a\x30\xad\x4b\x3d\x2f\xbb\xb5\xa6\x16\x12\xda\x88\xcd\x86\xf1\xdf\xef\x37\xff\x06\xf7\xd6\xab\xa0\x91\xd5\xa7\x50\x70\x59\x43\x05\xaf\xac\x85\xed\xfc\x40\x12\x1c\x0c\xb5\xa3\x97\x09\x9c\x24\xd5\x1a\xbf\x83\x05\xc5\x9a\xef\x7c\x25\xa4\xb5\x35\x3e\x1f\x9f\xaa\x2e\xaf\xa5\xd3\x2f\xae\x9f\xee\x57\x26\xf0\xfd\x6f\xcf\x79\x42\x95\xa3\xa1\x9e\xd5\x33\x0a\x4e\x28\x38\x43\x4d\xbd\xbd\xfe\xd2\x57\xf0\xa0\x31\xdd\x51\xe8\xa0\xb0\x9b\x10\x81\x5a\x04\x91\x3a\x79\x7a\x1d\x8b\xb7\xc9\xea\x0b\xaa\x03\xb6\x86\x4e\xaa\x3b\xb9\x5b\x4c\x23\xf8\xec\xde\xf4\x23\x08\x1d\x46\x49\x21\x5e\x30\x77\x98\x3a\x24\xa8\xe0\xdd\x88\x19\xfc\x49\x7d\x22\x74\xcf\x00\x57\xbb\xd5\x33\x98\xe7\x1b\xa3\x5f\xee\x73\xa0\x97\x1f\xb7\xd9\x53\x86\xab\xeb\xd5\xaf\xd7\x25\x03\x48\x6a\xf5\xc8\xce\x41\x57\x75\x19\x2a\x78\xf3\xfe\xe3\xac\x35\x5a\x14\x5d\x09\x8e\x18\xfc\x65\x5e\xee\x6c\x90\x1a\x23\x54\xf0\xa7\x46\x4f\x86\x7a\x08\x0d\xcc\xe9\x59\x6d\xbe\xaf\x3f\x49\x8f\x3a\xe0\x99\x4e\x79\x2d\x15\xfc\x35\x9e\x32\x25\xb3\xf3\xa8\x61\xdb\x8f\x4e\x7f\x2d\x37\xa2\xd7\xae\x1f\xcf\x4b\x66\xfe\xf8\x42\xb9\xb0\x81\x96\xe1\xb0\x00\xcf\x97\x74\x13\x02\x61\x2c\x3b\x7a\x82\x0b\x5e\xf6\xab\xe0\xe5\x7f\xe3\xff\x00\x00\x00\xff\xff\x35\xf1\xf7\x01\x48\x06\x00\x00")

func homeTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_homeTmplHtml,
		"home.tmpl.html",
	)
}

func homeTmplHtml() (*asset, error) {
	bytes, err := homeTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nobenchmarksTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x4b\x33\x31\x10\xc6\xef\xfd\x14\xf3\xe6\xbe\x0d\xe5\x05\xa1\x92\x2e\xf8\xef\xaa\x22\x5e\x44\xa4\xc4\x6c\xda\x1d\x9d\x24\x25\x99\x76\x5b\x96\xfd\xee\x12\x53\x8b\x58\x85\x9e\xf2\x84\xfc\x9e\x99\xf0\xcc\xa8\x7f\xd7\x77\x57\x8f\x4f\xf7\x37\xd0\xb2\xa3\x7a\xa4\xf2\x01\x5b\x47\x3e\xcd\x44\xcb\xbc\x3a\x97\xb2\xeb\xba\x71\xf7\x7f\x1c\xe2\x52\x4e\xa6\xd3\xa9\xdc\x66\x46\x64\xd6\xea\xa6\x1e\x01\x00\x28\x46\x26\x5b\x5f\x5a\x6f\x5a\xa7\xe3\x3b\x3c\xd8\xb4\x26\x4e\x70\x11\x4d\x8b\x1b\xab\x64\x01\x3e\xe1\xbe\x67\xeb\x56\xa4\xd9\x82\x48\xbc\x23\xf4\x4b\x31\x0c\x23\x25\x4b\x3d\xf5\x1a\x9a\x5d\x26\x55\x83\x1b\x30\xa4\x53\x9a\x09\xd7\x50\x45\x7a\x17\xd6\x0c\x59\xbe\xa5\xfd\x4d\xec\xfb\x3b\x8d\xfe\x98\x9d\xcf\x4d\xf0\x6c\xfd\x01\xfb\x51\x71\x19\xb1\xf9\xe3\xc9\x58\x22\xf8\x12\x55\x35\xa9\x4c\x20\x51\x2b\xd9\xe0\xe6\x24\xc3\x59\x31\x14\x14\x0f\xa0\x66\x1b\x51\x53\x85\x26\xf8\x24\x6a\xf4\x8b\xa0\x24\xd6\xb7\x01\xe2\x3e\xb1\x45\x88\xf0\xdc\xf7\xe3\x61\x78\x29\xe6\x93\x5b\xfe\xf2\xc7\xef\x32\x47\x74\x3c\x80\x45\x08\x6c\x63\xce\xff\x80\x2b\x59\x26\xa0\x64\xd9\x89\x8f\x00\x00\x00\xff\xff\x7b\x69\x4d\x38\x24\x02\x00\x00")

func nobenchmarksTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_nobenchmarksTmplHtml,
		"nobenchmarks.tmpl.html",
	)
}

func nobenchmarksTmplHtml() (*asset, error) {
	bytes, err := nobenchmarksTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nobenchmarks.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _runsTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x8f\xdb\xb8\x11\x7f\xbe\xfb\x14\x53\xbd\x9c\x0d\xac\xa4\xe4\x1a\xa0\x4d\x4e\x56\x91\xec\xa6\xd7\x05\x6e\xb3\x8b\xec\x5d\xd1\xe2\x10\x18\x34\x39\x96\x98\xa5\x48\x1d\x49\xad\xd7\x51\xfd\xdd\x0b\x92\x92\xfc\x77\x73\x4e\xd7\x4d\xd1\x27\xd3\xc3\x99\x1f\xe7\x1f\x67\x86\xca\xfe\x70\x71\x7d\xfe\xf3\x3f\x6f\xde\x42\x69\x2b\x91\x7f\x9b\xb9\x1f\x78\xa8\x84\x34\x93\xa8\xb4\xb6\x7e\x95\xa6\x8b\xc5\x22\x59\xfc\x31\x51\xba\x48\x9f\xbf\x7c\xf9\x32\x7d\x70\x3c\x91\xe3\x45\xc2\xf2\x6f\x01\x00\x32\xcb\xad\xc0\xfc\x0d\x4a\x5a\x56\x44\xdf\xc1\x7b\x34\x8d\xb0\x06\x5e\x6b\x5a\xf2\x7b\xcc\xd2\xc0\xe0\x99\xdb\xd6\x62\x55\x0b\x62\x11\x22\x63\x97\x82\xcb\x22\x5a\xad\x02\x8e\xe0\xf2\x0e\x34\x8a\x89\xdf\x41\x53\x22\xda\x08\x4a\x8d\xf3\x49\x64\x94\xb6\x64\x26\x30\xa1\xc6\x44\xdd\xb9\x9e\x2b\xac\x93\x39\x7f\x40\x16\x2f\x38\xb3\x25\xb4\x30\x57\xd2\xc6\x73\x52\x71\xb1\x7c\x05\x95\x92\xca\xd4\x84\xe2\x0f\x10\x0e\x4a\xb8\x14\x5c\x22\xb4\xc0\xb8\xa9\x05\x59\xbe\x82\x40\x89\x67\x42\xd1\xbb\x81\x8d\x08\x5e\xc8\x98\xa2\xb4\xa8\xa1\x05\x8b\x0f\x36\xf6\xb4\x57\x10\x88\x3d\x67\x96\x6e\xa8\x92\x19\xaa\x79\x6d\xc1\x2e\x6b\x9c\x44\x4e\x28\xfd\x48\xee\x49\xa0\x46\x60\x34\x0d\xce\x35\x9d\x77\x0b\x63\x89\xe5\x34\xa1\xaa\x4a\x69\x49\xb4\x35\xa9\x50\x84\xa1\x4e\x3e\x9a\x28\xcf\xd2\x20\x78\x3c\xb6\xc7\xd8\x91\xcd\xd2\x10\xae\x6c\xa6\xd8\x12\xa8\x20\xc6\x4c\xa2\x8a\x89\x98\x61\xa5\xc0\x2d\xa8\x12\x4a\xc7\x71\xa1\x71\x19\x3f\x7f\xf6\x6c\x83\xe6\xcd\x0e\x1b\x7f\xea\x36\x66\xc4\xa0\x0f\x42\xc6\xf8\xfd\x26\x9c\x20\x4b\xd5\x58\xcf\xf3\xd1\x6c\xfe\x0b\xcb\x38\x0e\x61\x72\xca\xa0\xee\xc3\x58\x11\x2e\xf7\x41\xa6\x53\xaa\xa4\x45\x69\x3b\x36\x97\x3a\x0b\x6e\x4b\x48\x86\x44\xeb\xf2\xc6\xb9\x05\xa9\xe5\x6a\x40\xe9\xfe\xc6\x7d\xec\x1c\x6a\xa1\x39\x1b\x16\x71\x2c\x55\xec\x72\x82\xcb\xc2\x13\x4d\x49\x98\x5a\xc4\xf1\xf7\xac\x1e\xce\xdb\x35\x8e\x12\x1d\x10\x28\x0a\x31\x2c\xe2\xf8\xf9\xf7\xce\x53\x83\xd8\x61\xc1\xe9\xd4\x34\x75\xad\xb4\xe5\xb2\xf0\x2e\xdd\xe0\x07\xc8\xca\x17\x79\x46\xba\x54\xff\xcb\x6f\x93\xb6\x4d\xde\x91\x0a\xe1\x5f\xd0\x68\xf1\x5b\x83\x7a\xb9\x5a\x45\x79\x47\x5d\xad\xb2\x94\xe4\x59\x5a\xbe\xd8\x82\xf0\xd7\x63\x2b\xb6\xc4\x92\x38\x50\xbb\x80\xec\x50\x36\x8c\xee\x2e\xc0\x96\x52\x0e\xd3\xe5\xcb\x36\xcd\x51\xf5\x2e\xc9\x11\xd9\xe1\xb3\xa7\xd3\xe0\x25\xa9\x64\x2c\x9b\x0a\x35\xa7\x51\x7e\x7d\x9b\xa5\x96\x3d\x15\xa5\x6d\x93\x5b\x8a\x92\x68\xae\x92\x6b\xd3\xf9\x06\x46\x3b\xe4\xbf\xa3\x36\x5c\xc9\xd5\x6a\x7c\xe8\xcc\x2c\xdd\xb7\xe6\x04\x06\x9e\xdf\xfc\x72\x6a\x0b\xcf\xeb\x26\xf1\x15\xd5\x22\xb5\x8d\xde\x33\xd5\xed\x5f\x60\xb8\xf1\xbf\x67\xef\x37\xe1\x4f\x7f\xa3\xb6\x30\xce\x5d\x0d\xbc\xad\x11\xd9\x55\xf9\x69\xb5\xea\x79\x4f\xe1\x94\x01\xf9\x44\xbe\x59\xad\xe0\xea\x6f\x9f\x02\xd8\x37\x07\xed\x43\xc9\x86\x2a\x71\xc2\xf0\xfe\x52\x87\x12\x7d\x22\x3b\x7a\x38\x77\xb3\x8f\x4b\xd1\xbd\xc8\xfd\x44\x66\x28\xfe\x1b\xa6\x7a\xe0\x93\xc5\xeb\x78\xfb\xf6\x23\x97\xa5\x7b\xe5\x28\x4b\xfd\x79\x3e\xe0\x9b\x55\xf7\x70\x35\x73\x0c\x9c\x75\x1d\x72\xca\xf8\xbd\x6b\x91\x8c\xdf\x77\xf9\xb2\x09\xb0\xd9\xfa\xa3\x7c\x74\x8b\x02\xa9\x05\xa2\x91\x80\x55\xf0\x49\xa9\xea\x0c\x34\x2f\x4a\x0b\x54\x70\x7a\xe7\x88\x1a\x0d\xda\xf1\x1a\xb0\x5b\xad\x55\xdd\xf8\xbb\xf3\xa7\xeb\x57\xeb\x46\x17\x8c\xff\x3f\xee\x6e\xa0\xee\x51\xcf\x85\x5a\xc4\x86\x6a\x25\xc4\x5e\xb7\x7b\xdf\x48\x73\xe2\x16\xb6\x39\x02\x6e\x0b\xc7\xfd\xf4\xb8\xd7\xdf\xd6\x53\xec\x9a\x76\xa0\x1f\x94\x8f\xe5\x79\x98\x64\x06\x7c\xf8\x9d\xfd\xe1\x36\x80\x1f\x89\x27\x91\xe5\x15\x42\x8d\x1a\xb8\x45\x4d\x5c\x58\xa3\xdc\xd1\x52\x55\x67\xa9\x2d\xbf\xa2\x26\xb2\xa9\x66\xa8\x41\xcd\xa1\xc2\x4a\xe9\x25\x10\x21\x14\xf5\x2a\x99\x5d\x0d\xfd\x96\xf9\x5f\xea\x38\x5b\x5a\x34\x5f\xa0\x2c\xb1\xc8\x82\xd0\xd7\xd7\xba\xc2\x82\x04\x7d\x6b\xad\x28\x1a\x83\xcc\xeb\x68\x90\x2a\xc9\xa2\xfc\xea\x4d\x6a\x9e\xa6\xd2\x56\x3a\x19\x4b\xaa\x1a\x16\x25\x4a\x57\x92\xfc\x43\x6c\x81\x1a\xa1\x09\x4d\x86\x45\x47\xd7\xec\xc7\x2c\xf5\xe7\x22\x8b\x19\x1a\x8a\x92\xb9\x27\x5c\xdf\x11\xd9\x63\x86\x74\x0a\xb2\xf5\x80\xe2\xa2\x67\x54\xa3\x29\x02\x55\x0c\x8f\x57\x2b\xca\x6f\xbd\xd8\xb9\x62\xf8\x95\x42\x99\x5f\xf6\xf9\xf4\xc4\x48\x7d\x71\xf2\xd4\x44\x13\x21\x50\x70\x53\x41\xe3\x32\xc7\x75\x9a\x46\xc2\xac\x7f\x04\x9d\x01\x26\x45\x72\x06\x3f\x5e\x5f\xbd\xfe\xc7\xcd\xfb\xeb\xf3\x5b\x98\x2b\x0d\x3f\xaa\x35\x8b\x89\xf2\x9b\x35\xcc\xbe\x01\xfb\x0d\xd8\xf1\x1c\xa8\x8c\x87\x5e\x03\x6d\xab\x89\x2c\x10\x92\x4b\x8b\x95\x39\x7a\x02\xc9\x87\x6e\xac\x1b\x39\x6d\xdb\xe4\x52\x32\x7c\xe8\x5e\x39\xef\x1b\x99\xdc\x68\xb4\x76\xf9\x33\x0f\xef\x1d\xd7\x2e\x77\x1b\x8f\x55\x4a\x58\x5e\x47\xce\xde\x7d\x98\xcc\xd4\x44\x7e\x36\xa7\x1c\x61\x38\xee\x1d\x91\xea\x16\xa9\xb9\x41\x7d\x5d\xbb\x13\x9d\x78\xee\xc2\xed\x8f\x7e\x6c\xfe\xc9\xdb\x96\xcf\xc1\x23\xbc\xf6\x45\xb1\x93\xef\x50\x77\x68\xbe\xad\x1f\x8d\x85\xec\x8d\xab\x1a\x07\x10\x77\x77\x8e\xc6\xbd\xc2\x82\xf4\xa2\xb7\x48\x07\xd4\x03\xf4\xcf\x63\xfe\x27\xf3\x6d\x1f\xcb\xa7\x43\xae\x9f\xca\x66\xd2\xb6\xfd\x13\x19\x92\x75\x5d\xb8\xbc\x70\x39\x30\x0a\xf5\xc5\x8c\xc3\x83\xf9\x71\xff\x78\x27\xac\xef\xf8\xe7\x9d\x19\xd2\x73\x7d\xa1\x9e\x36\xd5\x6e\xdc\xa0\xb7\x5a\x1f\xbc\x3f\xde\x39\x4a\xb8\x8c\x9c\xfc\x39\xcf\xf8\xe0\x29\x62\x51\x73\x22\x62\x4e\x95\x34\x51\x8e\x5a\x2b\x9d\xa5\x7c\x63\xd4\x3e\xc5\x6c\xbd\x26\x1c\x39\xc1\x66\x69\x45\xb8\xdc\xfe\x62\xe5\x3f\x4d\xa5\xc3\x57\xbc\x2f\xfd\xb4\xd5\x9f\x54\x28\x55\x08\x4c\xc2\x77\xb2\xc4\xa0\xbd\x96\x3f\x29\xc2\xce\x89\x10\x33\x42\xef\x46\xf3\x46\x7a\x45\x46\x63\x68\x07\xc5\xef\x89\x1f\x08\x2a\x03\x13\xc0\x07\xab\x09\xb5\x17\xc4\x92\xd1\x38\xa9\x48\xbd\x16\x61\x9b\x32\x00\x1a\x6d\xa3\x25\xfc\x2a\x71\x01\x17\xc4\xe2\x88\x25\x2e\x2d\x7f\x7d\xf1\x61\x7c\x06\xef\xfc\x24\x92\xd4\x44\x1b\xfc\xab\x50\xc4\xf6\xbb\xcf\x3e\x8c\x3f\xfc\x30\xa0\xac\xc6\xeb\x35\xd3\x64\x71\xee\xf4\x1e\x79\x5d\xce\x80\x29\xda\x54\x28\x6d\x52\xa0\x7d\x2b\xd0\x2d\xdf\x2c\x2f\xd9\xe8\xbb\xe1\x7d\xf2\xdd\x78\x90\xef\x91\xb6\x9d\xb6\xf9\x35\x75\xae\x94\x7b\xac\xf8\xc0\x76\xd1\xc9\xd2\x10\xd4\x2c\x0d\x1f\x78\xff\x1d\x00\x00\xff\xff\xf4\xf1\xd4\x51\xf1\x15\x00\x00")

func runsTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_runsTmplHtml,
		"runs.tmpl.html",
	)
}

func runsTmplHtml() (*asset, error) {
	bytes, err := runsTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "runs.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sortableCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xef\x6f\xdb\x36\x10\xfd\xee\xbf\xe2\x4d\xc0\x90\xc4\x8b\x7e\x36\x6e\x3d\x25\x0e\x90\x76\xfd\x30\x20\xd9\x80\x75\x0b\xb0\x4f\x05\x2d\x9e\x24\xa2\x14\x29\x90\x27\xcb\xde\xb0\xff\x7d\xa0\x64\x67\x45\x06\xb4\xeb\x50\xd8\x10\xc4\xc7\xc7\xbb\x77\x8f\xa7\x4b\x97\x78\x63\xfb\x83\x53\x4d\xcb\x28\xb2\xfc\x25\x7e\x6d\x09\x8f\xc2\x08\xa9\x86\x0e\x77\x03\xb7\xd6\xf9\x04\x77\x5a\x63\x22\x79\x38\xf2\xe4\x76\x24\x13\x2c\xd3\x45\xba\xc4\x6f\x9e\x60\x6b\x70\xab\x3c\xbc\x1d\x5c\x45\xa8\xac\x24\x28\x8f\xc6\xee\xc8\x19\x92\xd8\x1e\x20\xf0\xfa\xdd\x0f\xb1\xe7\x83\xa6\xe3\x41\xad\x2a\x32\x9e\xc0\xad\x60\x54\xc2\x60\x4b\xa8\xed\x60\x24\x94\x01\xb7\x84\xfb\x1f\xdf\xbc\xfd\xe9\xdd\x5b\xd4\x4a\xd3\x94\x2d\xe9\xa4\x8e\xa5\x60\x11\xb3\xd8\x6a\x7a\xff\xde\x5b\xc7\xaa\xb2\x06\x7f\x2e\x00\x80\x9d\x30\x5e\xb1\xb2\xa6\x44\x96\x14\x1e\x24\x3c\xc5\xca\xc4\x76\xe0\xeb\x89\x21\x95\xef\xb5\x38\x94\x50\x46\x2b\x43\xf1\x56\xdb\xea\xc3\xbc\x35\x2a\xc9\x6d\x89\x7c\xdd\xef\x67\xa0\xa5\x50\xf0\xc7\x48\x27\x5c\xa3\x4c\xac\xa9\xe6\x12\xab\x67\xa8\x9b\xd9\x4f\xf0\x8e\x82\x36\xa1\x63\xa1\x55\x63\x4a\xf8\x61\x3b\x6f\xd8\x5e\x54\x8a\x0f\x25\xb2\x79\xbd\x15\xd5\x87\xc6\x85\xc2\x4b\x0c\x4e\x9f\x9f\x85\x0a\x4b\xd5\x89\x86\x52\xbf\x6b\xbe\xdb\x77\xfa\x7a\xe0\x7a\x7d\x79\xe3\x77\x0d\xf6\x9d\x36\x7e\x13\xb5\xcc\x7d\x99\xa6\xe3\x38\x26\xe3\x8b\xc4\xba\x26\x2d\xb2\x2c\x0b\xfc\x68\xae\x64\x13\xe5\x59\xf6\x6d\x74\xac\xe2\xb4\xda\x29\x1a\x5f\xdb\xfd\x26\xca\x90\xa1\xb8\x42\x71\x15\xa1\x56\xbc\x89\x22\xf4\xc7\x8b\xbd\xf3\x3d\x55\xfc\x8b\x60\x65\x37\xd1\xfe\x41\xc9\xdf\x1f\x94\x44\x47\xc4\x11\xa6\xeb\xdb\x44\xbd\x55\x86\xc9\xc5\xb4\x23\xc3\xbe\x84\xb1\x86\xae\xff\xf1\x76\x36\x35\xba\xbd\xe9\x05\xb7\x90\x9b\xe8\xe1\x0a\x79\xa1\xf3\xe4\x2a\x47\x78\xdc\xe7\x39\x5e\x25\xeb\x17\x8f\x45\xd6\x16\x8f\xe1\x4d\xaf\x92\xd5\x1a\xab\x64\xf5\xfd\x7d\x91\x05\x6e\xbc\x0e\x3f\xac\xff\x88\x6e\x6f\xd2\x10\xe6\xf6\x26\xd4\x76\x7b\x76\x01\x63\x63\x47\x3d\x09\xbe\x5e\xfc\xb5\xf8\x77\x4b\xb4\x24\x24\xb9\x38\x0e\xad\x41\x32\x16\xbe\x22\x23\x95\x69\x2e\x3f\x4b\x95\x74\xe2\x1e\xdb\xa9\xb2\xda\xba\x12\xae\xd9\x8a\xf3\xec\x12\xf3\x3f\x59\xbf\xba\xc0\x37\xaa\xeb\xad\x63\x61\xbe\x50\x04\x3e\xd7\xc1\x4f\xbd\x91\x7f\x69\x8e\x8f\xd4\xff\xcf\x24\x4f\x5f\x50\x6d\x5d\x57\xc2\x59\x16\x4c\xe7\xf9\x3a\x93\xd4\x5c\x7c\x52\x43\x88\x1f\x80\x93\x6f\x83\xf3\xc1\x38\x49\xb5\x18\xf4\xa7\xe5\x9f\x8e\x96\x6d\x98\x15\x5f\xcb\xf8\x67\x51\xff\xb3\x21\x59\x52\xbc\x9c\x02\xa7\xcb\xe5\x02\x4b\x24\xe1\x78\xad\xed\x18\xfb\xca\x59\xad\x17\x98\xe0\x9f\x77\xe4\x9c\x92\xe4\xd1\x49\x8d\x13\x07\x9e\x98\x95\x69\xc2\x18\x84\xb6\xa6\x01\x8b\xed\xa0\x85\x43\x48\x8d\xd1\x9a\x33\x0e\x33\xae\x55\x52\x92\x49\x16\xd3\x44\x7b\x96\x60\x12\x74\xc2\x4a\xcc\x60\x50\xf4\x77\x00\x00\x00\xff\xff\xc3\xca\xfc\x12\xa9\x05\x00\x00")

func sortableCssBytes() ([]byte, error) {
	return bindataRead(
		_sortableCss,
		"sortable.css",
	)
}

func sortableCss() (*asset, error) {
	bytes, err := sortableCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sortable.css", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sortableJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\xcc\x9e\xac\xa0\xb6\x92\xec\x61\x0f\xf1\x1a\x8b\xd4\xf5\xa1\x40\x91\xc3\xa6\xbb\x17\xc3\x28\x28\x72\x6c\xd1\xa5\x48\x83\x1c\x39\x31\x5a\xff\xf7\xc5\x50\x96\x23\xc9\x5f\x59\x54\x80\x01\x59\x7a\xf3\xe6\xbd\x99\x21\xa9\xdb\x5b\x98\xb8\xf5\xd6\xeb\x65\x4e\xf0\xfb\xdd\xfd\x1f\xf0\x35\x47\xf8\x57\x58\xa1\x74\x59\xc0\x63\x49\xb9\xf3\x21\x85\x47\x63\x20\x82\x02\x78\x0c\xe8\x37\xa8\xd2\xde\xed\x2d\xfc\x13\x10\xdc\x02\x28\xd7\x01\x82\x2b\xbd\x44\x90\x4e\x21\xe8\x00\x4b\xb7\x41\x6f\x51\x41\xb6\x05\x01\x1f\x9f\x3f\x0d\x03\x6d\x0d\x72\x94\xd1\x12\x6d\x40\xa0\x5c\x10\x48\x61\x21\x43\x58\xb8\xd2\x2a\xd0\x16\x28\x47\xf8\xf2\x79\x32\x7d\x7a\x9e\xc2\x42\x1b\x4c\x7b\xbd\x8d\xf0\x40\x22\x33\x18\x60\x0c\xca\xc9\xb2\x40\x4b\xe9\x12\x69\x6a\x90\x6f\xc3\xc7\xed\xc4\x88\x10\x9e\x44\x81\x49\xbf\x50\x66\xa8\x04\x89\x61\x0c\x19\x06\xe7\xe3\x4d\xff\x66\xd4\x9b\xcd\xd3\x85\xf3\x53\x21\xf3\x54\x0a\x63\x92\x8a\x74\x00\x85\xf8\x8e\x5f\xf9\xfe\x79\x0f\xbe\xe9\xf5\x16\xa5\x95\xa4\x9d\x3d\x7e\x99\x50\x76\x03\x3f\x7a\x00\x00\xac\x8c\x73\xc1\x18\xf0\x95\xbc\x90\xf4\x49\x90\x48\x6e\x46\x87\xb7\x39\x0a\x85\x9e\x85\x53\xf6\x4e\xc9\xdf\xbe\x55\x41\x2d\xe9\xcc\xd7\x95\xbf\xe7\xae\xf4\x4f\x9c\x29\x0b\xdb\x30\xc0\x11\x2d\x13\x6d\x44\x42\xf9\x00\xb4\x55\xf8\x5a\x9b\xe1\x4b\xac\xd7\x68\x15\x63\x3e\x4b\x67\x13\xca\xf7\xa9\xf9\xa2\x3c\xd5\x81\x5f\xa1\x7a\x0c\x92\x1d\xe5\xa9\x64\x13\x5f\x74\xa0\x54\x3a\x4b\x42\xdb\x70\xd6\x4d\xb4\x83\x6a\x28\x82\x44\xab\xb4\x5d\xf6\x1b\xdc\x5c\x2a\x1d\x6c\x59\xfc\x6f\xda\xba\x48\x43\x5b\x16\xe8\xb5\xec\xb7\x15\x0b\xa5\xa6\x1b\xb4\xc4\x64\x68\xd1\x27\x7d\x69\xb4\xfc\xde\x1f\x1c\x6a\x93\x34\xfd\xd7\x5a\x98\xb5\x32\xf9\x5b\xdb\xf6\xa8\x05\x3d\xdb\x91\x43\xe1\x79\xb9\x50\x92\x77\x73\xf0\xd5\xb4\xe9\xb1\x70\x9b\xf3\x93\x70\xb1\x76\xbf\xc0\xa7\xf0\x32\x61\xbb\xdf\xb6\x34\xa6\x8d\xda\x75\xa2\x5a\xad\x13\x4a\x25\x75\x1d\xff\x82\xf7\x5b\x7b\xb8\x8a\x3d\x2f\x9b\x01\x71\x09\xc6\xc9\x1e\x54\x33\x35\xa8\xdb\xd9\x01\x7b\x74\x5e\xa1\xff\xdb\xbd\x84\xe4\xd8\x48\xdb\xfb\x9e\xe1\x0d\x55\x5b\xdf\x75\x56\xda\x19\x05\x07\x7b\xcd\x49\x60\x8b\x29\x07\x24\x87\x61\x14\x03\xc8\xba\xc3\xa2\x17\x49\x64\x39\x35\x44\x3c\xac\xa2\x5a\x37\x4f\x65\x91\xa1\x4f\x44\xca\xb4\xb3\x98\x7e\x7e\xa2\xab\x1c\x91\xb5\x22\xb2\x2b\x11\x7a\x91\x9c\x94\xdf\xbd\x3c\x52\xe9\x6d\x94\x33\xe4\x0c\xc7\x4c\x3b\x40\x13\xf0\x3a\x05\x47\x0f\xc5\x69\x8a\xde\xf9\x7f\xd7\x84\xd6\x02\x9b\x7e\x53\xe3\xa4\x30\x38\x71\xc5\x5a\x78\xbc\x58\x8b\xb3\xea\x6b\xd5\x17\x78\x2f\x75\x65\x77\x75\xa8\x5a\x93\xda\x10\xb0\x70\x3e\x89\x5b\x27\x8c\xe1\x6e\x04\x1a\xfe\xac\x66\xca\xa0\x5d\x52\x3e\x02\xfd\xe1\x03\x74\x0b\x41\x59\x5a\xed\xf2\x93\x5c\x1b\x95\x54\xb2\xe6\xa9\x77\x2f\x0d\x59\x6f\x92\xf6\xde\x18\x76\x5a\xdb\xf1\x91\xd1\x48\x18\xc5\x49\x67\x9b\x07\xb7\xf4\x28\x08\xf7\x07\x61\xd2\x0f\x6b\x61\x9b\xcb\x98\xe1\xd5\x2e\xc2\x87\x23\x8c\x8f\x77\x03\x5e\x31\x8c\xea\xb7\x77\xfa\x86\x29\x7e\x7b\x28\xe5\xae\x71\x98\xb7\x4e\xe9\xa8\x93\x15\x7a\xf7\xc2\x27\xf4\xa3\xf7\x62\x9b\xae\xbd\x23\x47\xdb\x35\xa6\x81\x3f\x54\x9a\x5f\x0a\xb3\xbb\x58\xa7\x10\xa9\x1b\x67\xff\x6c\xce\x0f\x9a\xcd\xb8\xaf\x9a\xc1\xe0\x33\xcd\xd8\xe7\x85\x71\x04\xcd\xf4\xbc\x36\x53\x35\x64\x78\x3f\x87\x31\xfc\xf0\xee\xe5\x81\x01\x83\xf8\xf8\x01\x66\xf3\x5d\x8d\xab\xd3\xad\xaa\xde\xaf\xaa\x74\xa9\x44\x63\xde\x72\xae\x3a\x03\xc0\x01\x8c\xa8\xd2\x56\xe0\xd9\x6a\xde\x3e\x88\x49\xf8\x25\x12\x8c\x23\xf2\xdd\x1f\x2d\x0c\x8e\x0f\xfa\x37\xb3\xbb\x39\xfc\xfc\x19\xc3\x47\xad\xcd\x2e\xfa\xaa\x56\xc2\x8a\xfd\x55\x99\x52\xc2\x57\x9a\x38\x4b\x68\xa9\xc6\xf3\x00\xf2\xaf\x35\x7e\xbb\xde\x7f\x01\x00\x00\xff\xff\x88\xef\x2f\x44\xb1\x0a\x00\x00")

func sortableJsBytes() ([]byte, error) {
	return bindataRead(
		_sortableJs,
		"sortable.js",
	)
}

func sortableJs() (*asset, error) {
	bytes, err := sortableJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sortable.js", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stylingTmplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xcf\xb1\x4e\xc3\x30\x10\xc6\xf1\xbd\x4f\x61\x79\x85\xd8\xed\xc2\x80\xe2\x32\x33\xf0\x10\x96\x7d\x71\x8e\xda\x77\x91\xef\xd4\xaa\x8a\xf2\xee\x28\x85\x89\x09\x89\xf1\x96\xdf\xff\xbe\x75\xcd\x30\x21\x81\xb1\xa2\xf7\x8a\x54\xec\xb6\x1d\xc6\x06\x1a\x0d\xc5\x06\xc1\x5e\x11\x6e\x0b\x77\xb5\x26\x31\x29\x90\x06\x7b\xc3\xac\x73\xc8\x70\xc5\x04\xc3\xe3\x78\x36\x48\xa8\x18\xeb\x20\x29\x56\x08\x27\x77\xb4\xe7\xc3\x58\x91\x2e\xa6\x43\x0d\x0f\x1c\x64\x06\x50\x6b\xe6\x0e\x53\xb0\xb3\xea\x22\xaf\xde\x8b\x72\x8f\x05\x5c\x61\x2e\x15\xe2\x82\xe2\x12\x37\x9f\x38\x83\x2b\xa0\x2d\x57\x87\xec\x4f\xee\xe8\x5e\x7c\x8b\x0a\x1d\x63\x75\x48\x19\x0b\x0f\x0b\xd2\xc5\x35\x24\x97\x44\xf6\x9e\xa4\x8e\x8b\x1a\xe9\xe9\x9f\xfe\x6e\x7e\x8a\x3d\x8f\xfe\x9b\xfc\xe3\x96\x89\x49\xe5\x77\x09\x13\xd3\xdb\x14\x1b\xd6\x7b\xf8\xf8\x09\x3c\xbd\x27\xa6\xfd\xe5\x75\x05\xca\xdb\x76\xf8\x0a\x00\x00\xff\xff\x26\x75\xc0\xb2\x87\x01\x00\x00")

func stylingTmplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_stylingTmplHtml,
		"styling.tmpl.html",
	)
}

func stylingTmplHtml() (*asset, error) {
	bytes, err := stylingTmplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "styling.tmpl.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"badquery.tmpl.html":     badqueryTmplHtml,
	"benchmarks.tmpl.html":   benchmarksTmplHtml,
	"chart.js":               chartJs,
	"footer.tmpl.html":       footerTmplHtml,
	"home.tmpl.html":         homeTmplHtml,
	"nobenchmarks.tmpl.html": nobenchmarksTmplHtml,
	"runs.tmpl.html":         runsTmplHtml,
	"sortable.css":           sortableCss,
	"sortable.js":            sortableJs,
	"styling.tmpl.html":      stylingTmplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"badquery.tmpl.html":     &bintree{badqueryTmplHtml, map[string]*bintree{}},
	"benchmarks.tmpl.html":   &bintree{benchmarksTmplHtml, map[string]*bintree{}},
	"chart.js":               &bintree{chartJs, map[string]*bintree{}},
	"footer.tmpl.html":       &bintree{footerTmplHtml, map[string]*bintree{}},
	"home.tmpl.html":         &bintree{homeTmplHtml, map[string]*bintree{}},
	"nobenchmarks.tmpl.html": &bintree{nobenchmarksTmplHtml, map[string]*bintree{}},
	"runs.tmpl.html":         &bintree{runsTmplHtml, map[string]*bintree{}},
	"sortable.css":           &bintree{sortableCss, map[string]*bintree{}},
	"sortable.js":            &bintree{sortableJs, map[string]*bintree{}},
	"styling.tmpl.html":      &bintree{stylingTmplHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

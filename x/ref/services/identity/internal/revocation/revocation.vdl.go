// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: revocation

//nolint:revive
package revocation

import (
	"v.io/v23/security"
	"v.io/v23/uniqueid"
	"v.io/v23/vdl"
)

var _ = initializeVDL() // Must be first; see initializeVDL comments for details.

// Const definitions
// =================

// NotRevokedCaveat is used to implement revocation.
// It validates iff the parameter is not included in a list of blacklisted
// values.
//
// The third-party discharging service checks this revocation caveat against a
// database of blacklisted (revoked) keys before issuing a discharge.
var NotRevokedCaveat = security.CaveatDescriptor{
	Id: uniqueid.Id{
		75,
		70,
		92,
		86,
		55,
		121,
		209,
		59,
		123,
		163,
		167,
		214,
		165,
		52,
		128,
		0,
	},
	ParamType: vdl.TypeOf((*[]byte)(nil)),
}

var initializeVDLCalled bool

// initializeVDL performs vdl initialization.  It is safe to call multiple times.
// If you have an init ordering issue, just insert the following line verbatim
// into your source files in this package, right after the "package foo" clause:
//
//    var _ = initializeVDL()
//
// The purpose of this function is to ensure that vdl initialization occurs in
// the right order, and very early in the init sequence.  In particular, vdl
// registration and package variable initialization needs to occur before
// functions like vdl.TypeOf will work properly.
//
// This function returns a dummy value, so that it can be used to initialize the
// first var in the file, to take advantage of Go's defined init order.
func initializeVDL() struct{} {
	if initializeVDLCalled {
		return struct{}{}
	}
	initializeVDLCalled = true

	return struct{}{}
}

// Copyright 2016 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by go-bindata.
// sources:
// assets/alltrace.html
// assets/blessings.html
// assets/chrome.html
// assets/collection.html
// assets/glob.html
// assets/logs.html
// assets/profiles.html
// assets/resolve.html
// assets/stats.html
// assets/vtrace.html
// DO NOT EDIT!

package browseserver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _alltraceHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x8f\xa4\x36\x14\xbc\xf3\x2b\x4a\x68\x15\x66\x76\x03\xcc\xae\xb4\x39\x4c\x03\xd1\xce\x64\x22\x8d\xb4\xda\xcb\x6c\x72\x89\x72\x70\xe3\x07\x38\xeb\xb6\x5b\xb6\x21\x69\x11\xff\xf7\xc8\xa6\x99\xfe\xc8\x25\xe1\x80\x6c\x53\xaf\x5c\xaf\xea\x31\xcf\xe5\xdb\x04\x00\x1e\xf5\xfe\x60\x44\x3f\x38\x7c\xb8\x7b\xff\x03\xbe\x0e\x84\x5f\x99\x62\x5c\x8c\x3b\x7c\x1a\xdd\xa0\x8d\x2d\xf0\x49\x4a\x44\x90\x85\x21\x4b\x66\x22\x5e\xc4\xea\x5f\x2c\x41\x77\x70\x83\xb0\xb0\x7a\x34\x2d\xa1\xd5\x9c\x20\x2c\x7a\x3d\x91\x51\xc4\xb1\x3d\x80\xe1\xe1\xe5\xa7\xdc\xba\x83\xa4\x58\x26\x45\x4b\xca\x12\xdc\xc0\x1c\x5a\xa6\xb0\x25\x74\x7a\x54\x1c\x42\xc1\x0d\x84\xcf\xcf\x8f\x4f\x5f\x5e\x9e\xd0\x09\x49\x45\xf2\xb6\xf4\x3e\x49\xe6\x99\x53\x27\x14\x21\x6d\xb5\x72\xa4\x5c\xea\x7d\x52\xd9\xd6\x88\xbd\x83\x64\xaa\x1f\x59\x4f\x75\xf6\x07\x9b\xd8\x72\x98\x35\xf1\xb2\x6e\x54\xad\x13\x5a\xc1\x0e\xfa\xcf\x67\x6e\x7f\xd6\xe6\x33\xdb\x92\xbc\x91\xe1\x7d\x8b\x39\xa2\xc2\x33\x31\x03\xa5\x39\x59\xd4\xe0\xba\x1d\x77\xa4\x5c\xd1\x93\x7b\x92\x14\x96\xf6\xe1\xf0\x28\x99\xb5\x5f\xd8\x8e\x6e\xb2\x58\x9d\x07\x29\x4c\x28\x32\xd9\xed\xe6\x95\xa7\xd3\x06\x37\x81\x4c\xa0\xc6\xdd\x06\x02\xd5\xc2\x5b\x48\x52\xbd\x1b\x36\x10\xef\xde\x9d\x5f\x7c\x7e\x39\xea\x05\xfb\x9b\xf8\x7d\x73\x01\x10\x1d\x6e\xc2\x97\x82\x33\xc7\x2c\xb9\x22\x2a\x40\x5d\xd7\xf8\x57\x27\xeb\x13\xf1\xd1\xf7\x82\x0b\xbb\x97\xec\x80\x1a\xd9\x56\xea\xf6\x5b\x76\xc9\xee\x41\xd2\xd2\x7f\xa6\x50\x5a\xd1\x35\x43\x72\xb9\xf2\x49\x55\x2e\x41\x34\x49\x65\x69\xc9\xa0\x0d\x06\xd6\xe9\x71\x9b\xb7\xa4\x1c\x19\xec\xb8\xcc\x7b\x23\x78\xba\x24\x36\xcf\x6f\xb6\x63\xfb\x8d\x9c\xc5\x7d\x8d\xe2\x61\x59\xfb\x85\xb6\xda\x37\xf3\x6c\x98\xea\x09\x6f\x16\x07\x02\xe6\x45\x1b\x47\x3c\xe6\x6a\xbd\x0f\x0c\x82\xc7\x6a\xa1\x38\xfd\x85\x57\xbe\xa5\x24\x22\x44\x07\x49\x0a\x11\xf8\x37\xa4\xc3\x9d\xf7\x15\xc3\x60\xa8\xab\xd3\xd3\x14\xdd\x5f\x8f\x4d\x36\xcf\x2b\x4b\x76\x9b\x36\xa7\x5d\x55\xb2\x66\x9e\x83\x8d\xde\x9f\x4e\xe7\x99\x14\xf7\x27\x73\xce\xf7\x55\xb9\x6f\x82\x4b\x8b\x1b\xff\xd7\xa6\x6a\xf8\xd8\x7c\x35\xac\x25\x5b\x95\xc3\xc7\x26\x34\xad\xd8\x8e\x16\x3f\xc2\x4f\x6a\xc2\xa4\xc6\x5e\x57\xbf\xbe\xc7\xea\xcb\xb5\xab\x5c\x4c\x08\x83\x95\x47\xd9\x75\x1a\x1a\xf0\x3e\x45\x4c\xbe\x4e\x8f\xd1\xdf\x87\xdc\x37\x7b\x6d\x45\xd0\x75\x6f\x48\x32\x27\x26\x4a\x57\xc1\x41\x61\x4b\x52\x62\x5d\xe4\xf9\xfb\x0f\x79\xab\x25\xae\x7e\x97\x63\x0b\xc7\xb4\xe5\x99\x3f\xd5\x28\x9b\x8b\xb9\x7a\x55\x2f\x78\x10\x1e\x1a\x38\x83\xc7\x12\x29\x9a\xd7\xe4\xca\xc9\x05\x4f\x7e\x54\xf5\xd1\x0f\xef\xbf\x73\x75\x1c\x88\xe2\x99\x7b\x1f\x13\x3b\xae\x43\x62\x55\x29\xc5\xf5\x85\x97\x89\x55\xe5\x2a\xa9\x2a\xb9\x98\x9a\xf5\xfb\x59\x70\xc7\xa3\x7f\x02\x00\x00\xff\xff\xbf\xe1\x74\x56\x56\x05\x00\x00")

func alltraceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_alltraceHtml,
		"alltrace.html",
	)
}

func alltraceHtml() (*asset, error) {
	bytes, err := alltraceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "alltrace.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blessingsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x0c\xdc\x1e\xb6\x8b\x4a\xea\x06\x48\x0e\x81\x22\x20\x71\x7c\x08\x5a\xb4\x85\x93\xf6\x1a\xd0\xe4\xd8\x9c\x82\x26\x03\x92\x52\xe2\x12\xfa\xef\x85\x44\x59\xfe\xa8\xed\xc0\x5e\xe7\x12\x51\x9c\x79\x6f\x46\x6f\x3e\x1c\x42\xf6\x75\x00\x00\x30\x32\x6f\x4b\x4b\x73\xe9\xe1\xea\x97\x6f\x37\xf0\x22\x11\xfe\x66\x9a\x09\x2a\x17\x70\x5f\x7a\x69\xac\x4b\xe1\x5e\x29\x68\x8d\x1c\x58\x74\x68\x2b\x14\x69\xeb\xfd\x97\x43\x30\x33\xf0\x92\x1c\x38\x53\x5a\x8e\xc0\x8d\x40\x20\x07\x73\x53\xa1\xd5\x28\x60\xba\x04\x06\x0f\xcf\x8f\x89\xf3\x4b\x85\xad\x9b\x22\x8e\xda\x21\x78\xc9\x3c\x70\xa6\x61\x8a\x30\x33\xa5\x16\x40\x1a\xbc\x44\xf8\xed\x69\x34\xfe\xfd\x79\x0c\x33\x52\x98\x0e\xbe\x66\x75\x3d\x18\x84\x20\x70\x46\x1a\x61\xc8\x8d\xf6\xa8\xfd\xb0\xae\x07\xb9\x43\xee\xc9\x68\xe0\x8a\x39\x77\x37\xec\x8e\x49\xc2\x51\x7b\xb4\xb0\x10\x2a\x99\x5b\x12\xc3\xa2\x25\xce\xe5\x75\x31\x52\x8c\x16\x28\xf2\x4c\x5e\x77\x2f\x05\x55\x2b\xff\xc6\x9e\xa3\x52\xb0\x7a\x48\x92\x6f\x57\x09\x37\xaa\x03\x68\xfe\x42\x48\x1f\x14\x3a\x47\x7a\xee\xea\x3a\x42\x64\x82\xaa\x62\x90\x67\x1d\x7f\xd1\x84\xfb\x4e\x5e\x42\x3a\x41\x6e\xe6\x9a\xfe\x45\x71\x5e\xb8\x6b\xff\xf3\x23\xce\x4b\xb5\x3e\xc4\x14\x2c\xd3\x73\x84\xb4\x8b\xbf\x37\x54\x54\x84\x90\xd6\x75\x9e\x29\xda\x75\x41\x2d\x36\xcc\xf3\x6c\x05\xfa\xff\xe4\x57\xb6\xe7\xe4\xfb\x67\x39\x55\xc4\x7f\xc5\xe5\x89\xe9\xc2\x8c\x3e\x50\x24\xef\x24\xbc\x3c\x20\x56\xda\x63\x7f\x2e\xdb\x08\xad\xa7\x19\x71\xe6\x71\x24\x19\x69\x77\x66\xb1\xad\x61\x20\xe2\xc0\x97\x17\xe3\x99\xba\x85\x10\x14\xea\x46\x81\x9f\xbe\xa7\x14\xa3\x8e\x3f\xf2\x06\x9b\xc4\xc7\xcf\xdd\x23\xdc\xde\x6d\x89\x7b\x62\xe8\xbd\x9b\xbc\x29\xda\xb0\xe1\x87\x10\x7a\x92\xa6\x3c\xe4\xcd\x8e\xe5\x89\x91\xf7\x7e\x9e\x4d\x15\x6e\x7a\x0a\xe6\x59\x12\xdf\x36\xc7\x7f\xdc\xee\x9b\xf5\x31\x49\x1c\x2a\xe4\xeb\x2b\x27\x99\x30\xef\x49\x72\x25\xde\xf6\x70\x45\x3e\x89\x4c\xec\xbf\x8b\xf7\xf6\xf0\x65\x34\x10\xfb\xa3\x7d\x7d\x8d\xa9\x6a\xa3\x13\x5d\x2e\xd0\x12\x1f\x6e\xea\x9f\x67\xfe\x08\xef\xe9\xd0\xe3\x0f\x8f\xda\x91\xd1\x97\x06\x6e\xfb\x05\x05\xc4\x6e\x81\xb6\x15\x2f\xcb\x30\x62\x15\x32\xef\x8e\xc3\xe6\xd9\x21\x29\xf2\xec\x88\x88\xb9\x9f\x1a\xb1\x3c\x0c\xbb\x6e\x99\x46\x9a\xd8\x31\x68\x7d\xd3\x30\xb1\xc0\x77\x46\xe2\x36\xf6\xe7\xc5\x51\x34\x8d\x12\xa1\x9b\x3e\xb9\xec\x87\xeb\xb0\xd3\x5e\xfb\x4b\x53\x6c\x4f\xd1\x10\x4a\xbd\x60\xd6\x49\xa6\xfa\xd1\x19\x3f\xd7\xe6\x28\xbd\x7c\x92\xcd\x60\x8c\x34\x5d\xa5\xd4\xf5\x86\x6e\xac\xea\x64\x63\x55\x54\x6d\xcb\xf0\x68\x20\x6d\x30\x53\x9b\x15\xed\x38\x6b\x81\xea\xba\x19\xc5\xcd\xa1\x25\xd9\x5e\x72\x7b\xfd\xcf\xac\x5a\xd8\xb3\x44\x77\x3c\xf7\x57\x6e\x9e\xb5\xdf\x6a\x67\xde\xc6\xd5\xb5\x3e\xf6\x2b\x6c\x1f\xd7\xe1\x15\xbd\xda\x77\x63\x6b\x8d\x3d\x6f\xc7\xe5\xd4\x8b\xcb\x3c\x5a\x62\x2a\x21\x6e\xb4\x1b\x16\xa4\x67\x26\xcf\xa8\x18\x4f\x26\x7f\x4c\xbe\x84\x50\x61\xc3\xf2\xf4\x78\xce\xd6\xdb\xad\xcc\xf6\x47\xca\xe1\xac\xda\xff\xff\x05\x00\x00\xff\xff\x37\x19\x1f\xac\xe6\x0a\x00\x00")

func blessingsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_blessingsHtml,
		"blessings.html",
	)
}

func blessingsHtml() (*asset, error) {
	bytes, err := blessingsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blessings.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _chromeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x6d\x6f\xe3\xb8\x11\xfe\x9e\x5f\x31\xa7\xa2\xb0\xbd\x17\x49\xce\xde\x0b\x76\xbd\x56\x0e\x39\x27\xbd\xdb\x76\x6f\xf7\xd0\xa4\x57\x14\x8b\x20\xa0\xc5\xb1\xc4\x35\x45\x0a\x24\x65\xc7\x35\xfc\xdf\x0b\xea\xc5\x96\x64\x29\x9b\x5c\x9a\x7c\x88\x25\x72\xf8\xcc\x0b\x67\x1e\x8e\xe9\xed\xd6\x7f\x75\x02\x00\x30\x93\xe9\x46\xb1\x28\x36\xf0\x7a\x7c\xf6\x23\xdc\xc4\x08\x7f\x10\x41\x28\xcb\x12\xb8\xc8\x4c\x2c\x95\xf6\xe0\x82\x73\xc8\x85\x34\x28\xd4\xa8\x56\x48\xbd\x7c\xf5\xbf\x34\x82\x5c\x80\x89\x99\x06\x2d\x33\x15\x22\x84\x92\x22\x30\x0d\x91\x5c\xa1\x12\x48\x61\xbe\x01\x02\x3f\x5f\x5f\xba\xda\x6c\x38\xe6\xcb\x38\x0b\x51\x68\x04\x13\x13\x03\x21\x11\x30\x47\x58\xc8\x4c\x50\x60\x02\x4c\x8c\xf0\xe1\xfd\xec\xea\xe3\xf5\x15\x2c\x18\x47\xef\xe4\x95\xbf\xdb\x9d\x9c\x4c\xbf\xb9\xfc\x34\xbb\xf9\xcf\xef\x57\x10\x9b\x84\x9f\x9f\x4c\xed\x07\xdc\x27\x5c\xe8\xc0\x89\x8d\x49\x27\xbe\xbf\x5e\xaf\xbd\xf5\x77\x9e\x54\x91\x7f\xf6\xf6\xed\x5b\xff\xde\xca\x38\xe7\x27\x27\xd3\x18\x09\x3d\xcf\x95\x4f\x0d\x33\x1c\xcf\x2f\x71\x9e\x45\x11\x13\x11\x6c\xb7\xde\xb5\xf5\x49\x7d\x24\x09\xee\x76\x53\xbf\x10\x28\x84\x13\x34\x04\x04\x49\x30\x70\x56\x0c\xd7\xa9\x54\xc6\x81\x50\x0a\x83\xc2\x04\xce\x9a\x51\x13\x07\x14\x57\x2c\x44\x37\x7f\x39\x05\x26\x98\x61\x84\xbb\x3a\x24\x1c\x83\x33\x6f\xec\x94\x50\x9c\x89\x25\x28\xe4\x81\x93\x47\x42\xc7\x88\xc6\x81\x58\xe1\xa2\xb0\x5f\x4f\x7c\x5f\x1b\xa9\x48\x84\x5e\x24\x65\xc4\x91\xa4\x4c\x7b\xa1\x4c\x7c\x1b\x54\x2f\x42\x93\x50\xee\x31\xe9\x9f\x79\x63\xef\x47\x3f\x21\x06\x15\x23\xdc\x33\x48\xb8\x3b\xe7\x19\x7a\x09\x13\x5e\xa8\x75\xa5\x51\x87\x8a\xa5\x06\xb4\x0a\x9f\xa9\xc1\xe2\x7e\xd1\xce\xf9\xd4\x2f\x20\x9f\xe0\xd1\x42\x0a\xa3\xdb\xda\x58\x28\xc5\x4f\x0b\x92\x30\xbe\x09\x7e\x2b\x95\x7c\xfb\x3e\x94\xe2\x60\xba\x05\x2c\x9e\xed\x9f\xb7\x60\xf7\x48\x8b\x10\xc3\x76\x3f\x6c\xff\xac\x02\xb7\xc0\x9a\x40\x22\x85\xd4\x29\x09\xf1\xdd\x5e\x66\x77\xb2\x7f\x9c\x4b\xba\x01\x9b\x09\xa8\x5a\x20\x73\x12\x2e\x23\x65\x53\xd0\x0d\x25\x97\x6a\x02\x7f\x19\x8f\xdf\x7c\xf7\xe6\x6f\xf0\x0d\x4b\xec\xa6\x13\x61\x3a\x21\xbd\x84\x72\x97\x12\x43\x5c\x43\xe6\x1c\xef\xee\x42\xe4\xdc\x75\x85\x14\xae\xc8\x12\x54\x2c\x84\x54\x61\x4b\x5b\x42\x54\xc4\xc4\x04\xc6\xe9\xfd\xbb\xc6\xc4\x3a\x66\x06\xdd\xdc\x81\x89\x5d\xe7\xae\x15\x49\xbb\xf5\x86\x31\x51\xc6\xb5\x99\x48\x98\x68\xf9\x93\x4a\xcd\x0c\x93\x62\x62\x37\x87\x18\xb6\xc2\xba\x9a\x3c\x88\x13\x78\x33\x6e\xa9\x8f\xd1\x96\xf8\x04\xbe\x6f\x4e\xd4\x95\x12\x85\xc4\xcd\x35\xf7\xe8\x23\x73\x2d\x79\x66\x1a\xfa\x28\xd3\x29\x27\x9b\x09\x08\x29\xba\xf7\xa5\x86\xeb\x69\xe4\x18\x1a\xa4\x0d\x05\x7b\x88\x39\x97\xe1\xb2\x1b\x83\x66\x8a\x58\x23\xdc\x02\x41\xaa\x9e\xe0\xcc\xa5\x31\x32\x99\xc0\x9b\xa6\xf7\xaa\x70\xfe\x75\x2b\x28\x8f\x74\x6d\xc1\xb1\xb1\x8c\x33\x81\x6e\x15\xd0\x36\x66\xf7\xf8\x83\xbe\x34\x3c\x08\x33\xa5\x6d\x8a\xa6\x92\x09\x83\xaa\x61\x2e\xa1\x94\x89\x28\x4f\x2d\xf8\x3e\xbd\xaf\x3e\x1f\xa9\x66\x22\xa4\x19\xee\xb7\x60\x34\x89\x2d\x89\x37\xa3\x77\x5c\x28\xb3\xd9\xec\x91\xf0\xdd\x9b\xdb\x57\x7b\x8b\xba\x63\xe5\x4c\x5e\x20\x75\x6d\xf6\xff\xd4\xaf\xb1\x45\x45\x7a\x66\x93\x62\xe0\x18\xbc\x37\xfe\x17\xb2\x22\xc5\xa8\xd3\xe4\x42\x7b\x5c\x44\xda\x10\xc3\xc2\x82\x04\x6d\x06\x6a\x9f\x4b\xcb\x10\x5d\x84\xf7\x20\x76\xc5\x56\x8b\x4c\x84\xd6\x6d\xa0\x8a\xac\x7f\x65\x96\x70\x37\xbf\x28\x92\xc6\x7a\x48\x47\x35\xcf\x7d\x1f\x66\x52\xac\x50\x19\xb0\x04\xe2\xed\x27\x56\x44\xe5\x23\x10\xc0\xdf\xaf\x3f\x7d\xf4\x52\xa2\x34\x0e\xe9\xe8\x5d\x43\x62\x89\x1b\x0d\x01\x7c\x1e\x9c\x25\x83\x53\x18\x9c\x8d\x8b\x8f\x78\x70\x7b\x90\xb3\x32\xde\x42\xaa\x2b\x12\xc6\xc3\xca\xae\xe1\x72\xd4\x2c\x2e\x62\xc8\xe7\xe5\x2d\x04\xd5\x93\x97\x90\xf4\x20\x8d\x1c\x47\x2d\xfe\x52\x68\x32\x25\xe0\xb3\xc0\x35\x5c\x12\x83\xc3\xdc\xc2\xf7\xc2\x58\xe1\xcf\xe3\x5b\x78\x05\x67\xe3\xf1\x78\x34\x3a\x85\xc6\xcc\xd9\xed\xe8\xb6\xbe\xa9\xbb\x9a\x4b\xbb\x96\x7b\x14\x17\x24\xe3\xe6\xb2\xcc\x21\x08\x72\xdf\xde\x9d\x34\xc2\xa7\x90\x18\x04\x22\x28\x68\x34\x59\x0a\x51\x1e\xe6\x7c\xa0\x4a\x3e\xa8\x92\x4f\x37\x03\x7c\x20\x87\x00\xa8\x0c\xb3\x04\x85\xf1\xc2\x4c\x29\x14\xe6\x3a\xdf\x50\x1b\x77\x14\xe6\xa3\xa4\xb5\x8c\x2b\x0e\xb2\x82\x7d\xb5\x67\x33\x65\xe8\x94\xab\x9c\x53\xd8\xa6\x24\x5c\x92\x08\xf5\xe4\xb3\x13\x4a\x85\xb9\x98\x73\x5b\xf7\xad\x09\xa0\xd1\x7c\x12\x1f\x24\xa1\x33\xc2\xb9\x2d\x84\x43\xdc\x9b\x41\x3f\x78\x7b\x30\x7c\x21\x15\x94\x38\x35\xc9\xdc\x39\x3b\x3a\xeb\xf4\x30\x07\xb9\xe2\x68\xdf\x86\x03\xca\x56\x83\x51\xa3\xce\x1a\x2b\xbd\x90\x13\xad\x6d\x5f\x64\xe3\xdf\x3a\x72\x06\xcd\xfa\xac\x96\x90\x34\x45\x41\x67\x31\xe3\x74\xd8\x44\x1b\xd5\x76\xaf\xdf\xa3\x87\x36\xae\x4c\x8d\x52\xe2\xba\x14\xf8\x53\x8e\xf6\x82\x34\x7d\x7e\xe0\x54\x79\x84\xff\xbd\x4a\xfa\x42\xf1\xc8\x04\x2e\xe2\x50\x0a\x07\xb0\xdd\xbd\x6b\x4d\xed\xd7\x1c\xcd\x3e\x8a\x12\x8e\x4c\xf2\x1a\x93\x7b\xe5\x4f\x09\x38\x94\xf6\x16\x54\x93\x3f\x77\x4c\x37\xa3\x7f\xe8\x0b\x06\x4d\x59\xb6\x80\xe1\x12\x82\x20\x68\xf3\x44\xdb\x8f\x63\xd8\x6f\x03\x18\x40\x75\x10\xb5\x60\x77\x8d\xb7\x56\x2d\xd4\x37\x36\x07\x6d\xb9\x97\xa7\xa6\x81\x00\x2c\x2d\x96\x65\xbe\x62\x3a\x23\x9c\xfd\x37\xb7\xcd\xbb\x24\x86\xdc\xd8\x36\x71\xd8\x5a\x4a\x8d\x47\x28\x9d\x49\x9e\x25\x62\x38\xa0\xc4\xa0\x61\x09\x5a\x3e\x6f\xc7\xb0\x29\x29\xb2\x64\x8e\xaa\x5f\xee\x9f\x72\xad\x87\x25\xab\x77\x58\x2b\x53\x6b\x56\x9e\x23\xad\xa0\x1d\x7a\xc4\xd3\xd6\x4c\xad\x4b\x6c\x4f\x71\x8c\x50\xd0\xc9\x11\x58\xbd\x8b\x1a\xd8\x26\x70\xd0\x12\xd8\xb5\x91\x34\x2a\x86\xba\x0b\x69\xdc\x35\xb8\x6f\x0f\x06\x65\xd7\xde\x56\xd0\xde\xd9\x0e\x95\xab\x8b\x7b\xd6\xa9\x71\x21\x55\x42\xcc\x04\x06\x3a\x96\xca\x7c\xd5\xf4\x82\x25\x2f\x14\x92\x41\x17\x1a\xc7\x85\xb1\x71\xfd\x1a\xcc\xa1\x29\x9a\x15\xae\x6d\x17\x8c\xf3\x09\x0c\x8c\x22\x42\x17\x27\xd3\xa0\xb5\x6a\x77\xbc\xc3\x45\xaf\xfe\x40\x4a\x5a\x43\x67\x56\xa8\x33\xa5\x8b\x96\xdc\xf6\x31\x43\x6a\x4e\xab\x7c\x69\x92\x57\x9d\x2b\x8e\x38\x2b\x67\xf4\xfc\x7a\xa0\x87\x46\x2a\xc1\x27\x11\xc9\x9e\xdd\x0a\x2e\xa9\x5e\xbb\x85\xbe\xc2\xe7\x7f\x9e\x58\x3a\x14\x3c\x9e\x5b\xea\xbe\xdf\xe0\xbd\x39\x66\x52\x3b\x6a\x7b\x8f\xe1\xb2\xc7\xfb\x06\x21\xd5\xb1\xda\x54\xd0\x7b\xd2\x75\x01\x8c\xda\x0d\x5a\xf3\x9c\xba\xa0\x14\x42\xce\xc2\x25\xc4\x44\x50\x5e\x9e\xd9\x48\xc2\xf8\x60\xd7\xd3\x4f\x9b\x3c\x55\x33\xf5\x0f\xdc\x40\x00\xcb\xfe\xcd\xb6\x9c\x76\xb5\x42\x61\x3e\x30\x6d\x50\xa0\x1a\x0e\x72\x63\x06\xa7\xd0\xd3\x37\x3d\xc1\x88\xfa\xf6\x97\xd6\x74\x89\xd4\xce\xb1\xbe\xc3\xaa\x2f\x05\x3a\x1c\x7a\x38\x39\x1f\x02\xda\x01\x72\xdd\xbe\x59\x78\xa4\x81\xc7\xfc\xf8\x24\xb3\xba\xac\x69\x13\x5a\x2b\x09\x77\x47\x79\x75\xfc\xbc\xff\x36\x57\x7e\xe5\x9a\xfa\xc5\xad\xdd\xc9\x74\x2e\xe9\xa6\xfc\x0a\xf6\x8d\xeb\xc2\x05\x5f\x93\x8d\x06\x1d\xcb\xb5\x06\x52\xde\xe8\x9c\x02\xae\x50\x00\x13\xa0\x13\xc2\x6d\x66\xea\x50\x21\x0a\xed\x81\xeb\x96\x8b\x29\x5b\x41\xee\x5a\xe0\x24\x94\xbb\x9c\x6c\x64\x66\xc0\x3e\x7e\xd1\xf5\xb7\xe2\xd1\x75\x8b\x5b\xa7\x02\xdf\x39\xdc\x46\x4d\xcb\x3b\xa4\x23\xa8\xbb\xbb\x23\xd9\x7e\xbd\x95\xb0\xab\xe4\xba\xb5\x60\xef\xe9\x0d\x33\x1c\xf7\xf6\x37\xa6\x75\x4a\xc4\x31\xa8\x9b\x5f\x5e\x3a\xc5\xf5\xe6\xd4\xb7\x42\x3d\xd0\xb6\x92\xf3\x9b\x26\x75\x0a\x46\x02\xe1\x2c\x12\x20\xc8\x8a\x45\x05\x85\x1b\x99\x5f\xc5\x16\x97\xc3\x9d\x16\x74\x7a\x55\xdc\x5e\x29\xfb\xd5\x99\xb2\x55\x8f\xee\x8f\x7b\x35\x1e\xfc\x1b\x21\x66\x14\x81\x99\xfd\xde\x1d\xef\x5c\x03\x41\x90\x86\xde\x9a\xcd\xf5\xbd\xe3\x44\x45\xe8\x16\x48\xae\x14\x7c\xd3\x11\xe3\x1c\x8e\x74\x83\xdd\xdd\x71\x26\x96\xd5\x75\xa6\x20\x09\xfe\x24\x82\xd6\x5d\xb1\x73\x6e\x3f\xa7\x3e\x79\x0e\xf4\x9c\xa3\xd6\x4c\x44\xba\x0b\xff\xe7\x6a\xf2\x99\x4a\xb4\x21\xa6\x53\xc1\xb5\x9d\x78\x26\x38\x97\xdd\xc6\x7f\x90\xcf\xb6\x3b\xe2\x72\xde\x05\xfd\x0b\x97\xf3\x67\x42\xa7\x4a\x2e\x18\xc7\x4e\xcb\x7f\x2f\xe7\x9e\xa9\x62\x65\x14\x09\xbb\x35\xdc\xe4\x33\x9d\xf8\x53\x5f\x90\x56\xe5\xb4\x8a\xa9\x60\x46\x54\xb5\x91\x1e\x8a\xb1\xbd\xdb\x31\x1f\xf5\x56\x50\x17\x0f\xbd\x4c\x7d\xbc\x78\x6d\xbc\x58\x5d\xbc\x50\x4d\xbc\x50\x3d\xbc\x70\x2d\xbc\x54\x1d\xb4\x6a\xa0\x9d\xff\x09\x61\x1d\x87\xdf\xdd\x5d\xf9\xcb\x5c\x3b\xdf\x35\x16\x37\xb2\xe5\x8a\xf2\xd5\x75\x43\x14\x06\x55\x7e\x6c\x44\x8a\xd1\xae\xec\x8f\x7f\xa8\x56\xd5\x7e\x82\x72\xce\x8f\x7e\x34\x8c\x7f\x68\x3b\x50\x6a\x69\x0e\x6f\xb7\xf9\x4f\x18\xe0\x54\x96\x82\xb7\xdb\xfd\x66\xbd\x99\x15\x03\xf0\x2b\x2a\xdc\x6e\x51\xd0\x5d\xb3\xa7\x9a\xc6\xca\x3f\x87\xed\x76\xcd\x4c\x0c\xde\x4c\x26\x09\x11\xf4\x03\x13\xd8\x96\x7b\x96\xb3\xe7\x35\xe0\x63\xa7\xa0\x83\x69\x42\xe4\x1c\xaa\x07\xd7\x3d\x7b\xed\x86\x92\x43\x3b\x58\x36\x44\x47\xfd\x40\x6f\x8c\x72\xef\x2b\x5f\x53\xc5\x84\x59\x80\xf3\xd7\x95\x03\xde\x1f\x79\x26\xfd\x7f\x5d\xce\x53\xf0\x19\xce\x3a\xe7\xd3\x54\x61\xe5\xa5\x7d\x7c\xb2\xaf\xb5\x44\xb7\xa9\x5d\xb6\xab\x05\xca\xd4\x2f\xda\xdf\xa9\x5f\xfc\xf0\xfd\xbf\x00\x00\x00\xff\xff\xd4\x5a\x82\x3b\xbc\x1f\x00\x00")

func chromeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_chromeHtml,
		"chrome.html",
	)
}

func chromeHtml() (*asset, error) {
	bytes, err := chromeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chrome.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _collectionHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x51\x6f\xda\x3c\x14\x7d\xe7\x57\x5c\x45\x9f\xf8\xda\x4a\x49\xd6\x4e\xdd\xc3\x66\x32\xb5\xb4\xd2\x2a\x26\x54\x15\xd6\x97\x69\x0f\x8e\x7d\x43\xac\x1a\x1b\xd9\x0e\x6d\x16\xf1\xdf\x27\x27\x50\x16\x48\xaa\x3d\x4d\x1a\x0f\x10\x5f\x9f\x73\xae\xef\xbd\x07\xa7\xaa\xe2\xb3\x01\x00\xc0\x58\xaf\x4a\x23\x16\xb9\x83\x8b\x77\xe7\x1f\x60\x9e\x23\x3c\x52\x45\xb9\x28\x96\x70\x55\xb8\x5c\x1b\x1b\xc1\x95\x94\x50\x83\x2c\x18\xb4\x68\xd6\xc8\xa3\x9a\xfd\xcd\x22\xe8\x0c\x5c\x2e\x2c\x58\x5d\x18\x86\xc0\x34\x47\x10\x16\x16\x7a\x8d\x46\x21\x87\xb4\x04\x0a\xd7\xb3\x9b\xd0\xba\x52\x62\x4d\x93\x82\xa1\xb2\x08\x2e\xa7\x0e\x18\x55\x90\x22\x64\xba\x50\x1c\x84\x02\x97\x23\x7c\xbd\x1b\xdf\x4e\x67\xb7\x90\x09\x89\xd1\xe0\x2c\xde\x6c\x06\x83\xaa\xe2\x98\x09\x85\x10\x30\xad\x1c\x2a\x17\xf8\x28\xb1\xc8\x9c\xd0\x0a\x98\xa4\xd6\x8e\x82\xed\x32\x0c\x19\x2a\x87\x06\x96\x5c\x86\x0b\x23\x78\x90\xd4\x99\x49\x7e\x99\x8c\xb5\x94\x5b\x52\x55\x45\x73\x83\x18\xdd\x50\x47\x53\x6a\x31\xba\xe3\xd1\x94\x2e\x71\xb3\x89\x77\x5b\x7b\xf4\x7e\x93\xc4\xf9\xe5\x56\x8f\x8b\xf5\x2e\xb5\x4f\xc5\x50\x4a\xd8\x3d\x84\xe1\xf9\x45\xc8\xb4\xdc\xe6\x6e\xf0\x72\xbf\xf0\x4b\x97\x5c\xad\x56\x70\x2d\xd1\x5a\xa1\x16\x1f\x7d\x80\x70\x9e\x74\x1d\x6c\x07\xf2\xf9\x39\x3f\x94\x19\x1b\xa4\x4e\x9b\xff\xad\x1f\x8a\xe9\x57\x6c\xd7\xf3\xb6\xe6\xb4\x58\xa6\x68\xfc\x84\x1f\xf4\xb3\x3d\x92\x7a\xd0\xcf\x63\x5d\x28\xd7\x4d\x9e\x6b\x47\x25\x4c\xb0\x84\x99\xf8\x89\x47\xe4\xb9\x76\x13\x2c\xfd\x56\x37\x7d\x82\xa5\xf5\xbf\xad\x70\x0b\x05\x40\x1c\x4d\x25\xb6\x63\x3e\x6a\x12\xe2\xf2\x84\xc4\xfe\xcb\xe5\x5e\xea\xf5\xf9\x91\xca\x02\x9b\x55\xec\x4c\x0f\x15\x98\x96\x76\x45\xd5\x28\x78\x1f\x1c\x42\x00\xaa\x4a\x64\xd0\x14\xe1\x0f\x79\x4f\x17\x18\x7d\xa1\xf6\xde\xe0\x7a\xb3\x39\x42\x03\x10\x0a\xb9\xc1\x6c\x14\xb0\xd7\xd6\x7f\x56\xa3\xaa\xfa\x2f\x9a\xf9\xbf\x92\x69\x3c\x35\xe4\xe9\xe8\xed\xa9\x0f\xb9\xea\x44\x6c\xf9\x6c\xcf\xef\x9b\xf1\x90\xa9\x1e\x4c\xa3\xd1\x51\xac\xff\x7c\x4f\x29\x7b\xfa\xd1\x55\x59\x4c\xbb\xda\x83\x8a\x77\x34\x62\xa8\x52\xbb\xfa\x74\xd8\xf0\xbe\x49\x54\x95\xa1\x6a\x81\x87\x7d\x9e\x60\xf9\x48\xa5\xed\x90\x6f\x46\x57\xfb\xeb\x4e\x71\x7c\xf1\xae\x72\x7c\x17\x9a\x60\xf9\x5b\x80\xf8\x4b\xca\x87\x6b\x37\xf8\x8d\x3a\xd0\xec\x77\x1e\x06\xa5\xc5\xfe\xa4\x2d\xbf\x9c\x28\x0d\x4f\x58\xda\xd3\xb7\xe4\x3a\x3a\xf4\xe7\xde\x93\xa8\x0e\xfb\x32\xc5\x17\x57\xd7\xf8\x4f\xfb\x6f\x98\x09\x63\xdd\x13\x96\xaf\xa8\xe3\x02\x7b\x3c\x7a\xa2\xf0\xc5\x9d\xfe\x4d\x8f\x92\xf8\xe8\xf6\x69\xdf\x63\x24\xde\x5d\xf6\x24\xe6\x62\x9d\x0c\x48\xbc\x7d\x3b\x25\xfe\x6d\xd6\x9c\xe0\x57\x00\x00\x00\xff\xff\x75\xd7\x68\x3b\x89\x07\x00\x00")

func collectionHtmlBytes() ([]byte, error) {
	return bindataRead(
		_collectionHtml,
		"collection.html",
	)
}

func collectionHtml() (*asset, error) {
	bytes, err := collectionHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "collection.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _globHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x6b\xdc\x30\x10\x85\xef\xfe\x15\x0f\x53\x4a\x1b\xb0\xdd\x04\xd2\x43\xf1\xba\xa4\xc9\x1e\x02\x25\x2d\xbb\x6d\xef\x5a\x69\x6c\x09\xb4\x52\x3a\x92\xdd\x2e\x42\xff\xbd\xd8\x78\x49\x5a\x1a\x5d\xa4\x61\xde\x7c\x33\xf3\x94\x52\x73\x51\x00\xc0\xad\x7f\x3c\xb1\x19\x74\xc4\xd5\xbb\xcb\xf7\xf8\xa6\x09\x3f\x84\x13\xca\x8c\x47\xdc\x8c\x51\x7b\x0e\x35\x6e\xac\xc5\x22\x0a\x60\x0a\xc4\x13\xa9\x7a\xa9\xfe\x1e\x08\xbe\x47\xd4\x26\x20\xf8\x91\x25\x41\x7a\x45\x30\x01\x83\x9f\x88\x1d\x29\x1c\x4e\x10\xf8\xb4\xbf\xab\x42\x3c\x59\x5a\xca\xac\x91\xe4\x02\x21\x6a\x11\x21\x85\xc3\x81\xd0\xfb\xd1\x29\x18\x87\xa8\x09\x9f\xef\x6f\xb7\x0f\xfb\x2d\x7a\x63\xa9\x2e\x2e\x9a\x9c\x8b\x22\x25\x45\xbd\x71\x84\x52\x7a\x17\xc9\xc5\x32\xe7\xa2\x0d\x24\xa3\xf1\x0e\xd2\x8a\x10\x36\xe5\x1a\x56\x95\x24\x17\x89\x71\x54\xb6\x1a\xd8\xa8\xb2\x5b\x1a\xb7\xfa\xba\x4b\xa9\xfe\x2a\x62\x24\x76\x39\xb7\x8d\xbe\x5e\x33\xca\x4c\x30\x6a\x53\x3e\x0a\x9e\xd9\x67\xe0\x0c\x90\x64\x2d\xce\x8f\xaa\xba\xbc\xaa\xa4\xb7\x2b\x71\xa9\xf5\xf6\x29\x98\x4f\x4a\x2c\xdc\x40\xa8\xb7\x2e\xb2\xa1\x90\x33\x52\xfa\x65\xa2\x46\xbd\x1f\xfb\xde\xfc\xce\xf9\x2f\x7d\x6b\x4d\xd7\x0a\x68\xa6\x7e\x53\x36\x83\xf5\x87\x8f\x6e\x93\xd2\xc8\xf6\xe7\x48\x7c\xc2\xab\x7a\x3f\x9b\xce\x0f\xe2\x48\x39\xbf\x0e\xcf\x73\x75\xce\xe5\xbc\xd3\xbc\x8c\xe8\xda\xc6\x9a\x7f\x67\x21\xa7\x9e\x0d\xb0\x65\xf6\xfc\x9f\xfe\xdb\xdd\xee\xcb\xee\x4d\x4a\x13\xcd\x82\xfb\xbb\x19\xfc\xf6\x03\x56\xf2\xcb\xd4\xe5\x7e\xb2\xa2\x39\x7b\xd1\x36\xca\x4c\x5d\xd1\x36\xeb\x97\x74\xc5\xaa\xfd\x13\x00\x00\xff\xff\x8e\x08\x47\x71\x7b\x02\x00\x00")

func globHtmlBytes() ([]byte, error) {
	return bindataRead(
		_globHtml,
		"glob.html",
	)
}

func globHtml() (*asset, error) {
	bytes, err := globHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "glob.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _logsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x10\x3e\x25\x05\x6c\x7f\x2d\xd0\xef\x32\x3b\x43\x9b\x05\x58\x81\xac\x97\x74\xbb\x16\xaa\xc4\xd8\x1a\x68\x29\xa3\x64\x0f\x81\xe1\xff\x3e\x58\xb1\xd7\x24\x4d\xe6\x93\x49\xf1\x3d\x3e\x3e\x51\x5d\x97\xdd\x44\x00\x00\x4b\xbb\xdb\xb3\x2e\x2b\x0f\x77\xff\xdd\xfe\x0f\x2f\x15\xc2\x0f\x61\x84\xd2\x4d\x0d\x0f\x8d\xaf\x2c\xbb\x14\x1e\x88\x20\x14\x39\x60\x74\xc8\x2d\xaa\x34\xa0\xbf\x3b\x04\xbb\x05\x5f\x69\x07\xce\x36\x2c\x11\xa4\x55\x08\xda\x41\x69\x5b\x64\x83\x0a\xde\xf6\x20\xe0\x71\xf3\x25\x71\x7e\x4f\x18\x60\xa4\x25\x1a\x87\xe0\x2b\xe1\x41\x0a\x03\x6f\x08\x5b\xdb\x18\x05\xda\x80\xaf\x10\xd6\x4f\xcb\xd5\xf3\x66\x05\x5b\x4d\x98\x46\x37\x59\xdf\x47\x51\xd7\x29\xdc\x6a\x83\x10\x4b\x6b\x3c\x1a\x1f\xf7\x7d\x94\x3b\x94\x5e\x5b\x03\x92\x84\x73\x45\x3c\x86\x49\x22\xd1\x78\x64\xa8\x15\x25\x25\x6b\x15\x2f\x42\xe3\xbc\xba\x5f\xac\xb5\xf3\x83\x68\xb2\x65\xe0\x77\x79\x56\xdd\x8f\xc7\x4a\xb7\xa0\x55\x11\xef\x04\x0f\x0d\x26\xd6\x81\x45\x22\x11\x4c\x3f\x49\x72\x7b\x97\x48\x4b\x23\x6d\xc0\x3a\xc9\x7a\xe7\xdf\x13\xc3\xd7\x0a\x9e\x7c\x29\xc0\xe0\x6f\x58\xb5\x68\xfc\x26\x64\x66\x31\xd9\xd2\x7d\x36\x45\xd7\x35\x4c\xbf\x1a\xe4\x3d\xa4\x9b\xc1\x5c\x7e\x16\x35\xf6\x7d\x3c\xff\x74\x42\x76\x20\x4a\xad\xa9\xd1\x39\x51\x0e\x94\xdb\xc6\x84\x79\x67\x38\xf0\xce\xa1\x3b\x01\x4c\x0a\x2c\x41\x01\xca\xca\xa6\x46\xe3\xd3\x12\xfd\x8a\x70\xf8\x7d\xdc\x3f\xa9\xa0\x22\xd8\x70\xde\x6e\x42\x93\x3e\x46\x4b\x46\xe1\x71\x24\x98\xc5\xa4\x2f\xc1\x48\xa7\xda\x18\xe4\xaf\x2f\xdf\xd6\x50\x40\x10\x97\x2a\xe1\xc5\xc7\x52\x4b\xa9\xd8\xed\xd0\xa8\x65\xa5\x49\xcd\x48\x9f\xd1\xf5\x57\x3c\x40\x66\xcb\xc7\x0e\x5c\x1a\x7e\xac\x96\x64\x1d\xce\x2e\xe8\xbc\xea\xc9\x78\xff\xf3\x94\xb1\xb6\x2d\x1e\xb4\x7d\x80\xff\x9b\x82\x6d\xc9\xe8\x5c\x3c\xbf\x3e\x51\x9e\x9d\x2f\xcd\xfb\x06\x4e\xf0\xe3\x1d\x9c\x92\x61\x0f\x7f\xba\xd3\x78\x0a\x5e\x5f\xb5\x51\xe8\x91\x6b\x6d\x84\xc7\x78\x91\x67\x4a\xb7\x47\x2d\x2c\x85\x0e\x7f\xef\xfd\xe8\x28\xb3\x34\xbe\x84\x03\x26\xcf\xc6\x07\xb5\x88\xba\x0e\x8d\xea\xfb\xe8\x4f\x00\x00\x00\xff\xff\xb0\xb2\x23\xf4\x3a\x04\x00\x00")

func logsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_logsHtml,
		"logs.html",
	)
}

func logsHtml() (*asset, error) {
	bytes, err := logsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "logs.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _profilesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x5f\x6b\xdb\x30\x10\x7f\xcf\xa7\x38\xfc\xb0\x75\x05\xc7\x6b\xa1\x7b\x18\x8e\x47\xdb\x95\x6e\x50\x4a\x59\xda\xbd\x2b\xd2\xd9\x3a\x2a\xeb\xbc\x93\x9c\x34\x18\x7f\xf7\x11\x93\xf4\xef\xd6\x06\xd2\x37\x49\xe8\xf7\xef\x2c\x7e\xee\xba\x6c\x7f\x04\x00\x70\xca\xcd\x52\xa8\xb2\x11\x0e\x3f\x1f\x7c\x81\x6b\x8b\xf0\x5b\x79\x65\xa8\xad\xe1\xb8\x8d\x96\x25\x8c\xe1\xd8\x39\x18\x2e\x05\x10\x0c\x28\x73\x34\xe3\x01\x7d\x13\x10\xb8\x84\x68\x29\x40\xe0\x56\x34\x82\x66\x83\x40\x01\x2a\x9e\xa3\x78\x34\x30\x5b\x82\x82\x93\xe9\xf7\x34\xc4\xa5\xc3\x01\xe6\x48\xa3\x0f\x08\xd1\xaa\x08\x5a\x79\x98\x21\x94\xdc\x7a\x03\xe4\x21\x5a\x84\x8b\x9f\xa7\x67\x97\xd3\x33\x28\xc9\xe1\x78\xb4\x9f\xf5\xfd\x68\xd4\x75\x06\x4b\xf2\x08\x89\x66\x1f\xd1\xc7\xa4\xef\x47\x79\x40\x1d\x89\x3d\x68\xa7\x42\x98\x24\xeb\x6d\x9a\x6a\xf4\x11\x05\x6a\xe3\xd2\x4a\xc8\x24\xc5\x20\x9c\xdb\xa3\xe2\x4a\xb8\x24\x47\xbe\xca\x33\x7b\xb4\x3e\x36\x34\x07\x32\x93\xa4\x51\xb2\x22\xde\xb0\xad\xd0\x1a\x9d\x83\xcd\x22\x4d\x0f\x0e\x53\xcd\x6e\x4d\x37\x60\x5b\xf7\xb0\x19\x0e\x1c\x15\xa7\x57\x37\x4f\xce\xee\x45\xd6\xc4\x25\xdd\xa1\x49\x17\x64\xa2\x4d\x8a\x8a\x21\x32\x3b\x68\x1a\xe1\x12\xba\x6e\x7c\xf3\xeb\xe2\x4a\xb0\xa4\xbb\xbe\xcf\x9a\xc1\x2d\x7e\xf3\x93\xae\x6b\xc5\xfd\x69\x51\x96\x30\x9e\xae\xbe\x81\x5c\xaa\x1a\xfb\x3e\xcf\x0c\xcd\x9f\x59\xc8\x1c\xbd\x34\x95\x2b\xb0\x82\xe5\x24\x79\x26\x61\x51\x35\xaf\xf0\x7f\x30\x38\x6b\xab\xc9\x41\x52\xfc\x40\xd5\xe4\x99\x2a\xde\x29\xda\x1b\xba\x3b\xe7\x9a\x39\xd6\xb7\x5b\x05\x3b\x59\xdd\x7c\xc7\x64\x6f\x29\xef\x1c\x2d\x5a\x41\x65\xb4\xa0\x8a\xaf\x3d\x8d\x87\x84\xd7\x8f\x00\xef\x18\x74\x4b\x1f\x5b\xe7\x3d\x67\xe1\x36\x92\xc7\xf0\xf5\xa5\xc3\xff\xcc\xa2\xda\x60\xb6\x1a\xc4\x9e\xe6\xba\x51\x3a\x7e\xfa\xf7\x14\x76\xd7\x38\x4c\x8a\xbd\xb2\x75\xee\xa5\xc0\xd3\xc8\x79\xf6\xb8\x38\x76\x69\xa0\x01\x4f\xf7\x08\x15\x51\x48\xb9\x94\x34\xfb\x90\x14\xe4\x4b\xce\x33\x2a\x56\xcd\xae\xb9\xae\x95\x37\x01\xd4\x8c\xe7\x08\xb5\x5a\x82\xe7\x08\x0b\x96\x5b\xa0\x72\x68\x5e\xc1\x9a\x23\x42\x23\xac\x31\x04\xa0\xe0\x3f\x46\x58\x08\xc5\x88\x7e\xd5\xce\xe7\x3c\x7e\x22\x3c\x6d\x9b\x86\x25\x42\xc9\x02\xcd\xa6\x59\xd7\x3f\x01\x0f\x1c\x2d\x0a\x38\xe5\xab\x56\x55\xb8\xa2\xdb\x34\xfc\x82\x82\x75\x14\xe2\xf8\xd1\x40\xee\x1f\xc9\x7a\x99\x67\xeb\x3a\x2f\x46\x5d\x87\xde\xf4\xfd\xdf\x00\x00\x00\xff\xff\xd3\x06\xf2\xb8\xb7\x06\x00\x00")

func profilesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_profilesHtml,
		"profiles.html",
	)
}

func profilesHtml() (*asset, error) {
	bytes, err := profilesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "profiles.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resolveHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x51\x6f\xda\x3c\x14\x7d\xe7\x57\x5c\x45\xdf\x43\xbf\x4a\x4e\xd6\x4a\xdd\x43\x15\x32\xb5\x85\x07\xa4\xae\x93\xa0\xdb\x6b\x65\xe2\x1b\xe2\xcd\xd8\xcc\x76\xa0\xc8\xcd\x7f\x9f\x9c\x04\x88\x18\x4c\xa2\x4b\xb7\xf1\x02\xf6\x3d\x3e\xf7\x9e\x73\x1d\x72\x9d\x8b\xce\x7b\x00\x00\x77\x6a\xb1\xd6\x7c\x96\x5b\xb8\x7c\x77\xf1\x1e\x1e\x73\x84\x2f\x54\x52\xc6\x8b\x39\xdc\x14\x36\x57\xda\x84\x70\x23\x04\x54\x20\x03\x1a\x0d\xea\x25\xb2\xb0\x3a\xfd\xd9\x20\xa8\x0c\x6c\xce\x0d\x18\x55\xe8\x14\x21\x55\x0c\x81\x1b\x98\xa9\x25\x6a\x89\x0c\xa6\x6b\xa0\x70\x3b\x19\x10\x63\xd7\x02\xab\x63\x82\xa7\x28\x0d\x82\xcd\xa9\x85\x94\x4a\x98\x22\x64\xaa\x90\x0c\xb8\x04\x9b\x23\xdc\x8f\xee\x86\x0f\x93\x21\x64\x5c\x60\xd8\x3b\x8f\xca\xb2\xd7\x73\x8e\x61\xc6\x25\x42\x90\x2a\x69\x51\xda\xa0\x2c\x7b\xb1\xc1\xd4\x72\x25\x21\x15\xd4\x98\x7e\xd0\x2c\x09\x49\x51\x5a\xd4\x30\x67\x82\xcc\x34\x67\x41\x52\x25\x8e\xf3\xab\xe4\x81\xce\xd1\xcb\x50\xa2\xf0\xd0\x38\xca\xaf\x9a\x20\xe3\xcb\x0d\x8f\x3f\x97\xa2\x10\xb0\xf9\x41\xc8\xc5\x25\x49\x95\x68\x88\xfc\xc7\xb9\x15\xb7\x39\x84\x1f\x55\x21\xed\x50\x5a\xbd\x2e\xcb\x6d\x30\x2e\xc4\x0e\xd9\x46\xfb\xf4\x2d\x5c\x85\x15\x3c\x99\x14\x59\xc6\x9f\xaf\xc1\xb9\xb0\x2c\xe3\x48\xf0\xc4\x39\x94\xac\x2c\xb7\x07\x27\xde\x77\x53\x25\x7b\xa4\x53\x71\x88\xe4\xb1\xea\x83\xc7\x69\xdf\x02\x0a\x73\x8f\xb6\x1e\x7d\x90\x72\x64\xee\x91\x66\xc7\x88\x2a\x06\x81\x34\x6b\x28\xdb\x14\x3b\x9d\x51\x5b\xa8\x73\x9a\xca\x19\x36\xc5\x6a\xd3\x06\x9e\xe8\x6e\x75\xa6\x2a\xbd\x7d\x8a\x51\x4b\x49\xbd\xeb\x97\x5f\xcd\xfe\xce\x6e\x49\x88\x41\x81\xe9\x2e\x64\x72\xca\xd4\x8a\x90\x4b\xb6\xd8\xcb\x53\xe7\x9a\x2a\xb6\xfe\x79\xbf\x8e\xe9\xc3\x81\x3a\xc8\x0e\x57\xf8\xf4\x54\x4b\x93\x4a\x12\x59\xcc\x51\xf3\x34\x48\x86\x92\x2d\x14\x97\x36\x8e\x2c\xeb\x8a\x33\xa6\x90\x6b\xcc\xfa\x41\xf4\x41\xf6\xab\x06\x55\x29\x36\x5d\x80\x17\xd8\x6c\x55\x77\xff\x05\x0a\x2d\xbe\x17\xe8\xef\x6b\x90\x38\xd7\xc0\xfc\xb5\xa3\xc9\xf1\xba\xe2\xe8\x98\x0b\x5d\xda\xf3\xbc\xe0\x1a\x4d\x97\xee\x38\x17\x0e\x90\x32\xc1\x25\x7a\x89\xa7\xcb\x6b\x9e\x96\xff\x70\x01\xd7\x7d\xd8\x77\x77\xef\xe9\x79\x03\x4f\x1e\xd0\xae\x94\xfe\xd6\xb1\x27\x37\x8c\xe9\xb0\xa1\x7e\x9d\x2f\x1d\x4a\xf4\xc5\xa0\xe9\xba\xed\x9e\xf5\xaf\x4b\x1b\xab\xc2\x72\x39\x1b\x0d\x3a\x16\xb7\xe5\xfd\xad\x4b\x1d\xde\x0a\x34\x86\xcb\x99\xff\x67\x30\x6f\x7f\x97\x37\xe9\x0c\x9c\x39\x27\x50\x42\x58\x96\xff\x77\xec\xcc\x6b\x0d\xa9\xdf\x8d\xbf\x74\xcb\x9b\xfe\x27\x6c\xaa\xf3\xfc\xab\x1e\x9d\x14\x8b\xa3\x03\x2f\xd6\x38\xaa\xaa\x4b\x5a\x63\x04\xe3\xcb\xf6\x1c\x81\xc2\xb4\x27\x9c\xbd\xa1\x0d\x52\xbf\x2e\x16\x80\xf3\x85\x5d\xf7\x8e\xd5\xd0\x5e\x37\x19\xe2\xa8\x19\x11\x13\x3f\x51\xd6\x5d\x1d\x6a\xad\xf4\xeb\x86\xc9\x98\x6f\x7d\xa7\x16\x35\xa7\x82\xf0\x54\x49\x13\x24\x5c\x66\x2a\x8e\x78\x32\x1c\x8f\x3f\x8d\xcf\x9c\x5b\xa2\xcf\x32\x1a\x34\xdd\x3c\x69\xe8\x84\x8c\x3f\x23\x23\x2b\xce\x6c\xbe\x6d\xdf\xbe\x9c\x8d\xd8\xe6\xfb\x47\x00\x00\x00\xff\xff\xbc\x42\xa9\x8f\xe2\x0b\x00\x00")

func resolveHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resolveHtml,
		"resolve.html",
	)
}

func resolveHtml() (*asset, error) {
	bytes, err := resolveHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resolve.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _statsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdd\x6e\x1a\x3d\x10\xbd\xe7\x29\x46\xab\x7c\x5f\x7e\x24\xef\x36\x91\xd2\x8b\xc8\x6c\x95\x06\x9a\x46\x4a\x13\x29\x50\x6e\x23\xb3\x9e\x65\x5d\x19\x9b\xda\x5e\x28\xb2\xf6\xdd\xab\xfd\xa1\x10\x20\xaa\xa0\x70\xc5\x7a\x3c\x9e\x99\x73\xce\xd8\x83\xf7\xd1\x45\x0b\x00\xe0\x4e\x4f\xe6\x46\x8c\x32\x07\x57\x1f\x2e\x3f\x42\x3f\x43\x18\x30\xc5\xb8\xc8\xc7\x70\x9b\xbb\x4c\x1b\x1b\xc2\xad\x94\x50\x39\x59\x30\x68\xd1\x4c\x91\x87\xd5\xe9\xef\x16\x41\xa7\xe0\x32\x61\xc1\xea\xdc\x24\x08\x89\xe6\x08\xc2\xc2\x48\x4f\xd1\x28\xe4\x30\x9c\x03\x83\xcf\xbd\x0e\xb1\x6e\x2e\xb1\x3a\x26\x45\x82\xca\x22\xb8\x8c\x39\x48\x98\x82\x21\x42\xaa\x73\xc5\x41\x28\x70\x19\xc2\xe3\xc3\x5d\xf7\xa9\xd7\x85\x54\x48\x0c\x5b\x17\x51\x51\xb4\x5a\xde\x73\x4c\x85\x42\x08\x12\xad\x1c\x2a\x17\x14\x05\x78\x2f\x52\x08\x07\x4c\xe6\x58\x14\x2d\x6a\x31\x71\x42\x2b\x48\x24\xb3\xb6\x1d\x34\x4b\x42\x12\x54\x0e\x0d\x8c\xb9\x24\x23\x23\x78\x10\x57\x65\x50\x2e\xa6\x0b\xd7\x72\x2b\x41\x29\x61\xf1\x41\xc8\xe5\x15\x49\xb4\x6c\x7c\x2b\x7f\xc7\x86\x12\x57\x4f\x70\xe6\x18\xa9\xad\xe5\xf2\x87\x5d\xb7\x2c\x97\x84\x58\x94\x98\x2c\xb7\x6c\xc6\xb8\x9e\x11\x72\xc5\x27\x2b\x39\xea\x3c\x43\xcd\xe7\x6f\x6d\xb5\xdd\x6c\x1a\xeb\x0d\xbe\xbd\xaa\xd7\xd7\x1a\x8a\xd2\x8a\xa8\x7c\x8c\x46\x24\x41\xdc\x73\xcc\xc1\x13\x1b\x23\x8d\x1c\x3f\x44\x40\x3a\x31\x18\x7b\x1f\x96\x81\xcb\xb8\x45\x41\xa3\xd2\xb4\x3d\x3e\x8d\xb6\xc1\xf0\x7e\x26\x5c\x06\x27\x23\x3d\x60\x12\x6e\xda\x50\x7d\xe4\xf8\xc5\xe8\xf1\xe0\xf9\xdb\x52\xe3\x23\x91\x52\x85\x87\xb3\x7b\x7d\x7e\x60\x56\x6a\x44\xfb\x50\x72\x20\x64\xfd\xf9\xe4\x90\xc0\x20\x15\xbf\x90\x93\x99\xe0\x2e\x0b\x62\xef\x27\x46\x28\x97\x42\xf0\x5f\x3f\x80\x25\xd6\x5d\x84\x47\x69\x8f\x2f\xec\xa0\xf3\x78\x24\x02\x16\x9d\xb9\x23\x68\xc5\x8f\x87\xb9\x96\xfc\xd8\x90\xc3\x32\xcd\xae\xb8\xab\x5b\x1e\xf6\xc5\x18\x7b\x68\x04\xda\x0e\x73\xec\x78\x44\x7c\x15\xd6\x69\x33\x3f\xd8\x95\xb6\x89\x11\x13\x17\x73\xc3\x66\x4d\xe8\x7b\xc3\x26\x99\x3d\x3b\xf5\x3e\x2c\x8a\xd3\x73\x1a\x35\x2e\xff\xda\x0d\x34\x5a\x1b\x02\x34\xaa\xea\x6a\x26\x57\xc4\xc5\x34\x6e\xd1\xa8\x99\x70\x71\x6b\x11\xa3\x1e\x88\xf7\x52\x0f\x87\xc8\xf7\x18\x89\xd9\x75\x5c\x1e\xa6\x51\x76\xbd\xe7\x90\xcc\xe5\x5b\x84\xde\x1b\xa6\x46\x08\xe1\x5d\x26\x24\x37\xa8\xd6\x91\x4a\x11\x53\x06\x99\xc1\xb4\x1d\x58\xc7\x9c\xfd\xa4\xda\xde\xe7\x46\xfe\xcc\xd1\xcc\xe1\x24\xec\x95\xff\x38\x4c\x3d\x59\xfe\xb7\xab\x7b\x61\x51\x54\xfd\x58\x76\x21\x8b\x69\x24\xc5\x7a\xee\x4d\x66\x37\xea\xe9\x1a\xa3\x8d\xdd\x52\x55\xf7\xe5\xe5\xf9\xe5\xcc\xfb\x29\x96\x1e\x0f\x9d\x32\xdd\xf9\x0d\x34\xf9\xfe\x96\x8b\x46\x0b\x26\xb6\xaa\x55\x3f\x7a\x8b\x0b\x51\xd5\xb0\x9f\x5c\x54\xfc\x91\x87\x39\x34\x82\x49\x22\x12\xad\x6c\x10\x0b\x95\x6a\x1a\xbd\x83\x63\x47\x85\x37\x9e\x80\x92\x82\x77\x9a\x10\x56\xba\xb1\xfe\xfd\x1d\x00\x00\xff\xff\x1e\x32\xaf\xc4\x6f\x0a\x00\x00")

func statsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_statsHtml,
		"stats.html",
	)
}

func statsHtml() (*asset, error) {
	bytes, err := statsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stats.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vtraceHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xdf\x6f\xdb\x36\x10\xc7\xdf\xfd\x57\xdc\xb4\x16\x4e\xba\x49\xb6\x03\x64\x18\x24\xdb\x40\x9b\xe6\x21\x40\xd1\x87\xa5\xeb\x9e\x69\xf2\x24\x71\xa1\x49\x81\x3c\xab\x36\x38\xfe\xef\x03\xf5\xc3\x3f\x82\x06\x89\x1f\x8c\xd3\x91\xc7\xef\xf1\x73\x77\xf4\x7e\xf6\x61\x02\x00\x70\x67\x9a\x83\x95\x55\x4d\x70\x33\x5f\xfc\x01\xdf\x6a\x84\xef\x4c\x33\x21\x77\x5b\xf8\xb8\xa3\xda\x58\x97\xc1\x47\xa5\xa0\xdb\xe4\xc0\xa2\x43\xdb\xa2\xc8\xba\xe8\xbf\x1d\x82\x29\x81\x6a\xe9\xc0\x99\x9d\xe5\x08\xdc\x08\x04\xe9\xa0\x32\x2d\x5a\x8d\x02\x36\x07\x60\xf0\xe9\xf1\x73\xea\xe8\xa0\xb0\x0b\x53\x92\xa3\x76\x08\x54\x33\x02\xce\x34\x6c\x10\x4a\xb3\xd3\x02\xa4\x06\xaa\x11\xbe\x3c\xdc\xdd\x7f\x7d\xbc\x87\x52\x2a\xcc\x26\x1f\x66\x21\x4c\xbc\x17\x58\x4a\x8d\x90\x64\xae\x61\x3a\x09\x61\xb2\x14\xb2\x85\xee\xd4\x55\xd2\x18\x27\x49\x1a\x9d\x5b\x54\x8c\x64\x8b\x85\xc2\x92\x72\xef\xb3\x47\x62\x96\x42\x78\x5f\xfc\x90\x82\xea\xe8\xf9\x27\x1a\xd1\xb3\x65\xb6\x92\x3a\x9f\x37\xfb\xa2\x61\x42\x48\x5d\xa5\x64\x9a\xfc\xa6\xd9\x17\x09\x48\xb1\x4a\x84\x6c\x53\xef\xb3\x07\x11\x42\xb2\xee\x52\x5f\xfe\x92\xa6\xf0\x97\x31\x04\x31\x0b\x48\xd3\xc1\x1d\x53\x89\x11\xd6\x18\x4a\x80\x24\xc5\xa4\xbc\xcf\xbe\xb2\x2d\x86\x90\xbc\x9c\x66\x9f\xd5\x62\x3e\x7f\x5f\x6c\x18\x7f\xaa\x6c\xe4\x90\x7b\xaf\x71\x4f\x77\x46\x19\x1b\x42\x51\x63\x84\x9f\x2f\x6e\x9b\x7d\x21\xa4\x6b\x14\x3b\xe4\x1b\x65\xf8\xd3\x4f\x6e\x10\xed\x64\xbd\x9c\x09\xd9\xf6\xa9\x79\x6f\x99\xae\x10\xde\xc9\xdf\xe1\x1d\xaf\xa5\x12\x90\xaf\x20\xbb\x8b\x96\x45\x1d\x02\x78\x4f\xb8\x6d\x14\xa3\x23\xdc\x61\x63\xb7\x86\x5a\x44\xd6\xfd\x81\xe3\xe7\x79\x39\xb8\x51\x8a\x35\x0e\x53\xcd\xda\x63\x59\x22\x0b\xb2\x88\x47\x7c\xaf\x14\xea\x36\x66\x7d\x81\x72\x1a\x51\x4e\x5f\x0e\x3b\x87\x52\x1a\x4d\xf9\x62\xde\x50\x02\x46\x73\x25\xf9\xd3\x6a\xfa\x2f\x6b\x99\xe3\x56\x36\x94\x93\xa9\x2a\x85\xdf\x2c\xe3\x78\x95\x8c\x09\x5d\x4f\xd7\xde\xcb\x12\x14\xea\x13\x0d\xf8\x0f\x14\xc1\x3c\x04\xef\x2f\xfc\xd1\xd1\xdd\xfc\x27\x60\x5f\x44\x79\x01\x06\xb2\x37\xd1\xe4\x46\x13\x6a\xea\x38\x76\x57\x07\x3a\x34\xb8\x4a\x08\xf7\x34\xe3\xce\x0d\x90\xb2\x5a\x0a\x4c\xf9\x98\xf5\x3a\xd7\x86\xae\x7e\x8d\xc4\xae\xc1\x77\x3b\xe2\x6f\xec\x15\xd0\x46\x63\xd1\xb9\xa3\x76\x77\xee\x7a\xb2\xec\xe9\x80\x62\xba\xda\xb1\x0a\x57\xc9\x09\xd9\x20\x53\xee\x34\x8f\xd4\xe1\x9c\xa0\x14\xe7\x1a\x2d\xb3\x10\x0b\xdd\xcd\xc4\x0a\x84\xe1\xbb\x2d\x6a\xca\x2a\xa4\x7b\x85\xd1\xfc\x74\x78\x10\x57\x7d\x33\x24\xf0\x1b\x48\x71\x5d\x1c\xa3\xc7\xc8\x8c\x2b\xe6\xdc\x17\xe9\x28\xeb\xa5\xae\xa6\x17\x37\x9c\x9e\xc5\x44\x45\x21\xdb\x57\x04\xa7\x71\x76\xa7\xcf\xf5\x86\xb8\xb7\xca\x75\xb4\x3a\x20\x11\x17\xf6\x2c\xba\xd8\x55\x32\x7c\xa6\x29\x47\x4d\x68\x61\x2b\x54\x5a\x59\x29\xc6\x36\xae\x6f\xd7\xdf\x29\x02\x83\xd2\x58\x18\xba\x6e\x39\xab\x6f\x87\xf5\xc6\xe2\xda\xfb\xec\x33\x6e\x76\x55\x07\x36\xae\x46\xe7\x69\x0a\x06\xa5\x78\x32\x47\xa5\x60\x34\xd2\x74\x71\x93\x72\xa3\x06\xa9\xe3\xfe\x61\x56\xc6\xb2\x97\x0a\xf7\x45\xfc\x4b\x85\xb4\x7d\xb6\xb9\x35\x3f\xce\xa2\x9e\x47\x6e\xa5\x4e\xc7\x07\xe9\xfd\xb3\x7d\x7d\xcb\xbf\xdc\xde\x91\x6b\x08\x97\x47\x9f\x86\xe5\x42\x2d\x3e\x0e\x0d\xb3\xb1\xcf\x47\xe5\x5e\xf5\xcf\xd7\x55\xfb\xf7\xe9\x0d\x6a\x67\x9f\x83\xb9\x9c\x0d\x35\x3b\x4d\xde\xff\x01\x00\x00\xff\xff\x06\x9b\x5a\x17\x08\x07\x00\x00")

func vtraceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_vtraceHtml,
		"vtrace.html",
	)
}

func vtraceHtml() (*asset, error) {
	bytes, err := vtraceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vtrace.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"alltrace.html":   alltraceHtml,
	"blessings.html":  blessingsHtml,
	"chrome.html":     chromeHtml,
	"collection.html": collectionHtml,
	"glob.html":       globHtml,
	"logs.html":       logsHtml,
	"profiles.html":   profilesHtml,
	"resolve.html":    resolveHtml,
	"stats.html":      statsHtml,
	"vtrace.html":     vtraceHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"alltrace.html":   &bintree{alltraceHtml, map[string]*bintree{}},
	"blessings.html":  &bintree{blessingsHtml, map[string]*bintree{}},
	"chrome.html":     &bintree{chromeHtml, map[string]*bintree{}},
	"collection.html": &bintree{collectionHtml, map[string]*bintree{}},
	"glob.html":       &bintree{globHtml, map[string]*bintree{}},
	"logs.html":       &bintree{logsHtml, map[string]*bintree{}},
	"profiles.html":   &bintree{profilesHtml, map[string]*bintree{}},
	"resolve.html":    &bintree{resolveHtml, map[string]*bintree{}},
	"stats.html":      &bintree{statsHtml, map[string]*bintree{}},
	"vtrace.html":     &bintree{vtraceHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

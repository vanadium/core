// Copyright 2021 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: simple
//
//nolint:revive
package simple

import (
	v23 "v.io/v23"
	"v.io/v23/context"
	"v.io/v23/rpc"
	"v.io/v23/security/access"
	"v.io/v23/vdl"
)

var initializeVDLCalled = false
var _ = initializeVDL() // Must be first; see initializeVDL comments for details.

// Interface definitions
// =====================

// SimpleClientMethods is the client interface
// containing Simple methods.
type SimpleClientMethods interface {
	Ping(_ *context.T, msg string, _ ...rpc.CallOpt) (string, error)
}

// SimpleClientStub embeds SimpleClientMethods and is a
// placeholder for additional management operations.
type SimpleClientStub interface {
	SimpleClientMethods
}

// SimpleClient returns a client stub for Simple.
func SimpleClient(name string) SimpleClientStub {
	return implSimpleClientStub{name}
}

type implSimpleClientStub struct {
	name string
}

func (c implSimpleClientStub) Ping(ctx *context.T, i0 string, opts ...rpc.CallOpt) (o0 string, err error) {
	err = v23.GetClient(ctx).Call(ctx, c.name, "Ping", []interface{}{i0}, []interface{}{&o0}, opts...)
	return
}

// SimpleServerMethods is the interface a server writer
// implements for Simple.
type SimpleServerMethods interface {
	Ping(_ *context.T, _ rpc.ServerCall, msg string) (string, error)
}

// SimpleServerStubMethods is the server interface containing
// Simple methods, as expected by rpc.Server.
// There is no difference between this interface and SimpleServerMethods
// since there are no streaming methods.
type SimpleServerStubMethods SimpleServerMethods

// SimpleServerStub adds universal methods to SimpleServerStubMethods.
type SimpleServerStub interface {
	SimpleServerStubMethods
	// DescribeInterfaces the Simple interfaces.
	Describe__() []rpc.InterfaceDesc
}

// SimpleServer returns a server stub for Simple.
// It converts an implementation of SimpleServerMethods into
// an object that may be used by rpc.Server.
func SimpleServer(impl SimpleServerMethods) SimpleServerStub {
	stub := implSimpleServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := rpc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := rpc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implSimpleServerStub struct {
	impl SimpleServerMethods
	gs   *rpc.GlobState
}

func (s implSimpleServerStub) Ping(ctx *context.T, call rpc.ServerCall, i0 string) (string, error) {
	return s.impl.Ping(ctx, call, i0)
}

func (s implSimpleServerStub) Globber() *rpc.GlobState {
	return s.gs
}

func (s implSimpleServerStub) Describe__() []rpc.InterfaceDesc {
	return []rpc.InterfaceDesc{SimpleDesc}
}

// SimpleDesc describes the Simple interface.
var SimpleDesc rpc.InterfaceDesc = descSimple

// descSimple hides the desc to keep godoc clean.
var descSimple = rpc.InterfaceDesc{
	Name:    "Simple",
	PkgPath: "v.io/x/ref/test/compatibility/modules/simple",
	Methods: []rpc.MethodDesc{
		{
			Name: "Ping",
			InArgs: []rpc.ArgDesc{
				{Name: "msg", Doc: ``}, // string
			},
			OutArgs: []rpc.ArgDesc{
				{Name: "", Doc: ``}, // string
			},
			Tags: []*vdl.Value{vdl.ValueOf(access.Tag("Read"))},
		},
	},
}

// initializeVDL performs vdl initialization.  It is safe to call multiple times.
// If you have an init ordering issue, just insert the following line verbatim
// into your source files in this package, right after the "package foo" clause:
//
// var _ = initializeVDL()
//
// The purpose of this function is to ensure that vdl initialization occurs in
// the right order, and very early in the init sequence.  In particular, vdl
// registration and package variable initialization needs to occur before
// functions like vdl.TypeOf will work properly.
//
// This function returns a dummy value, so that it can be used to initialize the
// first var in the file, to take advantage of Go's defined init order.
func initializeVDL() struct{} {
	if initializeVDLCalled {
		return struct{}{}
	}
	initializeVDLCalled = true

	return struct{}{}
}

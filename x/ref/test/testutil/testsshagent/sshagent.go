// Copyright 2020 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package testsshagent

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"
	"syscall"
	"testing"
)

// SSHKeyGen runs ssh-keygen in the specified directory to generate
// a key stored in filename, eg:
// SSHKeyGen(dir, "ecdsa-256", "-t", "ecdsa", "-b", "256", "-C", "ecdsa-256")
func SSHKeyGen(dir, filename string, args ...string) error {
	args = append(args, "-f", filename, "-N", "")
	cmd := exec.Command("ssh-keygen", args...)
	cmd.Dir = dir
	fmt.Println(strings.Join(cmd.Args, " "))
	output, err := cmd.CombinedOutput()
	if err != nil {
		fmt.Printf("failed: %v: %v %s\n", strings.Join(cmd.Args, " "), err, output)
		return err
	}
	return nil
}

// SSHAdd runs ssh-add in the specified directory to connect to the
// agent sockname to add the specified keys.
func SSHAdd(dir, sockname string, args ...string) (string, error) {
	cmd := exec.Command("ssh-add", args...)
	cmd.Dir = dir
	cmd.Env = []string{"SSH_AUTH_SOCK=" + sockname}
	output, err := cmd.CombinedOutput()
	if err != nil {
		return string(output), fmt.Errorf("failed %v: to add ssh keys: %v: %s", strings.Join(cmd.Args, " "), err, output)
	}
	return string(output), nil
}

// SSHKeyGenAdd uses SSHKeyGen and SSHAdd to generate and add a key to
// an ssh agent.
func SSHKeyGenAdd(dir, filename, sockname string, args ...string) error {
	if err := SSHKeyGen(dir, filename, args...); err != nil {
		return err
	}
	_, err := SSHAdd(dir, sockname, filename)
	return err
}

// StartSSHAgent starts an ssh agent and returns a cleanup function and
// the socket name to use for connecting to the agent.
func StartSSHAgent() (func(), string, error) {
	cmd := exec.Command("ssh-agent")
	output, err := cmd.CombinedOutput()
	if err != nil {
		return nil, "", err
	}
	lines := strings.Split(string(output), "\n")
	first := lines[0]
	addr := strings.TrimPrefix(first, "SSH_AUTH_SOCK=")
	addr = strings.TrimSuffix(addr, "; export SSH_AUTH_SOCK;")
	second := lines[1]
	pidstr := strings.TrimPrefix(second, "SSH_AGENT_PID=")
	pidstr = strings.TrimSuffix(pidstr, "; export SSH_AGENT_PID;")
	pid, err := strconv.ParseInt(pidstr, 10, 64)
	if err != nil {
		return func() {}, "", fmt.Errorf("failed to parse pid from %v", second)
	}
	cleanup := func() {
		syscall.Kill(int(pid), syscall.SIGTERM)
		if testing.Verbose() {
			fmt.Println(string(output))
			fmt.Printf("killing: %v\n", int(pid))
		}
	}
	return cleanup, addr, nil
}

// GenerateSSHKeys generates sample ssh keys in the specified directory.
// The generated keys are: rsa, ecdsa-256, ecdsa-384, ecdsa-521 and ed25519.
func GenerateSSHKeys(dir string) ([]string, error) {
	names := []string{}
	for _, key := range []struct {
		name string
		err  error
	}{
		{
			"rsa",
			SSHKeyGen(dir, "rsa", "-t", "rsa", "-C", "rsa"),
		},
		{
			"rsa-2-256",
			SSHKeyGen(dir, "rsa-2-256", "-t", "rsa-sha2-256", "-C", "rsa-s2-256"),
		},
		{
			"rsa-2-512",
			SSHKeyGen(dir, "rsa-2-512", "-t", "rsa-sha2-512", "-C", "rsa-s2-512"),
		},
		{
			"ecdsa-256",
			SSHKeyGen(dir, "ecdsa-256", "-t", "ecdsa", "-b", "256", "-C", "ecdsa-256"),
		},
		{
			"ecdsa-384",
			SSHKeyGen(dir, "ecdsa-384", "-t", "ecdsa", "-b", "384", "-C", "ecdsa-384"),
		},
		{
			"ecdsa-521",
			SSHKeyGen(dir, "ecdsa-521", "-t", "ecdsa", "-b", "521", "-C", "ecdsa-521"),
		},
		{
			"ed25519",
			SSHKeyGen(dir, "ed25519", "-t", "ed25519", "-C", "ed25519"),
		},
	} {
		if err := key.err; err != nil {
			return nil, err
		}
		names = append(names, key.name)
	}
	return names, nil
}

// StartPreconfiguredAgent starts an ssh agent and preconfigures it with
// the keys generated by GenerateSSHKeys.
// It returns a cleanup function, the socket name for the agent,
// the directory that the keys are created in and an error.
func StartPreconfiguredAgent(keydir string, keys ...string) (func(), string, error) {
	cleanup, addr, err := StartSSHAgent()
	if err != nil {
		return func() {}, "", err
	}
	for _, k := range keys {
		if err := os.Chmod(filepath.Join(keydir, k), 0600); err != nil {
			panic(err)
		}
	}
	if _, err := SSHAdd(keydir, addr, keys...); err != nil {
		return func() {}, "", err
	}
	list, _ := SSHAdd(keydir, addr, "-l")
	fmt.Printf("%s\n", list)
	return cleanup, addr, nil
}
